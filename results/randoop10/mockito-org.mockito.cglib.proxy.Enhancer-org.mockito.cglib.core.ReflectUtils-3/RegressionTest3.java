import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.Predicate predicate12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = namingPolicy8.getClassName("java.beans.PropertyDescriptor[name=hi!; displayName=]", "java.beans.PropertyDescriptor[name=(I)I; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]", (java.lang.Object) "va/beans/FeatureDescriptor", predicate12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(namingPolicy8);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setValue("J", (java.lang.Object) 0.0d);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        java.lang.String str11 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.Class[] classArray9 = null;
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        enhancer10.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer10.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = signature22.equals((java.lang.Object) type23);
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        boolean boolean28 = signature22.equals((java.lang.Object) classArray25);
        enhancer10.setInterfaces(classArray25);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        propertyDescriptor33.setShortDescription("J");
        java.lang.Class<?> wildcardClass36 = propertyDescriptor33.getPropertyType();
        java.lang.Class<?> wildcardClass37 = propertyDescriptor33.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass37);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        enhancer10.setSuperclass((java.lang.Class) wildcardClass37);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type45 = classInfo44.getSuperType();
        org.mockito.asm.Type type46 = classInfo44.getSuperType();
        org.mockito.asm.Type[] typeArray47 = classInfo44.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = enhancer0.create(classArray9, (java.lang.Object[]) typeArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java/beans/PropertyDescriptor" + "'", str41, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(typeArray47);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        boolean boolean29 = enhancer24.getUseCache();
        enhancer24.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        enhancer40.setNamingPolicy(namingPolicy45);
        enhancer32.setNamingPolicy(namingPolicy45);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) 0.0d);
        enhancer24.setNamingPolicy(namingPolicy45);
        enhancer0.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        int int53 = methodInfo52.getModifiers();
        java.lang.String str54 = methodInfo52.toString();
        boolean boolean56 = methodInfo52.equals((java.lang.Object) "(I)Lava.beans.PropertyDescriptor[name=hi!;");
        int int57 = methodInfo52.getModifiers();
        java.lang.String str58 = methodInfo52.toString();
        int int59 = methodInfo52.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str58, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("LV;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        enhancer0.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        enhancer26.setStrategy(generatorStrategy29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        enhancer26.setInterfaces(classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer26.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        boolean boolean41 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setHidden(false);
        boolean boolean44 = generatorStrategy36.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy36);
        org.mockito.asm.ClassVisitor classVisitor46 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.String str5 = signature2.toString();
        java.lang.String str6 = signature2.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray7 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Callback callback24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass20, callback24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer0.setCallback(callback4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        enhancer7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        enhancer12.setUseFactory(true);
        enhancer12.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer12.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = enhancer7.getClassLoader();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        java.lang.reflect.Method[] methodArray38 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray35, false, true);
        java.lang.Class[] classArray39 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray38);
        enhancer7.setInterfaces(classArray39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer41.setCallbackFilter(callbackFilter42);
        java.lang.Class[] classArray44 = new java.lang.Class[] {};
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        enhancer41.setInterfaces(classArray44);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer48.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy51);
        java.lang.ClassLoader classLoader53 = enhancer47.getClassLoader();
        enhancer41.setClassLoader(classLoader53);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter56 = null;
        enhancer55.setCallbackFilter(callbackFilter56);
        java.lang.Class[] classArray58 = new java.lang.Class[] {};
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        enhancer55.setInterfaces(classArray58);
        enhancer41.setInterfaces(classArray58);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = enhancer0.create(classArray39, (java.lang.Object[]) classArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertNotNull(methodArray38);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.reflect.Method method9 = propertyDescriptor8.getReadMethod();
        propertyDescriptor8.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor8.attributeNames();
        java.lang.reflect.Method method13 = propertyDescriptor8.getWriteMethod();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method13);
        propertyDescriptor3.setName("C");
        java.lang.String str17 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=C]" + "'", str17, "java.beans.PropertyDescriptor[name=C]");
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        enhancer1.setStrategy(generatorStrategy4);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        enhancer9.setNamingPolicy(namingPolicy22);
        boolean boolean27 = namingPolicy22.equals((java.lang.Object) 0.0d);
        enhancer1.setNamingPolicy(namingPolicy22);
        enhancer1.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer31.setUseFactory(false);
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer39.setCallbacks(callbackArray46);
        enhancer39.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter51 = null;
        enhancer50.setCallbackFilter(callbackFilter51);
        java.lang.Class[] classArray53 = new java.lang.Class[] {};
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        enhancer50.setInterfaces(classArray53);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = enhancer56.getClassLoader();
        enhancer50.setClassLoader(classLoader62);
        enhancer39.setClassLoader(classLoader62);
        enhancer31.setClassLoader(classLoader62);
        enhancer1.setClassLoader(classLoader62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method67 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; displayName=(I)J]", classLoader62);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        boolean boolean9 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setShortDescription("(I)Lava.beans.PropertyDescriptor[name=hi!;");
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getName();
        propertyDescriptor15.setExpert(false);
        propertyDescriptor15.setPreferred(true);
        boolean boolean21 = propertyDescriptor15.isHidden();
        propertyDescriptor15.setHidden(true);
        boolean boolean24 = propertyDescriptor15.isExpert();
        boolean boolean25 = propertyDescriptor3.equals((java.lang.Object) boolean24);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray18 = null;
        enhancer0.setInterfaces(classArray18);
        java.lang.ClassLoader classLoader20 = enhancer0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader20);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer1.getNamingPolicy();
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        boolean boolean16 = enhancer11.getUseCache();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        enhancer27.setNamingPolicy(namingPolicy32);
        enhancer19.setNamingPolicy(namingPolicy32);
        boolean boolean37 = namingPolicy32.equals((java.lang.Object) 0.0d);
        enhancer11.setNamingPolicy(namingPolicy32);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer41.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy44);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        propertyDescriptor49.setShortDescription("J");
        java.lang.Class<?> wildcardClass52 = propertyDescriptor49.getPropertyType();
        java.lang.Class<?> wildcardClass53 = propertyDescriptor49.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass53);
        java.lang.ClassLoader classLoader61 = enhancer11.getClassLoader();
        enhancer1.setClassLoader(classLoader61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method63 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={java.beans.PropertyDescriptor=L()Ljava/beans/PropertyDescriptor;;}]", classLoader61);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java/beans/PropertyDescriptor" + "'", str57, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("Ljava/beans/FeatureDescriptor;", "(FIDCCJ)Lva/beans/FeatureDescriptor;");
        org.mockito.asm.Type type11 = signature10.getReturnType();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]]", (java.lang.Object) signature10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Linit>(Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        java.lang.Object[] objArray54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor47, objArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.lang.NullPointerException@59b1ca6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V=java.beans.PropertyDescriptor[name=hi!; displayName=D]}]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Z()Ljava/beans/FeatureDescriptor;", "V");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'Z()Ljava/beans/FeatureDescriptor;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("ava.beans.PropertyDescriptor[name=hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 10);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        java.lang.String str56 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer58.setNamingPolicy(namingPolicy62);
        enhancer57.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer57.setCallbackFilter(callbackFilter65);
        enhancer57.setUseCache(false);
        java.lang.ClassLoader classLoader69 = enhancer57.getClassLoader();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("hi!", method71, method72);
        propertyDescriptor73.setShortDescription("J");
        java.lang.Class<?> wildcardClass76 = propertyDescriptor73.getPropertyType();
        java.lang.Class<?> wildcardClass77 = propertyDescriptor73.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.lang.String str79 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        enhancer57.setSuperclass((java.lang.Class) wildcardClass77);
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        enhancer81.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy84 = null;
        enhancer81.setStrategy(generatorStrategy84);
        java.lang.Class[] classArray86 = new java.lang.Class[] {};
        java.lang.String[] strArray87 = org.mockito.cglib.core.ReflectUtils.getNames(classArray86);
        java.lang.String[] strArray88 = org.mockito.cglib.core.ReflectUtils.getNames(classArray86);
        enhancer81.setInterfaces(classArray86);
        int int90 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray86);
        enhancer57.setInterfaces(classArray86);
        java.lang.String[] strArray92 = org.mockito.cglib.core.ReflectUtils.getNames(classArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj93 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor47, (java.lang.Object[]) strArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str56, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader69);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java/beans/PropertyDescriptor" + "'", str79, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(strArray92);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setBound(true);
        boolean boolean22 = propertyDescriptor12.isPreferred();
        java.lang.reflect.Method method23 = null;
        propertyDescriptor12.setReadMethod(method23);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor12.setWriteMethod(method25);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.String str27 = signature11.getName();
        java.lang.String str28 = signature11.toString();
        java.lang.String str29 = signature11.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str27, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str28, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str29, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.toString();
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray28);
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass20, classArray30, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "I" + "'", str26, "I");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(I)I" + "'", str29, "(I)I");
        org.junit.Assert.assertNotNull(classArray30);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setShortDescription("float");
        java.lang.String str11 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=float]" + "'", str13, "java.beans.PropertyDescriptor[name=hi!; shortDescription=float]");
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str6, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        enhancer0.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        enhancer26.setStrategy(generatorStrategy29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        enhancer26.setInterfaces(classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer26.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        boolean boolean41 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setHidden(false);
        boolean boolean44 = generatorStrategy36.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy36);
        java.lang.Class<?> wildcardClass46 = generatorStrategy36.getClass();
        org.mockito.cglib.proxy.Callback callback47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass46, callback47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 10);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.ClassInfo classInfo56 = methodInfo55.getClassInfo();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        boolean boolean68 = classInfo56.equals((java.lang.Object) wildcardClass64);
        java.util.List list69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list70 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass64, list69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        enhancer0.setInterfaces(classArray3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = enhancer6.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer14.setCallbackFilter(callbackFilter15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer14.setInterfaces(classArray17);
        enhancer0.setInterfaces(classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer23.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer23.setCallbackFilter(callbackFilter31);
        enhancer23.setUseCache(false);
        java.lang.ClassLoader classLoader35 = enhancer23.getClassLoader();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass43);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        enhancer47.setStrategy(generatorStrategy50);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        enhancer47.setInterfaces(classArray52);
        int int56 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray52);
        enhancer23.setInterfaces(classArray52);
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("hi!", method60, method61);
        propertyDescriptor62.setShortDescription("J");
        java.lang.Class<?> wildcardClass65 = propertyDescriptor62.getPropertyType();
        java.lang.Class<?> wildcardClass66 = propertyDescriptor62.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass66);
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass66);
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass66);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass66);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, false, true);
        java.lang.reflect.Method[] methodArray77 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray71, false, true);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray58, methodArray77);
        java.lang.reflect.Method[] methodArray79 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray21, methodArray77);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java/beans/PropertyDescriptor" + "'", str69, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java/beans/PropertyDescriptor" + "'", str70, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(methodArray74);
        org.junit.Assert.assertNotNull(methodArray77);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(methodArray79);
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer1.setCallbackFilter(callbackFilter2);
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        enhancer1.setInterfaces(classArray4);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        java.lang.ClassLoader classLoader13 = enhancer7.getClassLoader();
        enhancer1.setClassLoader(classLoader13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter16 = null;
        enhancer15.setCallbackFilter(callbackFilter16);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer15.setInterfaces(classArray18);
        enhancer1.setInterfaces(classArray18);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        enhancer22.setStrategy(generatorStrategy25);
        boolean boolean27 = enhancer22.getUseCache();
        enhancer22.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer22.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer32.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer38.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer37.setCallbacks(callbackArray44);
        enhancer31.setCallbacks(callbackArray44);
        enhancer22.setCallbacks(callbackArray44);
        enhancer1.setCallbacks(callbackArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(callbackArray44);
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type[] typeArray10 = classInfo9.getInterfaces();
        org.mockito.asm.Type type11 = classInfo9.getType();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        propertyDescriptor15.setShortDescription("J");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor15.getPropertyType();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor15.getClass();
        org.mockito.cglib.core.ClassInfo classInfo20 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type[] typeArray21 = classInfo20.getInterfaces();
        org.mockito.asm.Type[] typeArray22 = classInfo20.getInterfaces();
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!]", type11, typeArray22);
        int int25 = type11.getOpcode((int) (byte) 1);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classInfo20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer23.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer22.setCallbacks(callbackArray29);
        enhancer16.setCallbacks(callbackArray29);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer16.getNamingPolicy();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        boolean boolean37 = propertyDescriptor36.isHidden();
        java.lang.reflect.Method method38 = propertyDescriptor36.getWriteMethod();
        java.lang.reflect.Method method39 = propertyDescriptor36.getWriteMethod();
        boolean boolean40 = namingPolicy32.equals((java.lang.Object) method39);
        org.mockito.cglib.core.Predicate predicate41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = namingPolicy13.getClassName("org/mockito/cglib/core/DefaultNamingPolicy", "org/mockito/cglib/proxy/Enhancer", (java.lang.Object) boolean40, predicate41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertNull(method39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) -1, (byte) 100, (byte) 0, (byte) 0, (byte) 10 };
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader14 = enhancer8.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer8.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer16.setUseFactory(false);
        enhancer16.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer24.setCallbacks(callbackArray31);
        enhancer24.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer35.setCallbackFilter(callbackFilter36);
        java.lang.Class[] classArray38 = new java.lang.Class[] {};
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        enhancer35.setInterfaces(classArray38);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        java.lang.ClassLoader classLoader47 = enhancer41.getClassLoader();
        enhancer35.setClassLoader(classLoader47);
        enhancer24.setClassLoader(classLoader47);
        enhancer16.setClassLoader(classLoader47);
        enhancer8.setClassLoader(classLoader47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class52 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]", byteArray7, classLoader47);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, -1, 100, 0, 0, 10]");
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(classLoader47);
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean10 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str14 = signature13.toString();
        org.mockito.asm.Type[] typeArray15 = signature13.getArgumentTypes();
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        org.mockito.cglib.proxy.Callback callback20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass17, callback20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str14, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        boolean boolean9 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setDisplayName("<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("va.beans.PropertyDescriptor");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getSize();
        int int5 = type1.getOpcode((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type6 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "va.beans.PropertyDescriptor" + "'", str2, "va.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 56 + "'", int5 == 56);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass24);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list32 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass24, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java/beans/PropertyDescriptor" + "'", str29, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java/beans/PropertyDescriptor" + "'", str30, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(namingPolicy18);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.lang.Object obj7 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration8);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(I)LI;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.reflect.Method method26 = propertyDescriptor25.getReadMethod();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setHidden(false);
        boolean boolean30 = propertyDescriptor25.isHidden();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setName("java/beans/PropertyDescriptor");
        propertyDescriptor25.setName("(I)LI;");
        propertyDescriptor25.setShortDescription("(I)LI;");
        java.lang.reflect.Method method38 = propertyDescriptor25.getReadMethod();
        boolean boolean39 = classInfo8.equals((java.lang.Object) propertyDescriptor25);
        java.lang.Object obj41 = propertyDescriptor25.getValue("va/beans/FeatureDescriptor");
        java.lang.reflect.Method method42 = propertyDescriptor25.getReadMethod();
        java.lang.reflect.Method method43 = null;
        propertyDescriptor25.setReadMethod(method43);
        boolean boolean45 = propertyDescriptor25.isExpert();
        boolean boolean46 = propertyDescriptor25.isPreferred();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        java.lang.ClassLoader classLoader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class4 = org.mockito.cglib.core.ReflectUtils.defineClass("<init>()V", byteArray2, classLoader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray34);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        enhancer38.setStrategy(generatorStrategy41);
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        enhancer38.setInterfaces(classArray43);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer38.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer38.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        enhancer51.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer51.getNamingPolicy();
        enhancer50.setNamingPolicy(namingPolicy54);
        enhancer49.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer58.setNamingPolicy(namingPolicy62);
        enhancer57.setNamingPolicy(namingPolicy62);
        enhancer49.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        enhancer67.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer67.getNamingPolicy();
        enhancer66.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Callback callback72 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray73 = new org.mockito.cglib.proxy.Callback[] { callback72 };
        enhancer66.setCallbacks(callbackArray73);
        enhancer49.setCallbacks(callbackArray73);
        enhancer38.setCallbacks(callbackArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, classArray35, callbackFilter37, callbackArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(callbackArray73);
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.Class<?> wildcardClass49 = signature48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str52 = type51.toString();
        boolean boolean54 = type51.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str56 = type55.toString();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str58 = type57.toString();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type57 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray59);
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type51, typeArray59);
        java.lang.String str62 = signature61.getName();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer65.getNamingPolicy();
        enhancer64.setNamingPolicy(namingPolicy68);
        enhancer63.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter71 = null;
        enhancer63.setCallbackFilter(callbackFilter71);
        enhancer63.setUseCache(false);
        java.lang.ClassLoader classLoader75 = enhancer63.getClassLoader();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("hi!", method77, method78);
        propertyDescriptor79.setShortDescription("J");
        java.lang.Class<?> wildcardClass82 = propertyDescriptor79.getPropertyType();
        java.lang.Class<?> wildcardClass83 = propertyDescriptor79.getClass();
        org.mockito.cglib.core.ClassInfo classInfo84 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass83);
        enhancer63.setSuperclass((java.lang.Class) wildcardClass83);
        java.beans.PropertyDescriptor[] propertyDescriptorArray86 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass83);
        org.mockito.cglib.core.ClassInfo classInfo87 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass83);
        java.beans.PropertyDescriptor[] propertyDescriptorArray88 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass83);
        boolean boolean89 = signature61.equals((java.lang.Object) propertyDescriptorArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray88);
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass49, classArray90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "J" + "'", str52, "J");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "J" + "'", str56, "J");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "I" + "'", str58, "I");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(I)J" + "'", str60, "(I)J");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str62, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(classInfo84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray86);
        org.junit.Assert.assertNotNull(classInfo87);
        org.junit.Assert.assertNotNull(propertyDescriptorArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(classArray90);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray13 = org.mockito.asm.Type.getArgumentTypes("(I)LI;");
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray13);
        int int15 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray14);
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass7, classArray14, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setShortDescription("float");
        java.lang.String str11 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        propertyDescriptor33.setShortDescription("J");
        java.lang.Class<?> wildcardClass36 = propertyDescriptor33.getPropertyType();
        java.lang.Class<?> wildcardClass37 = propertyDescriptor33.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy48);
        enhancer43.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter51 = null;
        enhancer43.setCallbackFilter(callbackFilter51);
        enhancer43.setUseCache(false);
        java.lang.ClassLoader classLoader55 = enhancer43.getClassLoader();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("hi!", method57, method58);
        propertyDescriptor59.setShortDescription("J");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor59.getPropertyType();
        java.lang.Class<?> wildcardClass63 = propertyDescriptor59.getClass();
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        enhancer43.setSuperclass((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass63);
        java.lang.String str67 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass63);
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        propertyDescriptor71.setShortDescription("J");
        java.lang.Class<?> wildcardClass74 = propertyDescriptor71.getPropertyType();
        java.lang.Class<?> wildcardClass75 = propertyDescriptor71.getClass();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("hi!", method77, method78);
        propertyDescriptor79.setShortDescription("J");
        java.lang.Class<?> wildcardClass82 = propertyDescriptor79.getPropertyType();
        java.lang.Class<?> wildcardClass83 = propertyDescriptor79.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        java.lang.Class[] classArray87 = new java.lang.Class[] { wildcardClass75, wildcardClass83 };
        java.lang.String[] strArray88 = org.mockito.cglib.core.ReflectUtils.getNames(classArray87);
        int int89 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray87);
        java.lang.reflect.Constructor constructor90 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass63, classArray87);
        org.mockito.cglib.core.MethodInfo methodInfo91 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90);
        org.mockito.cglib.core.MethodInfo methodInfo92 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90);
        org.mockito.asm.Type[] typeArray93 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor90);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray93);
        java.lang.Class[] classArray95 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray93);
        enhancer0.setInterfaces(classArray95);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str41, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str67, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(constructor90);
        org.junit.Assert.assertNotNull(methodInfo91);
        org.junit.Assert.assertNotNull(methodInfo92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str94, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classArray95);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        java.lang.String str21 = classInfo8.toString();
        org.mockito.asm.Type type22 = classInfo8.getType();
        java.lang.Class<?> wildcardClass23 = classInfo8.getClass();
        org.mockito.cglib.proxy.Callback callback24 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray25 = new org.mockito.cglib.proxy.Callback[] { callback24 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass23, callbackArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.ReflectUtils$4 is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(callbackArray25);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        boolean boolean8 = propertyDescriptor4.isPreferred();
        propertyDescriptor4.setHidden(true);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor4.setWriteMethod(method11);
        propertyDescriptor4.setHidden(false);
        java.lang.String str15 = propertyDescriptor4.getName();
        propertyDescriptor4.setExpert(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer19.setCallbacks(callbackArray26);
        java.lang.ClassLoader classLoader28 = enhancer19.getClassLoader();
        propertyDescriptor4.setValue("java/beans/FeatureDescriptor(I)I", (java.lang.Object) classLoader28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor30 = org.mockito.cglib.core.ReflectUtils.findConstructor("Ljava/beans/FeatureDescriptor;", classLoader28);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(callbackArray26);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]", "Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        boolean boolean9 = propertyDescriptor3.isPreferred();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer10.setCallbackFilter(callbackFilter11);
        enhancer10.setAttemptLoad(true);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        propertyDescriptor18.setShortDescription("J");
        java.lang.Class<?> wildcardClass21 = propertyDescriptor18.getPropertyType();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor18.getClass();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        propertyDescriptor26.setShortDescription("J");
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor26.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.lang.Class[] classArray34 = new java.lang.Class[] { wildcardClass22, wildcardClass30 };
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray34);
        enhancer10.setInterfaces(classArray34);
        boolean boolean38 = propertyDescriptor3.equals((java.lang.Object) enhancer10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("L(I)Lava.beans.PropertyDescriptor[name=hi!;;");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/beans/PropertyDescriptor" + "'", str23, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setConstrained(false);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        propertyDescriptor14.setShortDescription("J");
        java.lang.Class<?> wildcardClass17 = propertyDescriptor14.getPropertyType();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor14.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        int int23 = type22.getDimensions();
        org.mockito.asm.Type type24 = type22.getElementType();
        propertyDescriptor3.setValue("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;", (java.lang.Object) type24);
        java.lang.String str26 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java/beans/PropertyDescriptor" + "'", str20, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;=Lva/beans/PropertyDescriptor;}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;=Lva/beans/PropertyDescriptor;}]");
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(I)J" + "'", str15, "(I)J");
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Callback callback22 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray23 = new org.mockito.cglib.proxy.Callback[] { callback22 };
        enhancer16.setCallbacks(callbackArray23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer16.getStrategy();
        enhancer16.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy33);
        enhancer28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer28.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader43 = enhancer28.getClassLoader();
        java.lang.ClassLoader classLoader44 = enhancer28.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer28.getNamingPolicy();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        java.lang.String str50 = propertyDescriptor49.getName();
        boolean boolean51 = propertyDescriptor49.isHidden();
        java.lang.String str52 = propertyDescriptor49.getName();
        propertyDescriptor49.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer56.setUseFactory(false);
        enhancer56.setInterceptDuringConstruction(true);
        propertyDescriptor49.setValue("(FIDCCJ)I", (java.lang.Object) enhancer56);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer56.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        enhancer67.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer67.getNamingPolicy();
        enhancer66.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        enhancer73.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = enhancer73.getNamingPolicy();
        enhancer72.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Callback callback78 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray79 = new org.mockito.cglib.proxy.Callback[] { callback78 };
        enhancer72.setCallbacks(callbackArray79);
        enhancer66.setCallbacks(callbackArray79);
        enhancer56.setCallbacks(callbackArray79);
        enhancer28.setCallbacks(callbackArray79);
        enhancer16.setCallbacks(callbackArray79);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass14, callbackArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(callbackArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(callbackArray79);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(I)LI;" + "'", str17, "(I)LI;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor4.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass8);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        boolean boolean14 = type0.equals((java.lang.Object) wildcardClass8);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        boolean boolean19 = propertyDescriptor18.isHidden();
        propertyDescriptor18.setHidden(false);
        propertyDescriptor18.setDisplayName("(I)J");
        java.lang.reflect.Method method24 = null;
        propertyDescriptor18.setWriteMethod(method24);
        propertyDescriptor18.setPreferred(false);
        java.lang.Class<?> wildcardClass28 = propertyDescriptor18.getPropertyType();
        propertyDescriptor18.setExpert(true);
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        propertyDescriptor35.setShortDescription("J");
        java.lang.Class<?> wildcardClass38 = propertyDescriptor35.getPropertyType();
        java.lang.Class<?> wildcardClass39 = propertyDescriptor35.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass39);
        propertyDescriptor18.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass8, classArray46);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(classArray46);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setPreferred(true);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("(I)J");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isHidden();
        boolean boolean12 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setValue("J", (java.lang.Object) 0.0d);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("D");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.reflect.Method method19 = propertyDescriptor18.getReadMethod();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor18.getPropertyEditorClass();
        propertyDescriptor18.setValue("J", (java.lang.Object) 0.0d);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor18.getPropertyType();
        boolean boolean25 = propertyDescriptor3.equals((java.lang.Object) propertyDescriptor18);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "D" + "'", str12, "D");
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        propertyDescriptor8.setShortDescription("J");
        java.lang.Class<?> wildcardClass11 = propertyDescriptor8.getPropertyType();
        boolean boolean12 = type3.equals((java.lang.Object) wildcardClass11);
        java.lang.String str13 = type3.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer23.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy26);
        enhancer14.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader29 = enhancer14.getClassLoader();
        java.lang.ClassLoader classLoader30 = enhancer14.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer14.getNamingPolicy();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        java.lang.String str36 = propertyDescriptor35.getName();
        boolean boolean37 = propertyDescriptor35.isHidden();
        java.lang.String str38 = propertyDescriptor35.getName();
        propertyDescriptor35.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer42.setUseFactory(false);
        enhancer42.setInterceptDuringConstruction(true);
        propertyDescriptor35.setValue("(FIDCCJ)I", (java.lang.Object) enhancer42);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer42.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        enhancer53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer53.getNamingPolicy();
        enhancer52.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer58.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Callback callback64 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray65 = new org.mockito.cglib.proxy.Callback[] { callback64 };
        enhancer58.setCallbacks(callbackArray65);
        enhancer52.setCallbacks(callbackArray65);
        enhancer42.setCallbacks(callbackArray65);
        enhancer14.setCallbacks(callbackArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass7, callbackArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(callbackArray65);
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setConstrained(true);
        boolean boolean17 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        byte[] byteArray1 = null;
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer4.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy7);
        enhancer2.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer2.setCallbackFilter(callbackFilter10);
        boolean boolean12 = enhancer2.getUseCache();
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer15.getStrategy();
        enhancer15.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader19 = enhancer15.getClassLoader();
        enhancer2.setClassLoader(classLoader19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class21 = org.mockito.cglib.core.ReflectUtils.defineClass("(I)Lava.beans.PropertyDescriptor[name=hi!;", byteArray1, classLoader19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertNotNull(classLoader19);
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(false);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        propertyDescriptor23.setShortDescription("J");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor23.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, true);
        java.lang.Class[] classArray33 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray32);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.lang.reflect.Method");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; values={J=I}]]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        propertyDescriptor21.setShortDescription("J");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor21.getPropertyType();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor21.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass25);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type30 = classInfo29.getSuperType();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getReturnType("J");
        java.lang.String str33 = type32.getDescriptor();
        java.lang.String str34 = type32.getDescriptor();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.toString();
        org.mockito.asm.Type[] typeArray38 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray38);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray38);
        java.lang.Class[] classArray42 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray38);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy48);
        enhancer43.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter51 = null;
        enhancer43.setCallbackFilter(callbackFilter51);
        enhancer43.setUseCache(false);
        java.lang.ClassLoader classLoader55 = enhancer43.getClassLoader();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("hi!", method57, method58);
        propertyDescriptor59.setShortDescription("J");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor59.getPropertyType();
        java.lang.Class<?> wildcardClass63 = propertyDescriptor59.getClass();
        org.mockito.cglib.core.ClassInfo classInfo64 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        enhancer43.setSuperclass((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass63);
        java.lang.String str67 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass63);
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        propertyDescriptor71.setShortDescription("J");
        java.lang.Class<?> wildcardClass74 = propertyDescriptor71.getPropertyType();
        java.lang.Class<?> wildcardClass75 = propertyDescriptor71.getClass();
        java.lang.reflect.Method method77 = null;
        java.lang.reflect.Method method78 = null;
        java.beans.PropertyDescriptor propertyDescriptor79 = new java.beans.PropertyDescriptor("hi!", method77, method78);
        propertyDescriptor79.setShortDescription("J");
        java.lang.Class<?> wildcardClass82 = propertyDescriptor79.getPropertyType();
        java.lang.Class<?> wildcardClass83 = propertyDescriptor79.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        java.lang.Class[] classArray87 = new java.lang.Class[] { wildcardClass75, wildcardClass83 };
        java.lang.String[] strArray88 = org.mockito.cglib.core.ReflectUtils.getNames(classArray87);
        int int89 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray87);
        java.lang.reflect.Constructor constructor90 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass63, classArray87);
        org.mockito.cglib.core.MethodInfo methodInfo91 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90);
        org.mockito.cglib.core.MethodInfo methodInfo92 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90);
        org.mockito.asm.Type[] typeArray93 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor90);
        org.mockito.cglib.core.MethodInfo methodInfo95 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor90, (int) (byte) 0);
        org.mockito.asm.Type[] typeArray96 = methodInfo95.getExceptionTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = enhancer0.create(classArray42, (java.lang.Object[]) typeArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java/beans/PropertyDescriptor" + "'", str28, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "J" + "'", str33, "J");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "J" + "'", str34, "J");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "I" + "'", str36, "I");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(I)I" + "'", str39, "(I)I");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(I)J" + "'", str40, "(I)J");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(I)Ljava/beans/FeatureDescriptor;" + "'", str41, "(I)Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader55);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(classInfo64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str67, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(classArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(constructor90);
        org.junit.Assert.assertNotNull(methodInfo91);
        org.junit.Assert.assertNotNull(methodInfo92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertNotNull(methodInfo95);
        org.junit.Assert.assertNotNull(typeArray96);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyType();
        boolean boolean6 = propertyDescriptor3.isHidden();
        java.lang.String str7 = propertyDescriptor3.getName();
        boolean boolean8 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Callback callback7 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray8 = new org.mockito.cglib.proxy.Callback[] { callback7 };
        enhancer1.setCallbacks(callbackArray8);
        enhancer1.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer12.setCallbackFilter(callbackFilter13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        enhancer12.setInterfaces(classArray15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        java.lang.ClassLoader classLoader24 = enhancer18.getClassLoader();
        enhancer12.setClassLoader(classLoader24);
        enhancer1.setClassLoader(classLoader24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer1.getStrategy();
        boolean boolean28 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(true);
        enhancer1.setUseFactory(true);
        enhancer1.setSerialVersionUID((java.lang.Long) 0L);
        enhancer1.setUseFactory(true);
        java.lang.ClassLoader classLoader37 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor38 = org.mockito.cglib.core.ReflectUtils.findConstructor("java/beans/PropertyDescriptor", classLoader37);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(callbackArray8);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        int int51 = methodInfo50.getModifiers();
        org.mockito.asm.Type[] typeArray52 = methodInfo50.getExceptionTypes();
        java.lang.String str53 = methodInfo50.toString();
        java.lang.String str54 = methodInfo50.toString();
        org.mockito.cglib.core.Signature signature55 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray56 = methodInfo50.getExceptionTypes();
        boolean boolean58 = methodInfo50.equals((java.lang.Object) 13);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("I(I)I", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'I(I)I' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader8 = enhancer0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer9.setCallbackFilter(callbackFilter10);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        enhancer9.setInterfaces(classArray12);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray15 = generatorStrategy8.generate((org.mockito.cglib.core.ClassGenerator) enhancer9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method16 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        enhancer9.setStrategy(generatorStrategy12);
        boolean boolean14 = enhancer9.getUseCache();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        enhancer17.setNamingPolicy(namingPolicy30);
        boolean boolean35 = namingPolicy30.equals((java.lang.Object) 0.0d);
        enhancer9.setNamingPolicy(namingPolicy30);
        enhancer9.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer46.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy49);
        enhancer44.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer44.setCallbackFilter(callbackFilter52);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader56 = enhancer44.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer44.getStrategy();
        enhancer9.setStrategy(generatorStrategy57);
        propertyDescriptor3.setValue("(I)F", (java.lang.Object) enhancer9);
        java.lang.ClassLoader classLoader60 = enhancer9.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = enhancer9.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass42);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer50.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer55.getNamingPolicy();
        enhancer54.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.Callback callback60 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray61 = new org.mockito.cglib.proxy.Callback[] { callback60 };
        enhancer54.setCallbacks(callbackArray61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer54.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer54.setCallbackFilter(callbackFilter64);
        org.mockito.cglib.core.Signature signature68 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = signature68.equals((java.lang.Object) type69);
        java.lang.Class[] classArray71 = new java.lang.Class[] {};
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray71);
        java.lang.String[] strArray73 = org.mockito.cglib.core.ReflectUtils.getNames(classArray71);
        boolean boolean74 = signature68.equals((java.lang.Object) classArray71);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray71);
        enhancer54.setInterfaces(classArray75);
        enhancer50.setInterfaces(classArray75);
        int int78 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray75);
        org.mockito.cglib.proxy.Callback callback79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass42, classArray75, callback79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java/beans/PropertyDescriptor" + "'", str46, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(callbackArray61);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(classArray75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str13 = type12.getInternalName();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer14.setCallbackFilter(callbackFilter22);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader26 = enhancer14.getClassLoader();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        propertyDescriptor30.setShortDescription("J");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor30.getPropertyType();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor30.getClass();
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        enhancer14.setSuperclass((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass34);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass34);
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("hi!", method48, method49);
        propertyDescriptor50.setShortDescription("J");
        java.lang.Class<?> wildcardClass53 = propertyDescriptor50.getPropertyType();
        java.lang.Class<?> wildcardClass54 = propertyDescriptor50.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass46, wildcardClass54 };
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        java.lang.reflect.Constructor constructor61 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass34, classArray58);
        java.lang.String str62 = org.mockito.asm.Type.getConstructorDescriptor(constructor61);
        org.mockito.cglib.core.MethodInfo methodInfo64 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor61, (int) (short) 10);
        org.mockito.asm.Type[] typeArray65 = methodInfo64.getExceptionTypes();
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray65);
        java.lang.String str68 = type12.getInternalName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java/beans/PropertyDescriptor" + "'", str13, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str38, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(constructor61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str62, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str67, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java/beans/PropertyDescriptor" + "'", str68, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean15 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        propertyDescriptor19.setShortDescription("J");
        java.lang.Class<?> wildcardClass22 = propertyDescriptor19.getPropertyType();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor19.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.beans.PropertyDescriptor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java/beans/PropertyDescriptor" + "'", str25, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        enhancer24.setInterfaces(classArray29);
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        enhancer0.setInterfaces(classArray29);
        java.lang.Class[] classArray35 = new java.lang.Class[] {};
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray35);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray35);
        enhancer0.setInterfaces(classArray35);
        org.mockito.asm.ClassVisitor classVisitor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(classArray37);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method25 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("J");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.toString();
        org.mockito.asm.Type[] typeArray7 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str8 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray7);
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray7);
        int int10 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "J" + "'", str3, "J");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(I)I" + "'", str8, "(I)I");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(I)J" + "'", str9, "(I)J");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(I)LI;" + "'", str16, "(I)LI;");
        org.junit.Assert.assertNotNull(strEnumeration17);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.String str5 = type3.getClassName();
        java.lang.String str6 = type3.getDescriptor();
        java.lang.String str7 = type3.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "F" + "'", str7, "F");
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer10.setUseFactory(false);
        enhancer10.setInterceptDuringConstruction(true);
        propertyDescriptor3.setValue("(FIDCCJ)I", (java.lang.Object) enhancer10);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer10.setCallbackFilter(callbackFilter19);
        enhancer10.setAttemptLoad(false);
        enhancer10.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        enhancer25.setStrategy(generatorStrategy28);
        boolean boolean30 = enhancer25.getUseCache();
        enhancer25.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        enhancer33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer43.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy46);
        enhancer41.setNamingPolicy(namingPolicy46);
        enhancer33.setNamingPolicy(namingPolicy46);
        boolean boolean51 = namingPolicy46.equals((java.lang.Object) 0.0d);
        enhancer25.setNamingPolicy(namingPolicy46);
        enhancer25.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer55.getNamingPolicy();
        enhancer55.setUseFactory(false);
        enhancer55.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        enhancer64.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer64.getNamingPolicy();
        enhancer63.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Callback callback69 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray70 = new org.mockito.cglib.proxy.Callback[] { callback69 };
        enhancer63.setCallbacks(callbackArray70);
        enhancer63.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter75 = null;
        enhancer74.setCallbackFilter(callbackFilter75);
        java.lang.Class[] classArray77 = new java.lang.Class[] {};
        java.lang.String[] strArray78 = org.mockito.cglib.core.ReflectUtils.getNames(classArray77);
        enhancer74.setInterfaces(classArray77);
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer81 = new org.mockito.cglib.proxy.Enhancer();
        enhancer81.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy84 = enhancer81.getNamingPolicy();
        enhancer80.setNamingPolicy(namingPolicy84);
        java.lang.ClassLoader classLoader86 = enhancer80.getClassLoader();
        enhancer74.setClassLoader(classLoader86);
        enhancer63.setClassLoader(classLoader86);
        enhancer55.setClassLoader(classLoader86);
        enhancer25.setClassLoader(classLoader86);
        enhancer10.setClassLoader(classLoader86);
        org.mockito.asm.ClassVisitor classVisitor92 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer10.generateClass(classVisitor92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(callbackArray70);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(namingPolicy84);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        java.lang.String str12 = classInfo8.toString();
        org.mockito.asm.Type type13 = classInfo8.getSuperType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor" + "'", str12, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        java.lang.String str20 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]" + "'", str20, "java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]");
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer22.setCallbackFilter(callbackFilter23);
        boolean boolean25 = enhancer22.getAttemptLoad();
        enhancer22.setAttemptLoad(false);
        boolean boolean28 = enhancer22.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer29.setCallbackFilter(callbackFilter30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        enhancer29.setInterfaces(classArray32);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer44.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy47);
        enhancer35.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader50 = enhancer35.getClassLoader();
        enhancer29.setClassLoader(classLoader50);
        enhancer22.setClassLoader(classLoader50);
        boolean boolean53 = classInfo8.equals((java.lang.Object) enhancer22);
        org.mockito.asm.Type type54 = classInfo8.getType();
        org.mockito.asm.Type[] typeArray55 = classInfo8.getInterfaces();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray55);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.Class<?> wildcardClass14 = methodArray12.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer15.setCallbackFilter(callbackFilter23);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = signature27.equals((java.lang.Object) type28);
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        boolean boolean33 = signature27.equals((java.lang.Object) classArray30);
        enhancer15.setInterfaces(classArray30);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        org.mockito.cglib.proxy.Callback callback37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass14, classArray30, callback37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setName("(I)J");
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]");
        boolean boolean14 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        boolean boolean12 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass21);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        boolean boolean26 = namingPolicy13.equals((java.lang.Object) wildcardClass21);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        enhancer27.setStrategy(generatorStrategy30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        enhancer27.setInterfaces(classArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Callback callback37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass21, classArray36, callback37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java/beans/PropertyDescriptor" + "'", str25, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(classArray36);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        org.mockito.asm.Type type10 = classInfo8.getType();
        org.mockito.asm.Type type11 = classInfo8.getType();
        int int13 = type11.getOpcode((int) '4');
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 56 + "'", int13 == 56);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.String str14 = propertyDescriptor13.getName();
        boolean boolean15 = propertyDescriptor13.isHidden();
        java.lang.String str16 = propertyDescriptor13.getName();
        propertyDescriptor13.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer20.setUseFactory(false);
        enhancer20.setInterceptDuringConstruction(true);
        propertyDescriptor13.setValue("(FIDCCJ)I", (java.lang.Object) enhancer20);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer20.setCallbackFilter(callbackFilter29);
        enhancer20.setAttemptLoad(false);
        enhancer20.setInterceptDuringConstruction(false);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str36 = type35.getClassName();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer37.setUseFactory(false);
        enhancer37.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer46.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer45.setCallbacks(callbackArray52);
        enhancer45.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter57 = null;
        enhancer56.setCallbackFilter(callbackFilter57);
        java.lang.Class[] classArray59 = new java.lang.Class[] {};
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        enhancer56.setInterfaces(classArray59);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        enhancer63.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer63.getNamingPolicy();
        enhancer62.setNamingPolicy(namingPolicy66);
        java.lang.ClassLoader classLoader68 = enhancer62.getClassLoader();
        enhancer56.setClassLoader(classLoader68);
        enhancer45.setClassLoader(classLoader68);
        enhancer37.setClassLoader(classLoader68);
        boolean boolean72 = type35.equals((java.lang.Object) enhancer37);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        enhancer73.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy76 = null;
        enhancer73.setStrategy(generatorStrategy76);
        boolean boolean78 = enhancer73.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        enhancer79.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy82 = null;
        enhancer79.setStrategy(generatorStrategy82);
        boolean boolean84 = enhancer79.getUseCache();
        org.mockito.cglib.proxy.Callback callback85 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray86 = new org.mockito.cglib.proxy.Callback[] { callback85 };
        enhancer79.setCallbacks(callbackArray86);
        enhancer73.setCallbacks(callbackArray86);
        enhancer37.setCallbacks(callbackArray86);
        enhancer20.setCallbacks(callbackArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass7, callbackArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(callbackArray86);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = signature5.equals((java.lang.Object) type6);
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        propertyDescriptor11.setShortDescription("J");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getPropertyType();
        boolean boolean15 = type6.equals((java.lang.Object) wildcardClass14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str19 = type18.toString();
        boolean boolean21 = type18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str23 = type22.toString();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type24 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray26);
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type18, typeArray26);
        org.mockito.asm.Type type29 = signature28.getReturnType();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str31 = type30.toString();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.toString();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type32 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray34);
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("float", type29, typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray34);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", type2, typeArray34);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.toString();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("I");
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray44);
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("I", type2, typeArray44);
        java.lang.String str48 = signature47.toString();
        org.mockito.asm.Type[] typeArray49 = signature47.getArgumentTypes();
        org.mockito.asm.Type type50 = signature47.getReturnType();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "J" + "'", str19, "J");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "J" + "'", str23, "J");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "I" + "'", str25, "I");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(I)J" + "'", str27, "(I)J");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "J" + "'", str31, "J");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "I" + "'", str33, "I");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(I)J" + "'", str35, "(I)J");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(I)F" + "'", str37, "(I)F");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "I" + "'", str40, "I");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(I)LI;" + "'", str45, "(I)LI;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(I)I" + "'", str46, "(I)I");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "I(I)I" + "'", str48, "I(I)I");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(type50);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer35.getStrategy();
        enhancer0.setStrategy(generatorStrategy48);
        java.lang.ClassLoader classLoader50 = enhancer0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classLoader50);
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/cglib/proxy/Enhancer", "(I)F");
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.String str15 = propertyDescriptor3.getName();
        propertyDescriptor3.setHidden(true);
        java.util.Enumeration<java.lang.String> strEnumeration18 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(strEnumeration18);
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(I)LI;" + "'", str17, "(I)LI;");
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray12 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, true, true);
        java.lang.Class[] classArray13 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray12);
        java.lang.Class<?> wildcardClass14 = methodArray12.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method15 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.reflect.Method; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(methodArray12);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("va.beans.PropertyDescriptor");
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer26.setCallbackFilter(callbackFilter27);
        boolean boolean29 = enhancer26.getAttemptLoad();
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer31.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        boolean boolean46 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setHidden(false);
        boolean boolean49 = generatorStrategy41.equals((java.lang.Object) false);
        enhancer26.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer26.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass60);
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(type63);
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer26.getClassLoader();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        org.mockito.cglib.core.ClassInfo classInfo47 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass46);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass46);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        java.lang.String str58 = propertyDescriptor57.getName();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("hi!", method60, method61);
        propertyDescriptor62.setShortDescription("J");
        java.lang.Class<?> wildcardClass65 = propertyDescriptor62.getPropertyType();
        java.lang.Class<?> wildcardClass66 = propertyDescriptor62.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass66);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass66);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, true, true);
        java.beans.PropertyEditor propertyEditor73 = propertyDescriptor57.createPropertyEditor((java.lang.Object) methodArray72);
        java.lang.Class[] classArray74 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method75 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass46, "", classArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNull(propertyEditor73);
        org.junit.Assert.assertNotNull(classArray74);
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        org.mockito.asm.Type[] typeArray10 = classInfo8.getInterfaces();
        java.lang.Object obj11 = null;
        boolean boolean12 = classInfo8.equals(obj11);
        org.mockito.asm.Type type13 = classInfo8.getType();
        int int15 = type13.getOpcode(104);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 108 + "'", int15 == 108);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]", "java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; values={J=I}]]");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray3 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 111");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        org.mockito.cglib.core.Signature signature54 = methodInfo53.getSignature();
        java.lang.String str55 = methodInfo53.toString();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        enhancer56.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer56.setCallbackFilter(callbackFilter64);
        boolean boolean66 = enhancer56.getUseCache();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter69 = null;
        enhancer56.setCallbackFilter(callbackFilter69);
        boolean boolean71 = methodInfo53.equals((java.lang.Object) enhancer56);
        java.lang.String str72 = methodInfo53.toString();
        int int73 = methodInfo53.getModifiers();
        org.mockito.cglib.core.Signature signature74 = methodInfo53.getSignature();
        org.mockito.asm.Type[] typeArray75 = signature74.getArgumentTypes();
        java.lang.String str76 = signature74.getName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str72, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(signature74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "<init>" + "'", str76, "<init>");
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        boolean boolean29 = enhancer24.getUseCache();
        enhancer24.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        enhancer40.setNamingPolicy(namingPolicy45);
        enhancer32.setNamingPolicy(namingPolicy45);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) 0.0d);
        enhancer24.setNamingPolicy(namingPolicy45);
        enhancer0.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        java.lang.reflect.Method[] methodArray39 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray40 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray39);
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.reflect.Method[] methodArray43 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray44 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray42, methodArray43);
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray38, methodArray44);
        org.mockito.cglib.core.Predicate predicate46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = namingPolicy33.getClassName("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]", "C", (java.lang.Object) methodArray44, predicate46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(methodArray39);
        org.junit.Assert.assertNotNull(methodArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(methodArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        boolean boolean10 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        java.lang.String str17 = propertyDescriptor16.getName();
        boolean boolean18 = propertyDescriptor16.isHidden();
        java.lang.String str19 = propertyDescriptor16.getName();
        propertyDescriptor16.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer23.getNamingPolicy();
        enhancer23.setUseFactory(false);
        enhancer23.setInterceptDuringConstruction(true);
        propertyDescriptor16.setValue("(FIDCCJ)I", (java.lang.Object) enhancer23);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer23.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer39.setCallbacks(callbackArray46);
        enhancer33.setCallbacks(callbackArray46);
        enhancer23.setCallbacks(callbackArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass7, callbackArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(callbackArray46);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer26.getClassLoader();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        org.mockito.cglib.core.ClassInfo classInfo47 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass46);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str57 = type56.toString();
        boolean boolean59 = type56.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str61 = type60.toString();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.toString();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type62 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray64);
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type56, typeArray64);
        org.mockito.asm.Type type67 = signature66.getReturnType();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str69 = type68.toString();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str71 = type70.toString();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type70 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray72);
        org.mockito.cglib.core.Signature signature74 = new org.mockito.cglib.core.Signature("float", type67, typeArray72);
        java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method76 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass46, "Linit>(Ljava/beans/PropertyDescriptor;", classArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Linit>(Ljava/beans/PropertyDescriptor;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "J" + "'", str57, "J");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "J" + "'", str61, "J");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "I" + "'", str63, "I");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(I)J" + "'", str65, "(I)J");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "J" + "'", str69, "J");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "I" + "'", str71, "I");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(I)J" + "'", str73, "(I)J");
        org.junit.Assert.assertNotNull(classArray75);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer12.setCallbackFilter(callbackFilter13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        enhancer12.setInterfaces(classArray15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer18.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader33 = enhancer18.getClassLoader();
        enhancer12.setClassLoader(classLoader33);
        java.lang.ClassLoader classLoader35 = enhancer12.getClassLoader();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.reflect.Method method40 = propertyDescriptor39.getReadMethod();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor39.getPropertyEditorClass();
        propertyDescriptor39.setHidden(false);
        boolean boolean44 = propertyDescriptor39.isHidden();
        java.lang.Class<?> wildcardClass45 = propertyDescriptor39.getPropertyEditorClass();
        propertyDescriptor39.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass48 = propertyDescriptor39.getPropertyType();
        propertyDescriptor39.setExpert(true);
        propertyDescriptor39.setExpert(true);
        boolean boolean53 = propertyDescriptor39.isExpert();
        propertyDescriptor39.setBound(true);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass64);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray67);
        propertyDescriptor39.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray68);
        enhancer12.setInterfaces(classArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor72 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass7, classArray68);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor, java.beans.PropertyDescriptor)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNull(method40);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(classArray70);
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer24.setCallbackFilter(callbackFilter25);
        boolean boolean27 = enhancer24.getAttemptLoad();
        enhancer24.setAttemptLoad(false);
        boolean boolean30 = enhancer24.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer31.setCallbackFilter(callbackFilter32);
        java.lang.Class[] classArray34 = new java.lang.Class[] {};
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        enhancer31.setInterfaces(classArray34);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        enhancer37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer46.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy49);
        enhancer37.setNamingPolicy(namingPolicy49);
        java.lang.ClassLoader classLoader52 = enhancer37.getClassLoader();
        enhancer31.setClassLoader(classLoader52);
        enhancer24.setClassLoader(classLoader52);
        enhancer24.setUseFactory(false);
        enhancer24.setSerialVersionUID((java.lang.Long) 10L);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray59 = generatorStrategy23.generate((org.mockito.cglib.core.ClassGenerator) enhancer24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader52);
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/cglib/core/DefaultNamingPolicy;");
        int int2 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class<?> wildcardClass13 = classArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        boolean boolean15 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        java.lang.Class[] classArray17 = null;
        org.mockito.cglib.proxy.Callback callback18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass13, classArray17, callback18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/Class;" + "'", str16, "[Ljava/lang/Class;");
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.Class<?> wildcardClass27 = signature11.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        enhancer32.setStrategy(generatorStrategy35);
        boolean boolean37 = enhancer32.getUseCache();
        org.mockito.cglib.proxy.Callback callback38 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray39 = new org.mockito.cglib.proxy.Callback[] { callback38 };
        enhancer32.setCallbacks(callbackArray39);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass27, callbackArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.Signature is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str29, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str30, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(callbackArray39);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        boolean boolean24 = enhancer0.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(FIDCCJ)I");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(false);
        boolean boolean17 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; displayName=]");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str2, "Lava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray52 = signature51.getArgumentTypes();
        org.mockito.asm.Type type53 = signature51.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type54 = type53.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(type53);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature55 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str56 = signature55.getName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(signature55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "<init>" + "'", str56, "<init>");
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        boolean boolean17 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("org/mockito/cglib/core/Signature");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        boolean boolean14 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        enhancer15.setStrategy(generatorStrategy18);
        boolean boolean20 = enhancer15.getUseCache();
        enhancer15.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer23.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer33.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy36);
        enhancer31.setNamingPolicy(namingPolicy36);
        enhancer23.setNamingPolicy(namingPolicy36);
        boolean boolean41 = namingPolicy36.equals((java.lang.Object) 0.0d);
        enhancer15.setNamingPolicy(namingPolicy36);
        enhancer15.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer45.setUseFactory(false);
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        enhancer54.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer54.getNamingPolicy();
        enhancer53.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Callback callback59 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray60 = new org.mockito.cglib.proxy.Callback[] { callback59 };
        enhancer53.setCallbacks(callbackArray60);
        enhancer53.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer64.setCallbackFilter(callbackFilter65);
        java.lang.Class[] classArray67 = new java.lang.Class[] {};
        java.lang.String[] strArray68 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        enhancer64.setInterfaces(classArray67);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        enhancer71.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer71.getNamingPolicy();
        enhancer70.setNamingPolicy(namingPolicy74);
        java.lang.ClassLoader classLoader76 = enhancer70.getClassLoader();
        enhancer64.setClassLoader(classLoader76);
        enhancer53.setClassLoader(classLoader76);
        enhancer45.setClassLoader(classLoader76);
        enhancer15.setClassLoader(classLoader76);
        enhancer0.setClassLoader(classLoader76);
        boolean boolean82 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(callbackArray60);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.ClassLoader classLoader13 = null;
        enhancer0.setClassLoader(classLoader13);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer19.getStrategy();
        enhancer19.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer23.setCallbackFilter(callbackFilter24);
        boolean boolean26 = enhancer23.getAttemptLoad();
        enhancer23.setAttemptLoad(false);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        java.lang.reflect.Method method33 = propertyDescriptor32.getReadMethod();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor32.getPropertyEditorClass();
        propertyDescriptor32.setHidden(false);
        java.lang.reflect.Method method37 = propertyDescriptor32.getReadMethod();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str40 = type39.toString();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str42 = type41.toString();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type41 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        enhancer45.setStrategy(generatorStrategy48);
        boolean boolean50 = enhancer45.getUseCache();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer45.setCallbacks(callbackArray52);
        boolean boolean54 = type39.equals((java.lang.Object) enhancer45);
        propertyDescriptor32.setValue("float", (java.lang.Object) enhancer45);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer45.getStrategy();
        enhancer23.setStrategy(generatorStrategy56);
        enhancer19.setStrategy(generatorStrategy56);
        org.mockito.asm.Type[] typeArray60 = org.mockito.asm.Type.getArgumentTypes("(I)Ljava/beans/FeatureDescriptor;");
        boolean boolean61 = generatorStrategy56.equals((java.lang.Object) "(I)Ljava/beans/FeatureDescriptor;");
        enhancer0.setStrategy(generatorStrategy56);
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("hi!", method64, method65);
        java.lang.String str67 = propertyDescriptor66.getName();
        boolean boolean68 = propertyDescriptor66.isHidden();
        java.lang.String str69 = propertyDescriptor66.getName();
        propertyDescriptor66.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        enhancer73.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = enhancer73.getNamingPolicy();
        enhancer73.setUseFactory(false);
        enhancer73.setInterceptDuringConstruction(true);
        propertyDescriptor66.setValue("(FIDCCJ)I", (java.lang.Object) enhancer73);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter82 = null;
        enhancer73.setCallbackFilter(callbackFilter82);
        enhancer73.setAttemptLoad(true);
        enhancer73.setSerialVersionUID((java.lang.Long) 10L);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray88 = generatorStrategy56.generate((org.mockito.cglib.core.ClassGenerator) enhancer73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(method37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "J" + "'", str40, "J");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "I" + "'", str42, "I");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(I)J" + "'", str44, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(callbackArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy76);
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy4);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.asm.ClassVisitor classVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=C]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.reflect.Method method25 = propertyDescriptor24.getReadMethod();
        java.lang.Class<?> wildcardClass26 = propertyDescriptor24.getPropertyEditorClass();
        propertyDescriptor24.setHidden(false);
        boolean boolean29 = propertyDescriptor24.isHidden();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor24.getPropertyEditorClass();
        propertyDescriptor24.setDisplayName("D");
        propertyDescriptor12.setValue("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V", (java.lang.Object) propertyDescriptor24);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy37 = null;
        enhancer34.setStrategy(generatorStrategy37);
        java.lang.Class[] classArray39 = new java.lang.Class[] {};
        java.lang.String[] strArray40 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray39);
        enhancer34.setInterfaces(classArray39);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer34.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor44 = propertyDescriptor12.createPropertyEditor((java.lang.Object) namingPolicy43);
        java.util.Enumeration<java.lang.String> strEnumeration45 = propertyDescriptor12.attributeNames();
        java.lang.String str46 = propertyDescriptor12.getName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNull(propertyEditor44);
        org.junit.Assert.assertNotNull(strEnumeration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("hi!");
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray10, true, false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(methodArray13);
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setInterceptDuringConstruction(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Ljava/beans/FeatureDescriptor;(FIDCCJ)Lva/beans/FeatureDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 66");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Callback callback11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, callback11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("(I)B");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.lang.ClassLoader classLoader23 = enhancer0.getClassLoader();
        boolean boolean24 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        org.mockito.asm.Type type22 = type21.getElementType();
        int int24 = type21.getOpcode((int) (byte) 0);
        java.lang.String str25 = type21.toString();
        java.lang.String str26 = type21.getInternalName();
        java.lang.String str27 = type21.getClassName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str25, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor" + "'", str27, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer9.setCallbackFilter(callbackFilter10);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        enhancer9.setInterfaces(classArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        enhancer0.setInterfaces(classArray12);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        enhancer17.setUseCache(true);
        java.lang.ClassLoader classLoader22 = enhancer17.getClassLoader();
        enhancer0.setClassLoader(classLoader22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class24 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Callback callback20 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray21 = new org.mockito.cglib.proxy.Callback[] { callback20 };
        enhancer14.setCallbacks(callbackArray21);
        enhancer8.setCallbacks(callbackArray21);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer8.getNamingPolicy();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("(I)I", method26, method27);
        boolean boolean29 = namingPolicy24.equals((java.lang.Object) propertyDescriptor28);
        enhancer0.setNamingPolicy(namingPolicy24);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor36.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        enhancer42.setStrategy(generatorStrategy45);
        boolean boolean47 = enhancer42.getUseCache();
        enhancer42.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer52.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy55);
        enhancer50.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        enhancer60.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer60.getNamingPolicy();
        enhancer59.setNamingPolicy(namingPolicy63);
        enhancer58.setNamingPolicy(namingPolicy63);
        enhancer50.setNamingPolicy(namingPolicy63);
        boolean boolean68 = namingPolicy63.equals((java.lang.Object) 0.0d);
        enhancer42.setNamingPolicy(namingPolicy63);
        enhancer42.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        enhancer72.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = enhancer72.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        enhancer79.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = enhancer79.getNamingPolicy();
        enhancer78.setNamingPolicy(namingPolicy82);
        enhancer77.setNamingPolicy(namingPolicy82);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter85 = null;
        enhancer77.setCallbackFilter(callbackFilter85);
        enhancer77.setUseCache(false);
        java.lang.ClassLoader classLoader89 = enhancer77.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = enhancer77.getStrategy();
        enhancer42.setStrategy(generatorStrategy90);
        propertyDescriptor36.setValue("(I)F", (java.lang.Object) enhancer42);
        propertyDescriptor36.setPreferred(true);
        org.mockito.cglib.core.Predicate predicate95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = namingPolicy24.getClassName("float(I)J", "hi!(I)Lava.beans.PropertyDescriptor[name=hi!;", (java.lang.Object) propertyDescriptor36, predicate95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(callbackArray21);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        boolean boolean14 = enhancer0.getAttemptLoad();
        java.lang.Class<?> wildcardClass15 = enhancer0.getClass();
        java.lang.Class[] classArray16 = null;
        java.lang.reflect.Constructor constructor17 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass15, classArray16);
        org.mockito.cglib.core.Signature signature18 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor17);
        org.mockito.asm.Type[] typeArray19 = signature18.getArgumentTypes();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(constructor17);
        org.junit.Assert.assertNotNull(signature18);
        org.junit.Assert.assertNotNull(typeArray19);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer1.setCallbackFilter(callbackFilter9);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = signature15.equals((java.lang.Object) type16);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        boolean boolean21 = signature15.equals((java.lang.Object) classArray18);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer1.setInterfaces(classArray18);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        boolean boolean31 = propertyDescriptor27.isPreferred();
        propertyDescriptor27.setHidden(true);
        java.lang.reflect.Method method34 = null;
        propertyDescriptor27.setWriteMethod(method34);
        propertyDescriptor27.setHidden(false);
        java.lang.String str38 = propertyDescriptor27.getName();
        propertyDescriptor27.setExpert(false);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer43.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Callback callback48 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray49 = new org.mockito.cglib.proxy.Callback[] { callback48 };
        enhancer42.setCallbacks(callbackArray49);
        java.lang.ClassLoader classLoader51 = enhancer42.getClassLoader();
        propertyDescriptor27.setValue("java/beans/FeatureDescriptor(I)I", (java.lang.Object) classLoader51);
        enhancer1.setClassLoader(classLoader51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor54 = org.mockito.cglib.core.ReflectUtils.findConstructor("B", classLoader51);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(callbackArray49);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("ava.beans.PropertyDescriptor[name=hi!");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("(I)I", method18, method19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setConstrained(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getPropertyEditorClass();
        java.lang.String str25 = propertyDescriptor20.getDisplayName();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        boolean boolean30 = propertyDescriptor29.isHidden();
        propertyDescriptor29.setHidden(false);
        propertyDescriptor29.setDisplayName("(I)J");
        java.lang.reflect.Method method35 = null;
        propertyDescriptor29.setWriteMethod(method35);
        propertyDescriptor29.setPreferred(false);
        java.lang.Class<?> wildcardClass39 = propertyDescriptor29.getPropertyType();
        propertyDescriptor29.setExpert(true);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        propertyDescriptor46.setShortDescription("J");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Class<?> wildcardClass50 = propertyDescriptor46.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass50);
        propertyDescriptor29.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass50);
        boolean boolean56 = propertyDescriptor20.equals((java.lang.Object) wildcardClass50);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(I)I" + "'", str25, "(I)I");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean11 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("hi!", "F");
        org.mockito.asm.Type type18 = signature17.getReturnType();
        propertyDescriptor3.setValue("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V", (java.lang.Object) signature17);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        propertyDescriptor23.setShortDescription("J");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        boolean boolean27 = propertyDescriptor23.isPreferred();
        propertyDescriptor23.setHidden(true);
        propertyDescriptor23.setHidden(false);
        java.lang.String str32 = propertyDescriptor23.getDisplayName();
        java.lang.String str33 = propertyDescriptor23.getName();
        java.lang.String str34 = propertyDescriptor23.getName();
        java.beans.PropertyEditor propertyEditor35 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str34);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(propertyEditor35);
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.asm.ClassVisitor classVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass19 = generatorStrategy18.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer20.setCallbackFilter(callbackFilter21);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        enhancer20.setInterfaces(classArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = enhancer26.getClassLoader();
        enhancer20.setClassLoader(classLoader32);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer34.setCallbackFilter(callbackFilter35);
        java.lang.Class[] classArray37 = new java.lang.Class[] {};
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray37);
        enhancer34.setInterfaces(classArray37);
        enhancer20.setInterfaces(classArray37);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        enhancer41.setStrategy(generatorStrategy44);
        boolean boolean46 = enhancer41.getUseCache();
        enhancer41.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer41.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        enhancer51.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer51.getNamingPolicy();
        enhancer50.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer56.setCallbacks(callbackArray63);
        enhancer50.setCallbacks(callbackArray63);
        enhancer41.setCallbacks(callbackArray63);
        enhancer20.setCallbacks(callbackArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass19, callbackArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.DefaultGeneratorStrategy is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(callbackArray63);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.util.List list24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list25 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass20, list24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        enhancer0.setInterfaces(classArray3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        enhancer6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer6.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader21 = enhancer6.getClassLoader();
        enhancer0.setClassLoader(classLoader21);
        boolean boolean23 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class26 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        enhancer16.setStrategy(generatorStrategy19);
        boolean boolean21 = enhancer16.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        enhancer22.setStrategy(generatorStrategy25);
        boolean boolean27 = enhancer22.getUseCache();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer22.setCallbacks(callbackArray29);
        enhancer16.setCallbacks(callbackArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass14, callbackArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(callbackArray29);
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.reflect.Method method28 = propertyDescriptor27.getReadMethod();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor27.getPropertyEditorClass();
        propertyDescriptor27.setValue("J", (java.lang.Object) 0.0d);
        boolean boolean33 = generatorStrategy23.equals((java.lang.Object) 0.0d);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass41);
        boolean boolean47 = generatorStrategy23.equals((java.lang.Object) wildcardClass41);
        boolean boolean48 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass41);
        boolean boolean49 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass41);
        org.mockito.cglib.proxy.Callback callback50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass41, callback50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str46, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        java.lang.Class class0 = null;
        java.lang.Class[] classArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method3 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod(class0, "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor]", classArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer14.setCallbackFilter(callbackFilter15);
        boolean boolean17 = enhancer14.getAttemptLoad();
        boolean boolean18 = enhancer14.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        enhancer19.setStrategy(generatorStrategy22);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        enhancer19.setInterfaces(classArray24);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer19.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = enhancer19.getStrategy();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        boolean boolean34 = propertyDescriptor33.isHidden();
        propertyDescriptor33.setHidden(false);
        boolean boolean37 = generatorStrategy29.equals((java.lang.Object) false);
        enhancer14.setStrategy(generatorStrategy29);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        int int41 = type40.getDimensions();
        int int43 = type40.getOpcode((int) (byte) 100);
        int int44 = type40.getSort();
        boolean boolean45 = generatorStrategy29.equals((java.lang.Object) int44);
        enhancer0.setStrategy(generatorStrategy29);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 104 + "'", int43 == 104);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type[] typeArray10 = classInfo9.getInterfaces();
        java.lang.String str11 = classInfo9.toString();
        org.mockito.asm.Type[] typeArray12 = classInfo9.getInterfaces();
        int int13 = classInfo9.getModifiers();
        org.mockito.asm.Type type14 = classInfo9.getSuperType();
        int int15 = type14.getDimensions();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = signature20.equals((java.lang.Object) type21);
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        propertyDescriptor26.setShortDescription("J");
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        boolean boolean30 = type21.equals((java.lang.Object) wildcardClass29);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str34 = type33.toString();
        boolean boolean36 = type33.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str38 = type37.toString();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.toString();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type39 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray41);
        org.mockito.cglib.core.Signature signature43 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type33, typeArray41);
        org.mockito.asm.Type type44 = signature43.getReturnType();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str46 = type45.toString();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.toString();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type47 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray49);
        org.mockito.cglib.core.Signature signature51 = new org.mockito.cglib.core.Signature("float", type44, typeArray49);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray49);
        org.mockito.cglib.core.Signature signature53 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", type17, typeArray49);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", type14, typeArray49);
        java.lang.String str55 = type14.getDescriptor();
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor" + "'", str11, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "J" + "'", str34, "J");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "J" + "'", str38, "J");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "I" + "'", str40, "I");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(I)J" + "'", str42, "(I)J");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "J" + "'", str46, "J");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "I" + "'", str48, "I");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(I)J" + "'", str50, "(I)J");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(I)F" + "'", str52, "(I)F");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str55, "Ljava/beans/FeatureDescriptor;");
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean6 = propertyDescriptor3.isHidden();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.String str9 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.String str13 = propertyDescriptor12.getName();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) str13);
        propertyDescriptor3.setPreferred(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer18.setCallbackFilter(callbackFilter26);
        enhancer18.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer18.getClassLoader();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        propertyDescriptor34.setShortDescription("J");
        java.lang.Class<?> wildcardClass37 = propertyDescriptor34.getPropertyType();
        java.lang.Class<?> wildcardClass38 = propertyDescriptor34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        enhancer18.setSuperclass((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass38);
        java.lang.String str42 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        propertyDescriptor46.setShortDescription("J");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Class<?> wildcardClass50 = propertyDescriptor46.getClass();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        propertyDescriptor54.setShortDescription("J");
        java.lang.Class<?> wildcardClass57 = propertyDescriptor54.getPropertyType();
        java.lang.Class<?> wildcardClass58 = propertyDescriptor54.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.lang.Class[] classArray62 = new java.lang.Class[] { wildcardClass50, wildcardClass58 };
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        int int64 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        java.lang.reflect.Constructor constructor65 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass38, classArray62);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65);
        org.mockito.cglib.core.Signature signature67 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor65);
        java.lang.String str68 = org.mockito.asm.Type.getConstructorDescriptor(constructor65);
        org.mockito.cglib.core.Signature signature69 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor65);
        org.mockito.cglib.core.MethodInfo methodInfo71 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65, 3);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str74 = type73.toString();
        boolean boolean76 = type73.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str78 = type77.toString();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.toString();
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type79 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray81);
        org.mockito.cglib.core.Signature signature83 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type73, typeArray81);
        java.lang.String str84 = signature83.toString();
        org.mockito.asm.Type[] typeArray85 = signature83.getArgumentTypes();
        org.mockito.asm.Type type86 = signature83.getReturnType();
        java.lang.String str87 = signature83.getName();
        boolean boolean88 = methodInfo71.equals((java.lang.Object) str87);
        org.mockito.cglib.core.ClassInfo classInfo89 = methodInfo71.getClassInfo();
        propertyDescriptor3.setValue("hi!", (java.lang.Object) classInfo89);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass93 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str42, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(constructor65);
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(signature67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str68, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature69);
        org.junit.Assert.assertNotNull(methodInfo71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "J" + "'", str74, "J");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "J" + "'", str78, "J");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "I" + "'", str80, "I");
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(I)J" + "'", str82, "(I)J");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str84, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str87, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(classInfo89);
        org.junit.Assert.assertNull(wildcardClass93);
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer1.setCallbackFilter(callbackFilter2);
        java.lang.Class[] classArray4 = new java.lang.Class[] {};
        java.lang.String[] strArray5 = org.mockito.cglib.core.ReflectUtils.getNames(classArray4);
        enhancer1.setInterfaces(classArray4);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        java.lang.ClassLoader classLoader13 = enhancer7.getClassLoader();
        enhancer1.setClassLoader(classLoader13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor15 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(I)I; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]", classLoader13);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        boolean boolean27 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        enhancer0.setStrategy(generatorStrategy36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class38 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(false);
        boolean boolean6 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer7.setCallbackFilter(callbackFilter8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer7.setInterfaces(classArray10);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer22.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy25);
        enhancer13.setNamingPolicy(namingPolicy25);
        java.lang.ClassLoader classLoader28 = enhancer13.getClassLoader();
        enhancer7.setClassLoader(classLoader28);
        enhancer0.setClassLoader(classLoader28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer33.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer32.setCallbacks(callbackArray45);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer32.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer32.getStrategy();
        boolean boolean50 = generatorStrategy31.equals((java.lang.Object) enhancer32);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        propertyDescriptor54.setShortDescription("J");
        java.lang.Class<?> wildcardClass57 = propertyDescriptor54.getPropertyType();
        boolean boolean58 = propertyDescriptor54.isPreferred();
        propertyDescriptor54.setHidden(true);
        java.lang.reflect.Method method61 = null;
        propertyDescriptor54.setWriteMethod(method61);
        propertyDescriptor54.setHidden(false);
        java.lang.String str65 = propertyDescriptor54.getName();
        propertyDescriptor54.setExpert(false);
        boolean boolean68 = generatorStrategy31.equals((java.lang.Object) propertyDescriptor54);
        java.lang.String str69 = propertyDescriptor54.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=J]" + "'", str69, "java.beans.PropertyDescriptor[name=hi!; shortDescription=J]");
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        int int1 = type0.getSort();
        int int2 = type0.getSort();
        int int3 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        int int41 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        java.util.List list42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass24, classArray36, list42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        java.lang.reflect.Method method8 = null;
        java.lang.reflect.Method method9 = null;
        java.beans.PropertyDescriptor propertyDescriptor10 = new java.beans.PropertyDescriptor("hi!", method8, method9);
        propertyDescriptor10.setShortDescription("J");
        java.lang.Class<?> wildcardClass13 = propertyDescriptor10.getPropertyType();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor10.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.beans.PropertyDescriptor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str16, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("float");
        propertyDescriptor3.setExpert(false);
        boolean boolean17 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class10 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0}; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer17.setCallbackFilter(callbackFilter25);
        enhancer17.setUseCache(false);
        java.lang.ClassLoader classLoader29 = enhancer17.getClassLoader();
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        propertyDescriptor33.setShortDescription("J");
        java.lang.Class<?> wildcardClass36 = propertyDescriptor33.getPropertyType();
        java.lang.Class<?> wildcardClass37 = propertyDescriptor33.getClass();
        org.mockito.cglib.core.ClassInfo classInfo38 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass37);
        enhancer17.setSuperclass((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray40 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass37);
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        propertyDescriptor45.setShortDescription("J");
        java.lang.Class<?> wildcardClass48 = propertyDescriptor45.getPropertyType();
        java.lang.Class<?> wildcardClass49 = propertyDescriptor45.getClass();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        propertyDescriptor53.setShortDescription("J");
        java.lang.Class<?> wildcardClass56 = propertyDescriptor53.getPropertyType();
        java.lang.Class<?> wildcardClass57 = propertyDescriptor53.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass49, wildcardClass57 };
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        int int63 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray61);
        java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass37, classArray61);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor64);
        java.lang.String str67 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        java.lang.String str68 = org.mockito.asm.Type.getConstructorDescriptor(constructor64);
        org.mockito.asm.Type[] typeArray69 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7, classArray14, (java.lang.Object[]) typeArray69);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(classInfo38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str41, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(constructor64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str65, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str67, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str68, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray69);
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("F", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F" + "'", str4, "F");
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.mockito.asm.Type type0 = null;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        propertyDescriptor5.setShortDescription("J");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor5.getPropertyType();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor5.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.reflect.Method method15 = propertyDescriptor14.getReadMethod();
        java.lang.Class<?> wildcardClass16 = propertyDescriptor14.getPropertyEditorClass();
        propertyDescriptor14.setHidden(false);
        boolean boolean19 = propertyDescriptor14.isHidden();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor14.getPropertyEditorClass();
        boolean boolean21 = classInfo10.equals((java.lang.Object) propertyDescriptor14);
        org.mockito.asm.Type type22 = classInfo10.getType();
        org.mockito.asm.Type type23 = classInfo10.getSuperType();
        int int24 = classInfo10.getModifiers();
        org.mockito.asm.Type type25 = classInfo10.getSuperType();
        int int27 = type25.getOpcode(53);
        org.mockito.cglib.core.Signature signature30 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = signature30.equals((java.lang.Object) type31);
        java.lang.String str33 = type31.getClassName();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        org.mockito.cglib.core.ClassInfo classInfo42 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type[] typeArray43 = classInfo42.getInterfaces();
        org.mockito.asm.Type[] typeArray44 = classInfo42.getInterfaces();
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray44);
        org.mockito.cglib.core.Signature signature46 = new org.mockito.cglib.core.Signature("Z", type25, typeArray44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 57 + "'", int27 == 57);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(classInfo42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "()F" + "'", str45, "()F");
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.reflect.Method method14 = propertyDescriptor13.getReadMethod();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor13.getPropertyEditorClass();
        propertyDescriptor13.setHidden(false);
        boolean boolean18 = propertyDescriptor13.isHidden();
        propertyDescriptor13.setHidden(false);
        propertyDescriptor13.setDisplayName("");
        boolean boolean23 = propertyDescriptor13.isHidden();
        java.lang.String str24 = propertyDescriptor13.getDisplayName();
        boolean boolean25 = namingPolicy9.equals((java.lang.Object) propertyDescriptor13);
        boolean boolean26 = propertyDescriptor13.isBound();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        java.lang.reflect.Method method20 = propertyDescriptor19.getReadMethod();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor19.getPropertyEditorClass();
        propertyDescriptor19.setHidden(false);
        java.lang.String str24 = propertyDescriptor19.getName();
        java.lang.reflect.Method method25 = propertyDescriptor19.getReadMethod();
        java.lang.String str26 = propertyDescriptor19.getDisplayName();
        boolean boolean27 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setPreferred(false);
        java.lang.reflect.Method method30 = null;
        propertyDescriptor19.setReadMethod(method30);
        java.lang.Object obj33 = propertyDescriptor19.getValue("(I)I");
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getReturnType("J");
        java.beans.PropertyEditor propertyEditor36 = propertyDescriptor19.createPropertyEditor((java.lang.Object) type35);
        java.beans.PropertyEditor propertyEditor37 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyEditor36);
        boolean boolean38 = propertyDescriptor3.isHidden();
        boolean boolean39 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNull(propertyEditor36);
        org.junit.Assert.assertNull(propertyEditor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method16 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer14.setCallbackFilter(callbackFilter22);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader26 = enhancer14.getClassLoader();
        enhancer0.setClassLoader(classLoader26);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer30.setCallbackFilter(callbackFilter31);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        enhancer30.setInterfaces(classArray33);
        org.mockito.cglib.proxy.Callback callback36 = null;
        enhancer30.setCallback(callback36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        enhancer38.setStrategy(generatorStrategy41);
        boolean boolean43 = enhancer38.getUseCache();
        enhancer38.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer48.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy51);
        enhancer46.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        enhancer54.setNamingPolicy(namingPolicy59);
        enhancer46.setNamingPolicy(namingPolicy59);
        boolean boolean64 = namingPolicy59.equals((java.lang.Object) 0.0d);
        enhancer38.setNamingPolicy(namingPolicy59);
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("float()Ljava/beans/PropertyDescriptor;", method67, method68);
        propertyDescriptor69.setConstrained(true);
        boolean boolean72 = namingPolicy59.equals((java.lang.Object) true);
        enhancer30.setNamingPolicy(namingPolicy59);
        enhancer0.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        enhancer77.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = enhancer77.getNamingPolicy();
        enhancer76.setNamingPolicy(namingPolicy80);
        enhancer75.setNamingPolicy(namingPolicy80);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter83 = null;
        enhancer75.setCallbackFilter(callbackFilter83);
        enhancer75.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature89 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type90 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean91 = signature89.equals((java.lang.Object) type90);
        java.lang.Class[] classArray92 = new java.lang.Class[] {};
        java.lang.String[] strArray93 = org.mockito.cglib.core.ReflectUtils.getNames(classArray92);
        java.lang.String[] strArray94 = org.mockito.cglib.core.ReflectUtils.getNames(classArray92);
        boolean boolean95 = signature89.equals((java.lang.Object) classArray92);
        java.lang.String[] strArray96 = org.mockito.cglib.core.ReflectUtils.getNames(classArray92);
        enhancer75.setInterfaces(classArray92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy98 = enhancer75.getStrategy();
        boolean boolean99 = namingPolicy59.equals((java.lang.Object) enhancer75);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(generatorStrategy98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer5.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy8);
        enhancer3.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer3.setCallbackFilter(callbackFilter11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        enhancer3.setClassLoader(classLoader25);
        enhancer3.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer3.getNamingPolicy();
        java.lang.ClassLoader classLoader30 = enhancer3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class31 = org.mockito.cglib.core.ReflectUtils.defineClass("float()Ljava/beans/PropertyDescriptor;", byteArray2, classLoader30);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader30);
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method12);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer15.setCallbacks(callbackArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer15.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer15.setCallbackFilter(callbackFilter25);
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer15.setCallback(callback27);
        boolean boolean29 = enhancer15.getAttemptLoad();
        enhancer15.setSerialVersionUID((java.lang.Long) 0L);
        enhancer15.setSerialVersionUID((java.lang.Long) 10L);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray34 = generatorStrategy14.generate((org.mockito.cglib.core.ClassGenerator) enhancer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        propertyDescriptor29.setShortDescription("J");
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyType();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor29.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray35 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        java.lang.String str37 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray39);
        enhancer0.setInterfaces(classArray40);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer43.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Callback callback48 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray49 = new org.mockito.cglib.proxy.Callback[] { callback48 };
        enhancer42.setCallbacks(callbackArray49);
        enhancer42.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer53.setCallbackFilter(callbackFilter54);
        java.lang.Class[] classArray56 = new java.lang.Class[] {};
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        enhancer53.setInterfaces(classArray56);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        enhancer60.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer60.getNamingPolicy();
        enhancer59.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = enhancer59.getClassLoader();
        enhancer53.setClassLoader(classLoader65);
        enhancer42.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer42.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer42.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy70 = enhancer42.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        enhancer73.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = enhancer73.getNamingPolicy();
        enhancer72.setNamingPolicy(namingPolicy76);
        enhancer71.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        enhancer80.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer80.getNamingPolicy();
        enhancer79.setNamingPolicy(namingPolicy83);
        enhancer71.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = enhancer71.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer87 = new org.mockito.cglib.proxy.Enhancer();
        enhancer87.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = null;
        enhancer87.setStrategy(generatorStrategy90);
        boolean boolean92 = enhancer87.getUseCache();
        org.mockito.cglib.proxy.Callback callback93 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray94 = new org.mockito.cglib.proxy.Callback[] { callback93 };
        enhancer87.setCallbacks(callbackArray94);
        enhancer71.setCallbacks(callbackArray94);
        enhancer42.setCallbacks(callbackArray94);
        enhancer0.setCallbacks(callbackArray94);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java/beans/PropertyDescriptor" + "'", str36, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java/beans/PropertyDescriptor" + "'", str37, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(callbackArray49);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(generatorStrategy70);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(callbackArray94);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer12.setInterfaces(classArray17);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer12.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer12.getStrategy();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        boolean boolean27 = propertyDescriptor26.isHidden();
        propertyDescriptor26.setHidden(false);
        boolean boolean30 = generatorStrategy22.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer22.setCallbackFilter(callbackFilter23);
        boolean boolean25 = enhancer22.getAttemptLoad();
        enhancer22.setAttemptLoad(false);
        boolean boolean28 = enhancer22.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer29.setCallbackFilter(callbackFilter30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        enhancer29.setInterfaces(classArray32);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer44.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy47);
        enhancer35.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader50 = enhancer35.getClassLoader();
        enhancer29.setClassLoader(classLoader50);
        enhancer22.setClassLoader(classLoader50);
        boolean boolean53 = classInfo8.equals((java.lang.Object) enhancer22);
        org.mockito.asm.Type type54 = classInfo8.getType();
        java.lang.String str55 = type54.getInternalName();
        java.lang.String str56 = type54.toString();
        int int58 = type54.getOpcode(15);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java/beans/PropertyDescriptor" + "'", str55, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str56, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        java.lang.String str22 = classInfo8.toString();
        org.mockito.asm.Type type23 = classInfo8.getSuperType();
        java.lang.String str24 = type23.getInternalName();
        java.lang.String str25 = type23.getClassName();
        java.lang.Class<?> wildcardClass26 = type23.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = null;
        enhancer27.setStrategy(generatorStrategy30);
        boolean boolean32 = enhancer27.getUseCache();
        enhancer27.setUseFactory(true);
        enhancer27.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer27.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer27.getStrategy();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("hi!", method48, method49);
        propertyDescriptor50.setShortDescription("J");
        java.lang.Class<?> wildcardClass53 = propertyDescriptor50.getPropertyType();
        java.lang.Class<?> wildcardClass54 = propertyDescriptor50.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.lang.Class[] classArray58 = new java.lang.Class[] { wildcardClass46, wildcardClass54 };
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        boolean boolean60 = generatorStrategy38.equals((java.lang.Object) classArray58);
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray58);
        org.mockito.cglib.proxy.Callback callback62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass26, classArray58, callback62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor" + "'", str22, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/FeatureDescriptor" + "'", str24, "java/beans/FeatureDescriptor");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.beans.FeatureDescriptor" + "'", str25, "java.beans.FeatureDescriptor");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature54 = methodInfo53.getSignature();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy58 = null;
        enhancer55.setStrategy(generatorStrategy58);
        java.lang.Class[] classArray60 = new java.lang.Class[] {};
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        enhancer55.setInterfaces(classArray60);
        int int64 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray60);
        boolean boolean65 = methodInfo53.equals((java.lang.Object) int64);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type26 = classInfo25.getType();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        propertyDescriptor30.setShortDescription("J");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor30.getPropertyType();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor30.getClass();
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass34);
        boolean boolean37 = classInfo25.equals((java.lang.Object) wildcardClass34);
        java.util.List list38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list39 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass34, list38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str36, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setValue("float", (java.lang.Object) 8);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyEditorClass();
        java.lang.String str24 = propertyDescriptor12.getShortDescription();
        propertyDescriptor12.setHidden(false);
        boolean boolean27 = propertyDescriptor12.isHidden();
        propertyDescriptor12.setBound(false);
        java.lang.String str30 = propertyDescriptor12.toString();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={float=8}]" + "'", str30, "java.beans.PropertyDescriptor[name=hi!; values={float=8}]");
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]" + "'", str2, "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("va.beans.PropertyDescriptor");
        int int2 = type1.getSort();
        int int4 = type1.getOpcode(43);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        enhancer1.setNamingPolicy(namingPolicy14);
        enhancer1.setUseFactory(false);
        enhancer1.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader22 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor23 = org.mockito.cglib.core.ReflectUtils.findConstructor("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/PropertyDescriptor;", classLoader22);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        enhancer9.setStrategy(generatorStrategy12);
        boolean boolean14 = enhancer9.getUseCache();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        enhancer17.setNamingPolicy(namingPolicy30);
        boolean boolean35 = namingPolicy30.equals((java.lang.Object) 0.0d);
        enhancer9.setNamingPolicy(namingPolicy30);
        enhancer9.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer46.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy49);
        enhancer44.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer44.setCallbackFilter(callbackFilter52);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader56 = enhancer44.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer44.getStrategy();
        enhancer9.setStrategy(generatorStrategy57);
        propertyDescriptor3.setValue("(I)F", (java.lang.Object) enhancer9);
        java.lang.ClassLoader classLoader60 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter61 = null;
        enhancer9.setCallbackFilter(callbackFilter61);
        enhancer9.setSerialVersionUID((java.lang.Long) 100L);
        boolean boolean65 = enhancer9.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class66 = enhancer9.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list27 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass20, list26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(FIDCCJ)I");
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = signature13.equals((java.lang.Object) type14);
        java.lang.String str16 = signature13.toString();
        java.lang.String str17 = signature13.toString();
        java.lang.String str18 = signature13.getDescriptor();
        java.lang.String str19 = signature13.getDescriptor();
        java.lang.String str20 = signature13.toString();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) signature13);
        java.lang.String str22 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor[name=(FIDCCJ)I]" + "'", str22, "java.beans.PropertyDescriptor[name=(FIDCCJ)I]");
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(I)S");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(I)S;" + "'", str2, "L(I)S;");
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray14 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, false);
        java.lang.reflect.Method[] methodArray17 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray11, true, false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str10, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(methodArray14);
        org.junit.Assert.assertNotNull(methodArray17);
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer15.setCallbacks(callbackArray22);
        boolean boolean24 = namingPolicy14.equals((java.lang.Object) callbackArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass7, callbackArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        boolean boolean9 = propertyDescriptor3.isExpert();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        propertyDescriptor47.setShortDescription("J");
        java.lang.Class<?> wildcardClass50 = propertyDescriptor47.getPropertyType();
        java.lang.Class<?> wildcardClass51 = propertyDescriptor47.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass43, wildcardClass51 };
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        int int57 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray55);
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray55);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, (int) (short) 100);
        org.mockito.asm.Type[] typeArray62 = methodInfo61.getExceptionTypes();
        propertyDescriptor3.setValue("int", (java.lang.Object) typeArray62);
        java.lang.String str64 = propertyDescriptor3.getName();
        java.lang.String str65 = propertyDescriptor3.getShortDescription();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str67 = type66.toString();
        org.mockito.asm.Type[] typeArray69 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray69);
        java.beans.PropertyEditor propertyEditor71 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray69);
        boolean boolean72 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str35, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "I" + "'", str67, "I");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(I)I" + "'", str70, "(I)I");
        org.junit.Assert.assertNull(propertyEditor71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method17 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass7, "java.beans.PropertyDescriptor[name=C]", classArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=C]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        enhancer1.setNamingPolicy(namingPolicy14);
        enhancer1.setUseFactory(false);
        enhancer1.setInterceptDuringConstruction(true);
        boolean boolean22 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer23.setCallbackFilter(callbackFilter24);
        boolean boolean26 = enhancer23.getAttemptLoad();
        enhancer23.setAttemptLoad(false);
        boolean boolean29 = enhancer23.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer30.setCallbackFilter(callbackFilter31);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        enhancer30.setInterfaces(classArray33);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer38.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy41);
        enhancer36.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy48);
        enhancer36.setNamingPolicy(namingPolicy48);
        java.lang.ClassLoader classLoader51 = enhancer36.getClassLoader();
        enhancer30.setClassLoader(classLoader51);
        enhancer23.setClassLoader(classLoader51);
        enhancer1.setClassLoader(classLoader51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method55 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(FIDCCJ)I]", classLoader51);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(classLoader51);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        boolean boolean9 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getReturnType("J");
        java.lang.String str16 = type15.getClassName();
        org.mockito.asm.Type[] typeArray18 = org.mockito.asm.Type.getArgumentTypes("(I)LI;");
        org.mockito.cglib.core.Signature signature19 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;", type15, typeArray18);
        java.lang.String str20 = signature19.getDescriptor();
        java.lang.String str21 = signature19.getDescriptor();
        boolean boolean22 = propertyDescriptor3.equals((java.lang.Object) signature19);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "long" + "'", str16, "long");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(I)J" + "'", str20, "(I)J");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(I)J" + "'", str21, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer23.setCallbackFilter(callbackFilter24);
        boolean boolean26 = enhancer23.getAttemptLoad();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        propertyDescriptor30.setShortDescription("J");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor30.getPropertyType();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor30.getClass();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        java.beans.PropertyDescriptor[] propertyDescriptorArray37 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass34);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass34);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        enhancer39.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        enhancer44.setStrategy(generatorStrategy47);
        boolean boolean49 = enhancer44.getUseCache();
        enhancer44.setUseFactory(true);
        enhancer44.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer44.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader56 = enhancer39.getClassLoader();
        enhancer23.setClassLoader(classLoader56);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray58 = generatorStrategy21.generate((org.mockito.cglib.core.ClassGenerator) enhancer23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray37);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.lang.Object obj7 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        boolean boolean11 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        java.lang.Class class0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        boolean boolean5 = propertyDescriptor4.isHidden();
        propertyDescriptor4.setHidden(false);
        propertyDescriptor4.setDisplayName("(I)J");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor4.setWriteMethod(method10);
        propertyDescriptor4.setPreferred(false);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor4.getPropertyType();
        propertyDescriptor4.setExpert(true);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        propertyDescriptor21.setShortDescription("J");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor21.getPropertyType();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor21.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass25);
        propertyDescriptor4.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray31);
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = org.mockito.cglib.core.ReflectUtils.newInstance(class0, classArray32, (java.lang.Object[]) propertyDescriptorArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.lang.Object obj7 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setShortDescription("Lorg/mockito/cglib/proxy/Enhancer;");
        java.util.Enumeration<java.lang.String> strEnumeration13 = propertyDescriptor3.attributeNames();
        boolean boolean14 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertNotNull(strEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method14 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str13, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lava.beans.PropertyDescriptor[name=hi!;", "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]");
        java.lang.String str3 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str3, "Lava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.String str10 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str10, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.asm.ClassVisitor classVisitor21 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(namingPolicy16);
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.String str5 = signature2.getDescriptor();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str8 = type7.toString();
        boolean boolean10 = type7.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str12 = type11.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.toString();
        org.mockito.asm.Type[] typeArray15 = new org.mockito.asm.Type[] { type13 };
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray15);
        org.mockito.cglib.core.Signature signature17 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type7, typeArray15);
        java.lang.String str18 = signature17.toString();
        boolean boolean19 = signature2.equals((java.lang.Object) str18);
        java.lang.String str20 = signature2.getDescriptor();
        java.lang.String str21 = signature2.getDescriptor();
        java.lang.String str22 = signature2.getDescriptor();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "J" + "'", str8, "J");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "J" + "'", str12, "J");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(I)J" + "'", str16, "(I)J");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str18, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.String str10 = classInfo9.toString();
        org.mockito.asm.Type type11 = classInfo9.getType();
        java.lang.String str12 = type11.getDescriptor();
        java.lang.String str13 = type11.toString();
        int int14 = type11.getSize();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str13, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        enhancer10.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer10.setCallbackFilter(callbackFilter18);
        enhancer10.setUseCache(false);
        java.lang.ClassLoader classLoader22 = enhancer10.getClassLoader();
        enhancer0.setClassLoader(classLoader22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader22);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        org.mockito.asm.Type type10 = classInfo8.getType();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        propertyDescriptor47.setShortDescription("J");
        java.lang.Class<?> wildcardClass50 = propertyDescriptor47.getPropertyType();
        java.lang.Class<?> wildcardClass51 = propertyDescriptor47.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass43, wildcardClass51 };
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        int int57 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray55);
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray55);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58);
        boolean boolean63 = type10.equals((java.lang.Object) methodInfo62);
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("hi!", method65, method66);
        java.lang.reflect.Method method68 = propertyDescriptor67.getReadMethod();
        java.lang.Class<?> wildcardClass69 = propertyDescriptor67.getPropertyEditorClass();
        propertyDescriptor67.setHidden(false);
        java.lang.reflect.Method method72 = propertyDescriptor67.getReadMethod();
        propertyDescriptor67.setName("(I)J");
        java.util.Enumeration<java.lang.String> strEnumeration75 = propertyDescriptor67.attributeNames();
        java.lang.Class<?> wildcardClass76 = propertyDescriptor67.getPropertyType();
        boolean boolean77 = methodInfo62.equals((java.lang.Object) propertyDescriptor67);
        propertyDescriptor67.setBound(false);
        boolean boolean80 = propertyDescriptor67.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str35, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(method68);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNull(method72);
        org.junit.Assert.assertNotNull(strEnumeration75);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.lang.Object obj7 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        propertyDescriptor13.setShortDescription("J");
        java.lang.Class<?> wildcardClass16 = propertyDescriptor13.getPropertyType();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor13.getClass();
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type[] typeArray19 = classInfo18.getInterfaces();
        org.mockito.asm.Type[] typeArray20 = classInfo18.getInterfaces();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", (java.lang.Object) classInfo18);
        propertyDescriptor3.setShortDescription("I(I)I");
        java.lang.reflect.Method method24 = null;
        propertyDescriptor3.setReadMethod(method24);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer26.getClassLoader();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        org.mockito.cglib.core.ClassInfo classInfo47 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass46);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass46);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        boolean boolean3 = generatorStrategy1.equals((java.lang.Object) "org/mockito/cglib/core/DefaultNamingPolicy");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str5 = type4.toString();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.toString();
        org.mockito.asm.Type[] typeArray8 = new org.mockito.asm.Type[] { type6 };
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        enhancer10.setStrategy(generatorStrategy13);
        boolean boolean15 = enhancer10.getUseCache();
        org.mockito.cglib.proxy.Callback callback16 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray17 = new org.mockito.cglib.proxy.Callback[] { callback16 };
        enhancer10.setCallbacks(callbackArray17);
        boolean boolean19 = type4.equals((java.lang.Object) enhancer10);
        enhancer10.setUseFactory(false);
        boolean boolean22 = enhancer10.getUseCache();
        enhancer10.setSerialVersionUID((java.lang.Long) 1L);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray25 = generatorStrategy1.generate((org.mockito.cglib.core.ClassGenerator) enhancer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "J" + "'", str5, "J");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(I)J" + "'", str9, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(callbackArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        enhancer0.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        enhancer26.setStrategy(generatorStrategy29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        enhancer26.setInterfaces(classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer26.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        boolean boolean41 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setHidden(false);
        boolean boolean44 = generatorStrategy36.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy36);
        java.lang.Class<?> wildcardClass46 = generatorStrategy36.getClass();
        java.util.List list47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list48 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass46, list47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type type50 = signature49.getReturnType();
        int int52 = type50.getOpcode(57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type53 = type50.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 62 + "'", int52 == 62);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer1.setUseFactory(false);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Callback callback15 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray16 = new org.mockito.cglib.proxy.Callback[] { callback15 };
        enhancer9.setCallbacks(callbackArray16);
        enhancer9.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer20.setCallbackFilter(callbackFilter21);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        enhancer20.setInterfaces(classArray23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        java.lang.ClassLoader classLoader32 = enhancer26.getClassLoader();
        enhancer20.setClassLoader(classLoader32);
        enhancer9.setClassLoader(classLoader32);
        enhancer1.setClassLoader(classLoader32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method36 = org.mockito.cglib.core.ReflectUtils.findMethod("(I)J", classLoader32);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(callbackArray16);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader32);
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Linit>(Ljava/beans/PropertyDescriptor;", "V");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'Linit>(Ljava/beans/PropertyDescriptor;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("ava.beans.PropertyDescriptor[name=hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=ava.beans.PropertyDescriptor[name=hi!]" + "'", str4, "java.beans.PropertyDescriptor[name=ava.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.Class<?> wildcardClass8 = namingPolicy5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.reflect.Method[] methodArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray18 = null;
        enhancer0.setInterfaces(classArray18);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor23.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        enhancer29.setStrategy(generatorStrategy32);
        boolean boolean34 = enhancer29.getUseCache();
        enhancer29.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        enhancer37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer47.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy50);
        enhancer45.setNamingPolicy(namingPolicy50);
        enhancer37.setNamingPolicy(namingPolicy50);
        boolean boolean55 = namingPolicy50.equals((java.lang.Object) 0.0d);
        enhancer29.setNamingPolicy(namingPolicy50);
        enhancer29.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        enhancer66.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer66.getNamingPolicy();
        enhancer65.setNamingPolicy(namingPolicy69);
        enhancer64.setNamingPolicy(namingPolicy69);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter72 = null;
        enhancer64.setCallbackFilter(callbackFilter72);
        enhancer64.setUseCache(false);
        java.lang.ClassLoader classLoader76 = enhancer64.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy77 = enhancer64.getStrategy();
        enhancer29.setStrategy(generatorStrategy77);
        propertyDescriptor23.setValue("(I)F", (java.lang.Object) enhancer29);
        java.lang.ClassLoader classLoader80 = enhancer29.getClassLoader();
        enhancer0.setClassLoader(classLoader80);
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("hi!", method83, method84);
        propertyDescriptor85.setShortDescription("J");
        java.lang.Class<?> wildcardClass88 = propertyDescriptor85.getPropertyType();
        java.lang.Class<?> wildcardClass89 = propertyDescriptor85.getClass();
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass89);
        java.beans.PropertyDescriptor[] propertyDescriptorArray91 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass89);
        java.lang.String str92 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass89);
        java.beans.PropertyDescriptor[] propertyDescriptorArray93 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass89);
        java.lang.String str94 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass89);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass89);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass89);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(classLoader76);
        org.junit.Assert.assertNotNull(generatorStrategy77);
        org.junit.Assert.assertNotNull(classLoader80);
        org.junit.Assert.assertNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(propertyDescriptorArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "java/beans/PropertyDescriptor" + "'", str92, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str94, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type95);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass7, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/beans/PropertyDescriptor" + "'", str9, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        boolean boolean8 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer9.setCallbackFilter(callbackFilter10);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        enhancer9.setInterfaces(classArray12);
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        enhancer0.setInterfaces(classArray12);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer17.setCallbackFilter(callbackFilter25);
        boolean boolean27 = enhancer17.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        enhancer28.setStrategy(generatorStrategy31);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        enhancer28.setInterfaces(classArray33);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer28.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = enhancer28.getStrategy();
        enhancer17.setStrategy(generatorStrategy38);
        enhancer0.setStrategy(generatorStrategy38);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer41.setCallbackFilter(callbackFilter42);
        boolean boolean44 = enhancer41.getAttemptLoad();
        enhancer41.setAttemptLoad(false);
        boolean boolean47 = enhancer41.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        enhancer48.setCallbackFilter(callbackFilter49);
        java.lang.Class[] classArray51 = new java.lang.Class[] {};
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        enhancer48.setInterfaces(classArray51);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        enhancer54.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        enhancer63.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer63.getNamingPolicy();
        enhancer62.setNamingPolicy(namingPolicy66);
        enhancer54.setNamingPolicy(namingPolicy66);
        java.lang.ClassLoader classLoader69 = enhancer54.getClassLoader();
        enhancer48.setClassLoader(classLoader69);
        enhancer41.setClassLoader(classLoader69);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = generatorStrategy38.generate((org.mockito.cglib.core.ClassGenerator) enhancer41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(generatorStrategy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        byte[] byteArray1 = null;
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer4.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy7);
        enhancer2.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer2.setCallbackFilter(callbackFilter10);
        enhancer2.setUseCache(false);
        java.lang.ClassLoader classLoader14 = enhancer2.getClassLoader();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        propertyDescriptor18.setShortDescription("J");
        java.lang.Class<?> wildcardClass21 = propertyDescriptor18.getPropertyType();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        enhancer2.setSuperclass((java.lang.Class) wildcardClass22);
        java.lang.ClassLoader classLoader25 = enhancer2.getClassLoader();
        boolean boolean26 = enhancer2.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer27.setCallbackFilter(callbackFilter28);
        boolean boolean30 = enhancer27.getAttemptLoad();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        propertyDescriptor34.setShortDescription("J");
        java.lang.Class<?> wildcardClass37 = propertyDescriptor34.getPropertyType();
        java.lang.Class<?> wildcardClass38 = propertyDescriptor34.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.cglib.core.ClassInfo classInfo40 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass38);
        enhancer27.setSuperclass((java.lang.Class) wildcardClass38);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        enhancer43.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = null;
        enhancer48.setStrategy(generatorStrategy51);
        boolean boolean53 = enhancer48.getUseCache();
        enhancer48.setUseFactory(true);
        enhancer48.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer48.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader60 = enhancer43.getClassLoader();
        enhancer27.setClassLoader(classLoader60);
        enhancer2.setClassLoader(classLoader60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class63 = org.mockito.cglib.core.ReflectUtils.defineClass("<init>()V", byteArray1, classLoader60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(classInfo40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        boolean boolean14 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        propertyDescriptor19.setShortDescription("J");
        java.lang.Class<?> wildcardClass22 = propertyDescriptor19.getPropertyType();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor19.getClass();
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        java.lang.reflect.Method method29 = propertyDescriptor28.getReadMethod();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor28.getPropertyEditorClass();
        propertyDescriptor28.setHidden(false);
        boolean boolean33 = propertyDescriptor28.isHidden();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor28.getPropertyEditorClass();
        boolean boolean35 = classInfo24.equals((java.lang.Object) propertyDescriptor28);
        org.mockito.asm.Type type36 = classInfo24.getType();
        org.mockito.asm.Type type37 = classInfo24.getSuperType();
        int int38 = classInfo24.getModifiers();
        org.mockito.asm.Type type39 = classInfo24.getSuperType();
        int int41 = type39.getOpcode(53);
        int int42 = type39.getDimensions();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        propertyDescriptor46.setShortDescription("J");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Class<?> wildcardClass50 = propertyDescriptor46.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type[] typeArray52 = classInfo51.getInterfaces();
        java.lang.String str53 = classInfo51.toString();
        org.mockito.asm.Type[] typeArray54 = classInfo51.getInterfaces();
        org.mockito.cglib.core.Signature signature55 = new org.mockito.cglib.core.Signature("", type39, typeArray54);
        java.beans.PropertyEditor propertyEditor56 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type39);
        int int58 = type39.getOpcode((-1));
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 57 + "'", int41 == 57);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.beans.PropertyDescriptor" + "'", str53, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNull(propertyEditor56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = type8.getClassName();
        java.lang.String str10 = type8.getDescriptor();
        java.lang.String str11 = type8.getDescriptor();
        int int12 = type8.getDimensions();
        int int13 = type8.getSort();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.beans.PropertyDescriptor" + "'", str9, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str10, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str11, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy3);
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer14.setCallbackFilter(callbackFilter22);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader26 = enhancer14.getClassLoader();
        enhancer0.setClassLoader(classLoader26);
        boolean boolean28 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer0.setCallback(callback29);
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean33 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        enhancer36.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer36.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy39);
        enhancer34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer34.setCallbackFilter(callbackFilter42);
        enhancer34.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer34.getClassLoader();
        java.lang.reflect.Method method48 = null;
        java.lang.reflect.Method method49 = null;
        java.beans.PropertyDescriptor propertyDescriptor50 = new java.beans.PropertyDescriptor("hi!", method48, method49);
        propertyDescriptor50.setShortDescription("J");
        java.lang.Class<?> wildcardClass53 = propertyDescriptor50.getPropertyType();
        java.lang.Class<?> wildcardClass54 = propertyDescriptor50.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass54);
        enhancer34.setSuperclass((java.lang.Class) wildcardClass54);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer58.setNamingPolicy(namingPolicy62);
        java.lang.ClassLoader classLoader64 = enhancer58.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer58.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy65);
        boolean boolean67 = enhancer34.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        enhancer70.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = enhancer70.getNamingPolicy();
        enhancer69.setNamingPolicy(namingPolicy73);
        enhancer68.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer77 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        enhancer78.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy81 = enhancer78.getNamingPolicy();
        enhancer77.setNamingPolicy(namingPolicy81);
        enhancer76.setNamingPolicy(namingPolicy81);
        enhancer68.setNamingPolicy(namingPolicy81);
        org.mockito.cglib.proxy.Enhancer enhancer85 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        enhancer86.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = enhancer86.getNamingPolicy();
        enhancer85.setNamingPolicy(namingPolicy89);
        org.mockito.cglib.proxy.Callback callback91 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray92 = new org.mockito.cglib.proxy.Callback[] { callback91 };
        enhancer85.setCallbacks(callbackArray92);
        enhancer68.setCallbacks(callbackArray92);
        enhancer34.setCallbacks(callbackArray92);
        enhancer0.setCallbacks(callbackArray92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy97 = enhancer0.getStrategy();
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader64);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(namingPolicy81);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(callbackArray92);
        org.junit.Assert.assertNotNull(generatorStrategy97);
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer4.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy7);
        enhancer2.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer2.setCallbackFilter(callbackFilter10);
        enhancer2.setUseCache(false);
        java.lang.ClassLoader classLoader14 = enhancer2.getClassLoader();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        propertyDescriptor18.setShortDescription("J");
        java.lang.Class<?> wildcardClass21 = propertyDescriptor18.getPropertyType();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        enhancer2.setSuperclass((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass22);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        propertyDescriptor30.setShortDescription("J");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor30.getPropertyType();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor30.getClass();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass34, wildcardClass42 };
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        int int48 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        java.lang.reflect.Constructor constructor49 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass22, classArray46);
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        propertyDescriptor54.setShortDescription("J");
        java.lang.Class<?> wildcardClass57 = propertyDescriptor54.getPropertyType();
        java.lang.Class<?> wildcardClass58 = propertyDescriptor54.getClass();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("hi!", method60, method61);
        propertyDescriptor62.setShortDescription("J");
        java.lang.Class<?> wildcardClass65 = propertyDescriptor62.getPropertyType();
        java.lang.Class<?> wildcardClass66 = propertyDescriptor62.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.lang.Class[] classArray70 = new java.lang.Class[] { wildcardClass58, wildcardClass66 };
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        java.lang.reflect.Method method73 = null;
        java.lang.reflect.Method method74 = null;
        java.beans.PropertyDescriptor propertyDescriptor75 = new java.beans.PropertyDescriptor("hi!", method73, method74);
        propertyDescriptor75.setShortDescription("J");
        java.lang.Class<?> wildcardClass78 = propertyDescriptor75.getPropertyType();
        java.lang.Class<?> wildcardClass79 = propertyDescriptor75.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass79);
        java.lang.reflect.Method[] methodArray84 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray81, false, true);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray81, false, false);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray71, methodArray87);
        java.lang.reflect.Method[] methodArray89 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray50, methodArray87);
        java.lang.reflect.Method[] methodArray90 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray87);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str26, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(constructor49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(methodArray84);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNotNull(methodArray89);
        org.junit.Assert.assertNotNull(methodArray90);
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        java.lang.String str3 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        int int2 = type0.getOpcode((int) (byte) -1);
        java.lang.String str3 = type0.getDescriptor();
        java.lang.String str4 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "V" + "'", str3, "V");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "void" + "'", str4, "void");
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer17.setCallbacks(callbackArray24);
        enhancer11.setCallbacks(callbackArray24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer11.getNamingPolicy();
        boolean boolean28 = classInfo8.equals((java.lang.Object) enhancer11);
        boolean boolean29 = enhancer11.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = enhancer11.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.String str27 = signature11.getName();
        org.mockito.asm.Type[] typeArray28 = signature11.getArgumentTypes();
        java.lang.String str29 = signature11.getDescriptor();
        org.mockito.asm.Type type30 = signature11.getReturnType();
        java.lang.String str31 = type30.getDescriptor();
        java.lang.String str32 = type30.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str27, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(I)J" + "'", str29, "(I)J");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "J" + "'", str31, "J");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("float(I)J");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("()B", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class<?> wildcardClass13 = classArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        boolean boolean15 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list17 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass13, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.reflect.Method method18 = propertyDescriptor17.getReadMethod();
        java.lang.Object obj20 = propertyDescriptor17.getValue("I");
        propertyDescriptor17.setHidden(true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.toString();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type25 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray27);
        int int29 = type23.getSort();
        int int31 = type23.getOpcode((int) (short) 0);
        java.beans.PropertyEditor propertyEditor32 = propertyDescriptor17.createPropertyEditor((java.lang.Object) (short) 0);
        java.beans.PropertyEditor propertyEditor33 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor17);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer35.getClassLoader();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        org.mockito.cglib.core.ClassInfo classInfo56 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass55);
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        propertyDescriptor71.setShortDescription("J");
        java.lang.Class<?> wildcardClass74 = propertyDescriptor71.getPropertyType();
        java.lang.Class<?> wildcardClass75 = propertyDescriptor71.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass67, wildcardClass75 };
        java.lang.String[] strArray80 = org.mockito.cglib.core.ReflectUtils.getNames(classArray79);
        int int81 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray79);
        java.lang.reflect.Constructor constructor82 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass55, classArray79);
        org.mockito.cglib.core.Signature signature83 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor82);
        org.mockito.cglib.core.MethodInfo methodInfo85 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor82, 7);
        org.mockito.cglib.core.ClassInfo classInfo86 = methodInfo85.getClassInfo();
        org.mockito.asm.Type type87 = classInfo86.getSuperType();
        propertyDescriptor17.setValue("(I)S", (java.lang.Object) classInfo86);
        org.mockito.asm.Type type89 = classInfo86.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "J" + "'", str24, "J");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "I" + "'", str26, "I");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(I)J" + "'", str28, "(I)J");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(propertyEditor32);
        org.junit.Assert.assertNull(propertyEditor33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str59, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(constructor82);
        org.junit.Assert.assertNotNull(signature83);
        org.junit.Assert.assertNotNull(methodInfo85);
        org.junit.Assert.assertNotNull(classInfo86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(type89);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("org/mockito/cglib/proxy/Enhancer");
        propertyDescriptor3.setShortDescription("float()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer1.setCallbackFilter(callbackFilter9);
        enhancer1.setUseCache(false);
        java.lang.ClassLoader classLoader13 = enhancer1.getClassLoader();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader31 = enhancer25.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer25.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy32);
        boolean boolean34 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy48);
        enhancer43.setNamingPolicy(namingPolicy48);
        enhancer35.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        enhancer53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer53.getNamingPolicy();
        enhancer52.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer52.setCallbacks(callbackArray59);
        enhancer35.setCallbacks(callbackArray59);
        enhancer1.setCallbacks(callbackArray59);
        java.lang.ClassLoader classLoader63 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor64 = org.mockito.cglib.core.ReflectUtils.findConstructor("org.mockito.cglib.proxy.Enhancer", classLoader63);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/beans/PropertyDescriptor" + "'", str23, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(callbackArray59);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) 1 };
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = enhancer6.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer6.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer14.setUseFactory(false);
        enhancer14.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer23.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer22.setCallbacks(callbackArray29);
        enhancer22.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer33.setCallbackFilter(callbackFilter34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer33.setInterfaces(classArray36);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        java.lang.ClassLoader classLoader45 = enhancer39.getClassLoader();
        enhancer33.setClassLoader(classLoader45);
        enhancer22.setClassLoader(classLoader45);
        enhancer14.setClassLoader(classLoader45);
        enhancer6.setClassLoader(classLoader45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class50 = org.mockito.cglib.core.ReflectUtils.defineClass("LV;", byteArray5, classLoader45);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 1, -1, 1]");
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader45);
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method7 = propertyDescriptor3.getReadMethod();
        boolean boolean8 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        org.mockito.cglib.core.Signature signature54 = methodInfo53.getSignature();
        java.lang.String str55 = methodInfo53.toString();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        enhancer56.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer56.setCallbackFilter(callbackFilter64);
        boolean boolean66 = enhancer56.getUseCache();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter69 = null;
        enhancer56.setCallbackFilter(callbackFilter69);
        boolean boolean71 = methodInfo53.equals((java.lang.Object) enhancer56);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        enhancer72.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy75 = null;
        enhancer72.setStrategy(generatorStrategy75);
        java.lang.Class[] classArray77 = new java.lang.Class[] {};
        java.lang.String[] strArray78 = org.mockito.cglib.core.ReflectUtils.getNames(classArray77);
        java.lang.String[] strArray79 = org.mockito.cglib.core.ReflectUtils.getNames(classArray77);
        enhancer72.setInterfaces(classArray77);
        enhancer72.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter84 = null;
        enhancer83.setCallbackFilter(callbackFilter84);
        java.lang.Class[] classArray86 = new java.lang.Class[] {};
        java.lang.String[] strArray87 = org.mockito.cglib.core.ReflectUtils.getNames(classArray86);
        enhancer83.setInterfaces(classArray86);
        org.mockito.cglib.proxy.Enhancer enhancer89 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer90 = new org.mockito.cglib.proxy.Enhancer();
        enhancer90.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy93 = enhancer90.getNamingPolicy();
        enhancer89.setNamingPolicy(namingPolicy93);
        java.lang.ClassLoader classLoader95 = enhancer89.getClassLoader();
        enhancer83.setClassLoader(classLoader95);
        enhancer72.setClassLoader(classLoader95);
        enhancer56.setClassLoader(classLoader95);
        org.mockito.cglib.core.NamingPolicy namingPolicy99 = enhancer56.getNamingPolicy();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(classArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(classArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(namingPolicy93);
        org.junit.Assert.assertNotNull(classLoader95);
        org.junit.Assert.assertNotNull(namingPolicy99);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("float()Ljava/beans/PropertyDescriptor;", method29, method30);
        propertyDescriptor31.setConstrained(true);
        boolean boolean34 = namingPolicy21.equals((java.lang.Object) true);
        boolean boolean36 = namingPolicy21.equals((java.lang.Object) "Lorg/mockito/cglib/core/ReflectUtils$3;");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer9.setCallbackFilter(callbackFilter17);
        boolean boolean19 = enhancer9.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        enhancer20.setStrategy(generatorStrategy23);
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        enhancer20.setInterfaces(classArray25);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer20.getStrategy();
        enhancer9.setStrategy(generatorStrategy30);
        enhancer9.setSerialVersionUID((java.lang.Long) 1L);
        enhancer9.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        enhancer36.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy39 = null;
        enhancer36.setStrategy(generatorStrategy39);
        java.lang.Class[] classArray41 = new java.lang.Class[] {};
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray41);
        enhancer36.setInterfaces(classArray41);
        java.lang.Class[] classArray45 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray41);
        enhancer9.setInterfaces(classArray45);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str49 = type48.toString();
        boolean boolean51 = type48.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str53 = type52.toString();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type54 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray56);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type48, typeArray56);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy62 = null;
        enhancer59.setStrategy(generatorStrategy62);
        boolean boolean64 = enhancer59.getUseCache();
        org.mockito.cglib.proxy.Callback callback65 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray66 = new org.mockito.cglib.proxy.Callback[] { callback65 };
        enhancer59.setCallbacks(callbackArray66);
        enhancer59.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer59.setCallback(callback70);
        boolean boolean72 = signature58.equals((java.lang.Object) enhancer59);
        java.lang.String str73 = signature58.getName();
        java.lang.Class<?> wildcardClass74 = signature58.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = enhancer0.create(classArray45, (java.lang.Object[]) propertyDescriptorArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(generatorStrategy8);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "J" + "'", str49, "J");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "J" + "'", str53, "J");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "I" + "'", str55, "I");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(I)J" + "'", str57, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(callbackArray66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str73, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer17.setCallbacks(callbackArray24);
        enhancer11.setCallbacks(callbackArray24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer11.getNamingPolicy();
        boolean boolean28 = classInfo8.equals((java.lang.Object) enhancer11);
        int int29 = classInfo8.getModifiers();
        org.mockito.asm.Type type30 = classInfo8.getType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean10 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str14 = signature13.toString();
        org.mockito.asm.Type[] typeArray15 = signature13.getArgumentTypes();
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass17);
        java.util.List list21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list22 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass17, list21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str14, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str20, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str56 = type55.toString();
        boolean boolean58 = type55.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str60 = type59.toString();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str62 = type61.toString();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type61 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray63);
        org.mockito.cglib.core.Signature signature65 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type55, typeArray63);
        java.lang.String str66 = signature65.toString();
        org.mockito.asm.Type[] typeArray67 = signature65.getArgumentTypes();
        org.mockito.asm.Type type68 = signature65.getReturnType();
        java.lang.String str69 = signature65.getName();
        boolean boolean70 = methodInfo53.equals((java.lang.Object) str69);
        org.mockito.cglib.core.ClassInfo classInfo71 = methodInfo53.getClassInfo();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str74 = type73.toString();
        boolean boolean76 = type73.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str78 = type77.toString();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str80 = type79.toString();
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type79 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray81);
        org.mockito.cglib.core.Signature signature83 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type73, typeArray81);
        org.mockito.asm.Type type84 = signature83.getReturnType();
        org.mockito.asm.Type type85 = signature83.getReturnType();
        boolean boolean86 = methodInfo53.equals((java.lang.Object) signature83);
        java.lang.Object obj87 = null;
        boolean boolean88 = signature83.equals(obj87);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "J" + "'", str56, "J");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "J" + "'", str60, "J");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "I" + "'", str62, "I");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(I)J" + "'", str64, "(I)J");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str66, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str69, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(classInfo71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "J" + "'", str74, "J");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "J" + "'", str78, "J");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "I" + "'", str80, "I");
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(I)J" + "'", str82, "(I)J");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = signature11.equals((java.lang.Object) type12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        boolean boolean17 = signature11.equals((java.lang.Object) classArray14);
        java.lang.Class[] classArray18 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray14);
        int int19 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray18);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer22.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy25);
        enhancer20.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer20.setCallbackFilter(callbackFilter28);
        enhancer20.setUseCache(false);
        java.lang.ClassLoader classLoader32 = enhancer20.getClassLoader();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass40);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass40);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass52, wildcardClass60 };
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray64);
        java.lang.reflect.Constructor constructor67 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass40, classArray64);
        org.mockito.cglib.core.MethodInfo methodInfo68 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor67);
        org.mockito.cglib.core.Signature signature69 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor67);
        java.lang.String str70 = org.mockito.asm.Type.getConstructorDescriptor(constructor67);
        org.mockito.cglib.core.MethodInfo methodInfo71 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor67);
        org.mockito.cglib.core.MethodInfo methodInfo72 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor67);
        int int73 = methodInfo72.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo74 = methodInfo72.getClassInfo();
        int int75 = methodInfo72.getModifiers();
        org.mockito.asm.Type[] typeArray76 = methodInfo72.getExceptionTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = enhancer0.create(classArray18, (java.lang.Object[]) typeArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str44, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(constructor67);
        org.junit.Assert.assertNotNull(methodInfo68);
        org.junit.Assert.assertNotNull(signature69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str70, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo71);
        org.junit.Assert.assertNotNull(methodInfo72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(classInfo74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(typeArray76);
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        propertyDescriptor29.setShortDescription("J");
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyType();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor29.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        enhancer13.setSuperclass((java.lang.Class) wildcardClass33);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        enhancer37.setStrategy(generatorStrategy40);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        enhancer37.setInterfaces(classArray42);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        enhancer13.setInterfaces(classArray42);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        int int49 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        java.lang.Class[] classArray50 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray48);
        enhancer13.setInterfaces(classArray48);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        java.util.List list53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass7, classArray48, list53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 10);
        java.lang.String str54 = methodInfo53.toString();
        org.mockito.cglib.core.ClassInfo classInfo55 = methodInfo53.getClassInfo();
        org.mockito.asm.Type type56 = classInfo55.getSuperType();
        java.lang.String str57 = type56.getInternalName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java/beans/FeatureDescriptor" + "'", str57, "java/beans/FeatureDescriptor");
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("va.beans.PropertyDescriptor");
        java.lang.String str2 = type1.getInternalName();
        java.lang.String str3 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "va.beans.PropertyDescriptor" + "'", str2, "va.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lva.beans.PropertyDescriptor;" + "'", str3, "Lva.beans.PropertyDescriptor;");
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.Class[] classArray14 = null;
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getName();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        propertyDescriptor23.setShortDescription("J");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor23.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray30, true, true);
        java.beans.PropertyEditor propertyEditor34 = propertyDescriptor18.createPropertyEditor((java.lang.Object) methodArray33);
        java.lang.Class[] classArray35 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass11, classArray14, (java.lang.Object[]) classArray35);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNull(propertyEditor34);
        org.junit.Assert.assertNotNull(classArray35);
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = type12.getElementType();
        java.lang.String str14 = type12.getInternalName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java/beans/PropertyDescriptor" + "'", str14, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(I)F");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        propertyDescriptor57.setShortDescription("J");
        java.lang.Class<?> wildcardClass60 = propertyDescriptor57.getPropertyType();
        java.lang.Class<?> wildcardClass61 = propertyDescriptor57.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass61);
        java.lang.String str64 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor47, (java.lang.Object[]) propertyDescriptorArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java/beans/PropertyDescriptor" + "'", str64, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java/beans/PropertyDescriptor" + "'", str65, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        enhancer0.setInterfaces(classArray3);
        org.mockito.cglib.proxy.Callback callback6 = null;
        enhancer0.setCallback(callback6);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = null;
        enhancer8.setStrategy(generatorStrategy11);
        boolean boolean13 = enhancer8.getUseCache();
        enhancer8.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        enhancer16.setNamingPolicy(namingPolicy29);
        boolean boolean34 = namingPolicy29.equals((java.lang.Object) 0.0d);
        enhancer8.setNamingPolicy(namingPolicy29);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("float()Ljava/beans/PropertyDescriptor;", method37, method38);
        propertyDescriptor39.setConstrained(true);
        boolean boolean42 = namingPolicy29.equals((java.lang.Object) true);
        enhancer0.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("Ljava/beans/FeatureDescriptor;", "(FIDCCJ)Lva/beans/FeatureDescriptor;");
        org.mockito.cglib.core.Predicate predicate49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = namingPolicy29.getClassName("(I)Ljava/beans/PropertyDescriptor;", "java.beans.PropertyDescriptor[name=hi!; displayName=(I)J]", (java.lang.Object) signature48, predicate49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer12.getNamingPolicy();
        boolean boolean27 = enhancer12.getUseCache();
        boolean boolean28 = enhancer12.getAttemptLoad();
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer12.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str9 = propertyDescriptor3.getShortDescription();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        boolean boolean16 = enhancer11.getUseCache();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        enhancer27.setNamingPolicy(namingPolicy32);
        enhancer19.setNamingPolicy(namingPolicy32);
        boolean boolean37 = namingPolicy32.equals((java.lang.Object) 0.0d);
        enhancer11.setNamingPolicy(namingPolicy32);
        enhancer11.setUseCache(false);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        propertyDescriptor44.setShortDescription("J");
        java.lang.Class<?> wildcardClass47 = propertyDescriptor44.getPropertyType();
        java.lang.Class<?> wildcardClass48 = propertyDescriptor44.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass48);
        java.lang.String str51 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass48);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass48);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer53.setCallbackFilter(callbackFilter54);
        boolean boolean56 = enhancer53.getAttemptLoad();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass64);
        enhancer53.setSuperclass((java.lang.Class) wildcardClass64);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer53.getNamingPolicy();
        enhancer53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer53.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy72);
        propertyDescriptor3.setValue("", (java.lang.Object) namingPolicy72);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java/beans/PropertyDescriptor" + "'", str51, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy72);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        int int25 = type24.getSort();
        java.lang.String str26 = type24.getInternalName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type[] typeArray23 = classInfo22.getInterfaces();
        java.lang.String str24 = classInfo22.toString();
        org.mockito.asm.Type[] typeArray25 = classInfo22.getInterfaces();
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("", type13, typeArray25);
        java.lang.String str27 = signature26.getDescriptor();
        java.lang.Class<?> wildcardClass28 = signature26.getClass();
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        java.beans.PropertyEditor propertyEditor30 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classInfo29);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor" + "'", str24, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "()V" + "'", str27, "()V");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNull(propertyEditor30);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj12 = propertyDescriptor3.getValue("va.beans.PropertyDescriptor");
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; bound]" + "'", str13, "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; bound]");
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0}; propertyEditorClass=class java.beans.PropertyDescriptor]");
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        enhancer6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer6.setCallbackFilter(callbackFilter14);
        boolean boolean16 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = null;
        enhancer17.setStrategy(generatorStrategy20);
        java.lang.Class[] classArray22 = new java.lang.Class[] {};
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray22);
        enhancer17.setInterfaces(classArray22);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer17.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer17.getStrategy();
        enhancer6.setStrategy(generatorStrategy27);
        enhancer0.setStrategy(generatorStrategy27);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = null;
        enhancer30.setStrategy(generatorStrategy33);
        enhancer30.setUseFactory(false);
        java.lang.ClassLoader classLoader37 = enhancer30.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray38 = generatorStrategy27.generate((org.mockito.cglib.core.ClassGenerator) enhancer30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        boolean boolean39 = propertyDescriptor38.isHidden();
        java.lang.reflect.Method method40 = propertyDescriptor38.getWriteMethod();
        java.lang.reflect.Method method41 = propertyDescriptor38.getWriteMethod();
        java.lang.Object obj43 = propertyDescriptor38.getValue("");
        propertyDescriptor38.setHidden(false);
        java.lang.Class<?> wildcardClass46 = propertyDescriptor38.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass46);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(method40);
        org.junit.Assert.assertNull(method41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getName();
        boolean boolean8 = propertyDescriptor6.isHidden();
        java.lang.String str9 = propertyDescriptor6.getName();
        propertyDescriptor6.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer13.setUseFactory(false);
        enhancer13.setInterceptDuringConstruction(true);
        propertyDescriptor6.setValue("(FIDCCJ)I", (java.lang.Object) enhancer13);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        enhancer23.setStrategy(generatorStrategy26);
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        enhancer23.setInterfaces(classArray28);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer23.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer33.getStrategy();
        enhancer33.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader37 = enhancer33.getClassLoader();
        enhancer23.setClassLoader(classLoader37);
        enhancer13.setClassLoader(classLoader37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class40 = org.mockito.cglib.core.ReflectUtils.defineClass("char", byteArray2, classLoader37);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer1.setCallbackFilter(callbackFilter2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        boolean boolean5 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        enhancer6.setInterfaces(classArray11);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer6.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = enhancer6.getStrategy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        boolean boolean21 = propertyDescriptor20.isHidden();
        propertyDescriptor20.setHidden(false);
        boolean boolean24 = generatorStrategy16.equals((java.lang.Object) false);
        enhancer1.setStrategy(generatorStrategy16);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback27 = null;
        enhancer1.setCallback(callback27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy34);
        enhancer29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer29.setCallbackFilter(callbackFilter37);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer29.getClassLoader();
        enhancer1.setClassLoader(classLoader41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method43 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(I)I; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]", classLoader41);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(generatorStrategy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader41);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        org.mockito.cglib.core.Signature signature54 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray55 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature58 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = signature58.equals((java.lang.Object) type59);
        java.lang.Class[] classArray61 = new java.lang.Class[] {};
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        boolean boolean64 = signature58.equals((java.lang.Object) classArray61);
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("hi!", method67, method68);
        propertyDescriptor69.setShortDescription("J");
        java.lang.Class<?> wildcardClass72 = propertyDescriptor69.getPropertyType();
        java.lang.Class<?> wildcardClass73 = propertyDescriptor69.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass73);
        java.lang.reflect.Method[] methodArray78 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray75, false, true);
        java.lang.reflect.Method[] methodArray79 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray65, methodArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor47, (java.lang.Object[]) methodArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
        org.junit.Assert.assertNotNull(methodArray78);
        org.junit.Assert.assertNotNull(methodArray79);
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(FIDCCJ)I");
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lava.beans.PropertyDescriptor[name=hi!;");
        propertyDescriptor3.setDisplayName("<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        java.lang.String str15 = propertyDescriptor3.getName();
        java.lang.reflect.Method method16 = propertyDescriptor3.getReadMethod();
        java.lang.String str17 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(FIDCCJ)I" + "'", str15, "(FIDCCJ)I");
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=(FIDCCJ)I; displayName=<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V]" + "'", str17, "java.beans.PropertyDescriptor[name=(FIDCCJ)I; displayName=<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V]");
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V=java.beans.PropertyDescriptor[name=hi!; displayName=D]}]", "java.beans.PropertyDescriptor[name=(FIDCCJ)I; bound]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=hi!; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V=java.beans.PropertyDescriptor[name=hi!; displayName=D]}]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.reflect.Method method10 = propertyDescriptor9.getReadMethod();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor9.getPropertyEditorClass();
        propertyDescriptor9.setHidden(false);
        java.lang.String str14 = propertyDescriptor9.getName();
        java.lang.reflect.Method method15 = propertyDescriptor9.getReadMethod();
        java.lang.String str16 = propertyDescriptor9.getDisplayName();
        boolean boolean17 = propertyDescriptor9.isHidden();
        propertyDescriptor9.setPreferred(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor9);
        boolean boolean21 = propertyDescriptor9.isBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        propertyDescriptor3.setConstrained(true);
        propertyDescriptor3.setDisplayName("");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass7, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy19);
        enhancer6.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer6.setCallbackFilter(callbackFilter23);
        org.mockito.cglib.proxy.Callback callback25 = null;
        enhancer6.setCallback(callback25);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("va.beans.PropertyDescriptor");
        java.lang.String str9 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer13.setCallbackFilter(callbackFilter14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        boolean boolean17 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        enhancer18.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        enhancer18.setInterfaces(classArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer18.getStrategy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        boolean boolean33 = propertyDescriptor32.isHidden();
        propertyDescriptor32.setHidden(false);
        boolean boolean36 = generatorStrategy28.equals((java.lang.Object) false);
        enhancer13.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer13.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer41.getNamingPolicy();
        enhancer40.setNamingPolicy(namingPolicy44);
        java.lang.ClassLoader classLoader46 = enhancer40.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer40.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer48.getNamingPolicy();
        enhancer48.setUseFactory(false);
        enhancer48.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer56.setCallbacks(callbackArray63);
        enhancer56.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter68 = null;
        enhancer67.setCallbackFilter(callbackFilter68);
        java.lang.Class[] classArray70 = new java.lang.Class[] {};
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        enhancer67.setInterfaces(classArray70);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        enhancer74.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = enhancer74.getNamingPolicy();
        enhancer73.setNamingPolicy(namingPolicy77);
        java.lang.ClassLoader classLoader79 = enhancer73.getClassLoader();
        enhancer67.setClassLoader(classLoader79);
        enhancer56.setClassLoader(classLoader79);
        enhancer48.setClassLoader(classLoader79);
        enhancer40.setClassLoader(classLoader79);
        enhancer40.setUseFactory(true);
        boolean boolean86 = enhancer40.getUseCache();
        java.lang.ClassLoader classLoader87 = enhancer40.getClassLoader();
        boolean boolean88 = namingPolicy38.equals((java.lang.Object) enhancer40);
        org.mockito.cglib.proxy.Enhancer enhancer89 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter90 = null;
        enhancer89.setCallbackFilter(callbackFilter90);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter92 = null;
        enhancer89.setCallbackFilter(callbackFilter92);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy94 = enhancer89.getStrategy();
        enhancer40.setStrategy(generatorStrategy94);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(generatorStrategy94);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        boolean boolean12 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("ava.beans.PropertyDescriptor[name=hi!", "L(I)Lava.beans.PropertyDescriptor[name=hi!;;");
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer12.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        enhancer27.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer27.setCallbackFilter(callbackFilter35);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader39 = enhancer27.getClassLoader();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo48 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass47);
        enhancer27.setSuperclass((java.lang.Class) wildcardClass47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass47);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("hi!", method53, method54);
        propertyDescriptor55.setShortDescription("J");
        java.lang.Class<?> wildcardClass58 = propertyDescriptor55.getPropertyType();
        java.lang.Class<?> wildcardClass59 = propertyDescriptor55.getClass();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass59, wildcardClass67 };
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray71);
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray71);
        java.lang.reflect.Constructor constructor74 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass47, classArray71);
        org.mockito.cglib.core.Signature signature75 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74, 7);
        org.mockito.asm.Type[] typeArray78 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74, 98);
        boolean boolean81 = generatorStrategy26.equals((java.lang.Object) 98);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str51, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(constructor74);
        org.junit.Assert.assertNotNull(signature75);
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(methodInfo80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.String str12 = propertyDescriptor3.getName();
        boolean boolean13 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer4.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy7);
        enhancer2.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer2.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer12.setCallbackFilter(callbackFilter20);
        enhancer12.setUseCache(false);
        java.lang.ClassLoader classLoader24 = enhancer12.getClassLoader();
        enhancer2.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = signature40.equals((java.lang.Object) type41);
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        boolean boolean46 = signature40.equals((java.lang.Object) classArray43);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        enhancer26.setInterfaces(classArray43);
        enhancer2.setInterfaces(classArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method50 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod(class0, "()I", classArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ()I");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Callback callback49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass20, callback49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        enhancer1.setStrategy(generatorStrategy4);
        java.lang.Class[] classArray6 = new java.lang.Class[] {};
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray6);
        enhancer1.setInterfaces(classArray6);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer1.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer1.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer12.setCallbackFilter(callbackFilter20);
        enhancer12.setUseCache(false);
        java.lang.ClassLoader classLoader24 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer12.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer26.getClassLoader();
        enhancer12.setClassLoader(classLoader38);
        enhancer1.setClassLoader(classLoader38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor41 = org.mockito.cglib.core.ReflectUtils.findConstructor("Lorg/mockito/asm/Type;", classLoader38);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("hi!");
        propertyDescriptor3.setExpert(false);
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        propertyDescriptor18.setShortDescription("J");
        java.lang.Class<?> wildcardClass21 = propertyDescriptor18.getPropertyType();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor18.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass22);
        java.lang.Class[] classArray26 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray25);
        int int27 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray26);
        java.lang.Class<?> wildcardClass28 = classArray26.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass28);
        boolean boolean30 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass28);
        propertyDescriptor3.setValue("F", (java.lang.Object) boolean30);
        java.util.Enumeration<java.lang.String> strEnumeration32 = propertyDescriptor3.attributeNames();
        boolean boolean33 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(classArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strEnumeration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.reflect.Method method28 = propertyDescriptor27.getReadMethod();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor27.getPropertyEditorClass();
        propertyDescriptor27.setValue("J", (java.lang.Object) 0.0d);
        boolean boolean33 = generatorStrategy23.equals((java.lang.Object) 0.0d);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass41);
        boolean boolean47 = generatorStrategy23.equals((java.lang.Object) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass41);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        enhancer51.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer51.getNamingPolicy();
        enhancer50.setNamingPolicy(namingPolicy54);
        enhancer49.setNamingPolicy(namingPolicy54);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter57 = null;
        enhancer49.setCallbackFilter(callbackFilter57);
        enhancer49.setUseCache(false);
        java.lang.ClassLoader classLoader61 = enhancer49.getClassLoader();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("hi!", method63, method64);
        propertyDescriptor65.setShortDescription("J");
        java.lang.Class<?> wildcardClass68 = propertyDescriptor65.getPropertyType();
        java.lang.Class<?> wildcardClass69 = propertyDescriptor65.getClass();
        org.mockito.cglib.core.ClassInfo classInfo70 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass69);
        enhancer49.setSuperclass((java.lang.Class) wildcardClass69);
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass69);
        java.lang.String str73 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("hi!", method75, method76);
        propertyDescriptor77.setShortDescription("J");
        java.lang.Class<?> wildcardClass80 = propertyDescriptor77.getPropertyType();
        java.lang.Class<?> wildcardClass81 = propertyDescriptor77.getClass();
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("hi!", method83, method84);
        propertyDescriptor85.setShortDescription("J");
        java.lang.Class<?> wildcardClass88 = propertyDescriptor85.getPropertyType();
        java.lang.Class<?> wildcardClass89 = propertyDescriptor85.getClass();
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass89);
        java.beans.PropertyDescriptor[] propertyDescriptorArray91 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass89);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass89);
        java.lang.Class[] classArray93 = new java.lang.Class[] { wildcardClass81, wildcardClass89 };
        java.lang.String[] strArray94 = org.mockito.cglib.core.ReflectUtils.getNames(classArray93);
        int int95 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray93);
        java.lang.reflect.Constructor constructor96 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass69, classArray93);
        java.util.List list97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass41, classArray93, list97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str46, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(classInfo70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str73, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNull(wildcardClass88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(propertyDescriptorArray91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(constructor96);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str4 = type3.toString();
        org.mockito.asm.Type[] typeArray5 = new org.mockito.asm.Type[] { type3 };
        java.lang.String str6 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        enhancer7.setStrategy(generatorStrategy10);
        boolean boolean12 = enhancer7.getUseCache();
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer7.setCallbacks(callbackArray14);
        boolean boolean16 = type1.equals((java.lang.Object) enhancer7);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer7.getNamingPolicy();
        java.lang.ClassLoader classLoader23 = enhancer7.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method24 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=C]", classLoader23);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "I" + "'", str4, "I");
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(I)J" + "'", str6, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("F");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        enhancer6.setUseFactory(false);
        boolean boolean18 = enhancer6.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class19 = enhancer6.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer35.getStrategy();
        enhancer0.setStrategy(generatorStrategy48);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = null;
        enhancer50.setStrategy(generatorStrategy53);
        java.lang.Class[] classArray55 = new java.lang.Class[] {};
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        enhancer50.setInterfaces(classArray55);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer50.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = enhancer50.getStrategy();
        enhancer50.setAttemptLoad(false);
        enhancer50.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = null;
        enhancer65.setStrategy(generatorStrategy68);
        java.lang.Class[] classArray70 = new java.lang.Class[] {};
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        enhancer65.setInterfaces(classArray70);
        enhancer50.setInterfaces(classArray70);
        enhancer0.setInterfaces(classArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(generatorStrategy60);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy34);
        enhancer29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer38.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy41);
        enhancer29.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer29.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        enhancer45.setStrategy(generatorStrategy48);
        boolean boolean50 = enhancer45.getUseCache();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer45.setCallbacks(callbackArray52);
        enhancer29.setCallbacks(callbackArray52);
        enhancer0.setCallbacks(callbackArray52);
        org.mockito.asm.ClassVisitor classVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(callbackArray52);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer0.setCallback(callback4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.asm.ClassVisitor classVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.String str27 = signature11.getName();
        java.lang.String str28 = signature11.getName();
        java.lang.String str29 = signature11.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str27, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str28, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str29, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback30 = null;
        enhancer0.setCallback(callback30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = signature15.equals((java.lang.Object) type16);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        boolean boolean21 = signature15.equals((java.lang.Object) classArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor22 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass7, classArray18);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 0);
        java.lang.Object[] objArray53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor47, objArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: java.lang.NullPointerException@337a0628");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(methodInfo52);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(I)I", method1, method2);
        propertyDescriptor3.setDisplayName("I");
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        int int52 = classInfo51.getModifiers();
        int int53 = classInfo51.getModifiers();
        int int54 = classInfo51.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.getDescriptor();
        java.lang.String str7 = signature2.toString();
        java.lang.String str8 = signature2.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class<?> wildcardClass13 = classArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass13);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->[Ljava.lang.Class;.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer12.setCallbackFilter(callbackFilter20);
        enhancer12.setUseCache(false);
        java.lang.ClassLoader classLoader24 = enhancer12.getClassLoader();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        org.mockito.cglib.core.ClassInfo classInfo33 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        enhancer12.setSuperclass((java.lang.Class) wildcardClass32);
        java.lang.ClassLoader classLoader35 = enhancer12.getClassLoader();
        boolean boolean36 = enhancer12.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = generatorStrategy11.generate((org.mockito.cglib.core.ClassGenerator) enhancer12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(classInfo33);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={java.beans.PropertyDescriptor=L()Ljava/beans/PropertyDescriptor;;}]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=hi!; shortDescription=float; values={java.beans.PropertyDescriptor=L");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        propertyDescriptor3.setHidden(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        enhancer10.setStrategy(generatorStrategy13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        enhancer10.setInterfaces(classArray15);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer10.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy20 = enhancer10.getStrategy();
        java.beans.PropertyEditor propertyEditor21 = propertyDescriptor3.createPropertyEditor((java.lang.Object) enhancer10);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor3.setWriteMethod(method22);
        boolean boolean24 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(generatorStrategy20);
        org.junit.Assert.assertNull(propertyEditor21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setName("Ljava/beans/FeatureDescriptor;");
        propertyDescriptor3.setShortDescription("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer6.getNamingPolicy();
        java.lang.ClassLoader classLoader22 = enhancer6.getClassLoader();
        boolean boolean23 = enhancer6.getUseCache();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer0.setCallback(callback13);
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.Class[] classArray36 = new java.lang.Class[] { wildcardClass24, wildcardClass32 };
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        int int38 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        java.lang.Class[] classArray40 = new java.lang.Class[] {};
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj42 = enhancer0.create(classArray36, (java.lang.Object[]) classArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        org.mockito.cglib.core.Signature signature54 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str55 = signature54.getName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>" + "'", str55, "<init>");
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.reflect.Method method26 = propertyDescriptor25.getReadMethod();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setHidden(false);
        boolean boolean30 = propertyDescriptor25.isHidden();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setName("java/beans/PropertyDescriptor");
        propertyDescriptor25.setName("(I)LI;");
        propertyDescriptor25.setShortDescription("(I)LI;");
        java.lang.reflect.Method method38 = propertyDescriptor25.getReadMethod();
        boolean boolean39 = classInfo8.equals((java.lang.Object) propertyDescriptor25);
        propertyDescriptor25.setConstrained(false);
        propertyDescriptor25.setShortDescription("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        boolean boolean44 = propertyDescriptor25.isHidden();
        java.lang.Object obj46 = propertyDescriptor25.getValue("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer35.getStrategy();
        enhancer0.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = signature52.equals((java.lang.Object) type53);
        java.lang.Class[] classArray55 = new java.lang.Class[] {};
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        boolean boolean58 = signature52.equals((java.lang.Object) classArray55);
        java.lang.String str59 = signature52.toString();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        org.mockito.cglib.core.ClassInfo classInfo68 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type[] typeArray69 = classInfo68.getInterfaces();
        boolean boolean70 = signature52.equals((java.lang.Object) classInfo68);
        boolean boolean71 = generatorStrategy48.equals((java.lang.Object) classInfo68);
        org.mockito.asm.Type[] typeArray72 = classInfo68.getInterfaces();
        java.lang.Class<?> wildcardClass73 = typeArray72.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method74 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.asm.Type; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) 100, (byte) 0, (byte) 10 };
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer8.setNamingPolicy(namingPolicy20);
        java.lang.ClassLoader classLoader23 = enhancer8.getClassLoader();
        java.lang.ClassLoader classLoader24 = enhancer8.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer8.getNamingPolicy();
        enhancer8.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer28.setCallbackFilter(callbackFilter29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        enhancer28.setInterfaces(classArray31);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = enhancer34.getClassLoader();
        enhancer28.setClassLoader(classLoader40);
        enhancer8.setClassLoader(classLoader40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class43 = org.mockito.cglib.core.ReflectUtils.defineClass("org.mockito.cglib.proxy.Enhancer", byteArray7, classLoader40);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 1, 1, 100, 0, 10]");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        java.lang.String str21 = classInfo8.toString();
        org.mockito.asm.Type type22 = classInfo8.getType();
        java.lang.Class<?> wildcardClass23 = classInfo8.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer24.setCallbackFilter(callbackFilter32);
        enhancer24.setUseCache(false);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        boolean boolean40 = propertyDescriptor39.isHidden();
        propertyDescriptor39.setHidden(false);
        propertyDescriptor39.setDisplayName("(I)J");
        java.lang.reflect.Method method45 = null;
        propertyDescriptor39.setWriteMethod(method45);
        propertyDescriptor39.setPreferred(false);
        java.lang.String str49 = propertyDescriptor39.getShortDescription();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        java.lang.reflect.Method method54 = propertyDescriptor53.getReadMethod();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor53.getPropertyEditorClass();
        propertyDescriptor53.setHidden(false);
        boolean boolean58 = propertyDescriptor53.isHidden();
        java.lang.Class<?> wildcardClass59 = propertyDescriptor53.getPropertyEditorClass();
        propertyDescriptor53.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor53.getPropertyType();
        propertyDescriptor53.setExpert(true);
        propertyDescriptor53.setExpert(true);
        boolean boolean67 = propertyDescriptor53.isExpert();
        propertyDescriptor53.setBound(true);
        java.lang.reflect.Method method72 = null;
        java.lang.reflect.Method method73 = null;
        java.beans.PropertyDescriptor propertyDescriptor74 = new java.beans.PropertyDescriptor("hi!", method72, method73);
        propertyDescriptor74.setShortDescription("J");
        java.lang.Class<?> wildcardClass77 = propertyDescriptor74.getPropertyType();
        java.lang.Class<?> wildcardClass78 = propertyDescriptor74.getClass();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        org.mockito.cglib.core.ClassInfo classInfo80 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass78);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass78);
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray81);
        propertyDescriptor53.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray82);
        java.lang.Class[] classArray84 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray82);
        java.beans.PropertyEditor propertyEditor85 = propertyDescriptor39.createPropertyEditor((java.lang.Object) classArray84);
        enhancer24.setInterfaces(classArray84);
        java.util.List list87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass23, classArray84, list87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(I)J" + "'", str49, "(I)J");
        org.junit.Assert.assertNull(method54);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(classInfo80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(classArray82);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNull(propertyEditor85);
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        boolean boolean27 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        enhancer0.setStrategy(generatorStrategy36);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = null;
        enhancer0.setNamingPolicy(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        boolean boolean10 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Callback callback13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, callback13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(I)Lava.beans.PropertyDescriptor[name=hi!;");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; expert]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Object obj13 = propertyDescriptor3.getValue("(FIDCCJ)Lva/beans/FeatureDescriptor;");
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) 'a');
        int int54 = methodInfo53.getModifiers();
        java.lang.String str55 = methodInfo53.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer26.setCallbackFilter(callbackFilter27);
        boolean boolean29 = enhancer26.getAttemptLoad();
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer31.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        boolean boolean46 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setHidden(false);
        boolean boolean49 = generatorStrategy41.equals((java.lang.Object) false);
        enhancer26.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer26.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass60);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer68.getNamingPolicy();
        enhancer67.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Callback callback73 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray74 = new org.mockito.cglib.proxy.Callback[] { callback73 };
        enhancer67.setCallbacks(callbackArray74);
        enhancer0.setCallbacks(callbackArray74);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(callbackArray74);
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = enhancer12.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str9 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; hidden]" + "'", str9, "java.beans.PropertyDescriptor[name=hi!; hidden]");
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.Class<?> wildcardClass27 = signature11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy34);
        enhancer29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer29.setCallbackFilter(callbackFilter37);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer29.getClassLoader();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        propertyDescriptor45.setShortDescription("J");
        java.lang.Class<?> wildcardClass48 = propertyDescriptor45.getPropertyType();
        java.lang.Class<?> wildcardClass49 = propertyDescriptor45.getClass();
        org.mockito.cglib.core.ClassInfo classInfo50 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass49);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass49);
        java.lang.ClassLoader classLoader52 = enhancer29.getClassLoader();
        boolean boolean53 = enhancer29.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        enhancer54.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter62 = null;
        enhancer54.setCallbackFilter(callbackFilter62);
        enhancer54.setUseCache(false);
        java.lang.ClassLoader classLoader66 = enhancer54.getClassLoader();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("hi!", method68, method69);
        propertyDescriptor70.setShortDescription("J");
        java.lang.Class<?> wildcardClass73 = propertyDescriptor70.getPropertyType();
        java.lang.Class<?> wildcardClass74 = propertyDescriptor70.getClass();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass74);
        enhancer54.setSuperclass((java.lang.Class) wildcardClass74);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        enhancer78.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = null;
        enhancer78.setStrategy(generatorStrategy81);
        java.lang.Class[] classArray83 = new java.lang.Class[] {};
        java.lang.String[] strArray84 = org.mockito.cglib.core.ReflectUtils.getNames(classArray83);
        java.lang.String[] strArray85 = org.mockito.cglib.core.ReflectUtils.getNames(classArray83);
        enhancer78.setInterfaces(classArray83);
        int int87 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray83);
        enhancer54.setInterfaces(classArray83);
        java.lang.Class[] classArray89 = new java.lang.Class[] {};
        int int90 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray89);
        java.lang.Class[] classArray91 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray89);
        enhancer54.setInterfaces(classArray89);
        int int93 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray89);
        enhancer29.setInterfaces(classArray89);
        org.mockito.cglib.proxy.Callback callback95 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass27, classArray89, callback95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader66);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "java/beans/PropertyDescriptor" + "'", str76, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!]", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setReadMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str6, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Linit>(Ljava/beans/PropertyDescriptor;", "()Lava.beans.PropertyDescriptor[name=hi!;");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'Linit>(Ljava/beans/PropertyDescriptor;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        int int2 = type1.getDimensions();
        int int4 = type1.getOpcode((int) (byte) 100);
        int int5 = type1.getSort();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        enhancer6.setInterfaces(classArray11);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer6.getNamingPolicy();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        boolean boolean20 = type17.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type17, typeArray25);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = null;
        enhancer28.setStrategy(generatorStrategy31);
        boolean boolean33 = enhancer28.getUseCache();
        org.mockito.cglib.proxy.Callback callback34 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray35 = new org.mockito.cglib.proxy.Callback[] { callback34 };
        enhancer28.setCallbacks(callbackArray35);
        enhancer28.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback39 = null;
        enhancer28.setCallback(callback39);
        boolean boolean41 = signature27.equals((java.lang.Object) enhancer28);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer28.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy42);
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        java.lang.String str48 = propertyDescriptor47.getName();
        boolean boolean49 = propertyDescriptor47.isHidden();
        java.lang.String str50 = propertyDescriptor47.getName();
        propertyDescriptor47.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        enhancer54.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer54.getNamingPolicy();
        enhancer54.setUseFactory(false);
        enhancer54.setInterceptDuringConstruction(true);
        propertyDescriptor47.setValue("(FIDCCJ)I", (java.lang.Object) enhancer54);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter63 = null;
        enhancer54.setCallbackFilter(callbackFilter63);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer66 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        enhancer67.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer67.getNamingPolicy();
        enhancer66.setNamingPolicy(namingPolicy70);
        enhancer65.setNamingPolicy(namingPolicy70);
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer74 = new org.mockito.cglib.proxy.Enhancer();
        enhancer74.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy77 = enhancer74.getNamingPolicy();
        enhancer73.setNamingPolicy(namingPolicy77);
        enhancer65.setNamingPolicy(namingPolicy77);
        org.mockito.cglib.core.NamingPolicy namingPolicy80 = enhancer65.getNamingPolicy();
        enhancer54.setNamingPolicy(namingPolicy80);
        enhancer6.setNamingPolicy(namingPolicy80);
        boolean boolean83 = type1.equals((java.lang.Object) enhancer6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = enhancer6.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 104 + "'", int4 == 104);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "J" + "'", str22, "J");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)J" + "'", str26, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(callbackArray35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy70);
        org.junit.Assert.assertNotNull(namingPolicy77);
        org.junit.Assert.assertNotNull(namingPolicy80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getClass();
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list11 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass9, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.Type[] typeArray15 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray15);
        java.lang.Class[] classArray17 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer18.setCallbackFilter(callbackFilter26);
        enhancer18.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer18.getClassLoader();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        propertyDescriptor34.setShortDescription("J");
        java.lang.Class<?> wildcardClass37 = propertyDescriptor34.getPropertyType();
        java.lang.Class<?> wildcardClass38 = propertyDescriptor34.getClass();
        org.mockito.cglib.core.ClassInfo classInfo39 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass38);
        enhancer18.setSuperclass((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass38);
        java.lang.String str42 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        propertyDescriptor46.setShortDescription("J");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Class<?> wildcardClass50 = propertyDescriptor46.getClass();
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        propertyDescriptor54.setShortDescription("J");
        java.lang.Class<?> wildcardClass57 = propertyDescriptor54.getPropertyType();
        java.lang.Class<?> wildcardClass58 = propertyDescriptor54.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.lang.Class[] classArray62 = new java.lang.Class[] { wildcardClass50, wildcardClass58 };
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        int int64 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        java.lang.reflect.Constructor constructor65 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass38, classArray62);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65);
        org.mockito.cglib.core.Signature signature67 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor65);
        java.lang.String str68 = org.mockito.asm.Type.getConstructorDescriptor(constructor65);
        org.mockito.cglib.core.MethodInfo methodInfo69 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor65);
        int int71 = methodInfo70.getModifiers();
        org.mockito.asm.Type[] typeArray72 = methodInfo70.getExceptionTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj73 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7, classArray17, (java.lang.Object[]) typeArray72);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "I" + "'", str13, "I");
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(I)I" + "'", str16, "(I)I");
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(classInfo39);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str42, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(constructor65);
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(signature67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str68, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo69);
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(typeArray72);
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        propertyDescriptor11.setShortDescription("J");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getPropertyType();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor11.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass15);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.lang.String str19 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass15);
        java.lang.reflect.Method[] methodArray23 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, false, true);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, false, true);
        java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray20, true, true);
        org.mockito.cglib.core.Predicate predicate30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = namingPolicy5.getClassName("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]", "java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; expert]", (java.lang.Object) propertyDescriptorArray20, predicate30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(methodArray23);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray29);
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.ClassLoader classLoader13 = null;
        enhancer0.setClassLoader(classLoader13);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(true);
        org.mockito.asm.ClassVisitor classVisitor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(true);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor3.attributeNames();
        boolean boolean13 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        enhancer1.setStrategy(generatorStrategy4);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        enhancer9.setNamingPolicy(namingPolicy22);
        boolean boolean27 = namingPolicy22.equals((java.lang.Object) 0.0d);
        enhancer1.setNamingPolicy(namingPolicy22);
        enhancer1.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback31 = null;
        enhancer1.setCallback(callback31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer33.setCallbacks(callbackArray40);
        enhancer33.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer44.setCallbackFilter(callbackFilter45);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        enhancer44.setInterfaces(classArray47);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        enhancer51.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy54 = enhancer51.getNamingPolicy();
        enhancer50.setNamingPolicy(namingPolicy54);
        java.lang.ClassLoader classLoader56 = enhancer50.getClassLoader();
        enhancer44.setClassLoader(classLoader56);
        enhancer33.setClassLoader(classLoader56);
        enhancer1.setClassLoader(classLoader56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.findConstructor("char", classLoader56);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(callbackArray40);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(namingPolicy54);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer14.setCallbackFilter(callbackFilter22);
        enhancer14.setUseCache(false);
        java.lang.ClassLoader classLoader26 = enhancer14.getClassLoader();
        enhancer0.setClassLoader(classLoader26);
        boolean boolean28 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback29 = null;
        enhancer0.setCallback(callback29);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        enhancer33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter41 = null;
        enhancer33.setCallbackFilter(callbackFilter41);
        enhancer33.setUseCache(false);
        java.lang.ClassLoader classLoader45 = enhancer33.getClassLoader();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        propertyDescriptor49.setShortDescription("J");
        java.lang.Class<?> wildcardClass52 = propertyDescriptor49.getPropertyType();
        java.lang.Class<?> wildcardClass53 = propertyDescriptor49.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        enhancer33.setSuperclass((java.lang.Class) wildcardClass53);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        enhancer57.setStrategy(generatorStrategy60);
        java.lang.Class[] classArray62 = new java.lang.Class[] {};
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        enhancer57.setInterfaces(classArray62);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        enhancer33.setInterfaces(classArray62);
        java.lang.Class[] classArray68 = new java.lang.Class[] {};
        int int69 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray68);
        enhancer33.setInterfaces(classArray68);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java/beans/PropertyDescriptor" + "'", str55, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Lva/beans/FeatureDescriptor;", "org.mockito.cglib.core.DefaultNamingPolicy");
        java.lang.String str3 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lva/beans/FeatureDescriptor;" + "'", str3, "Lva/beans/FeatureDescriptor;");
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.cglib.core.DefaultNamingPolicy");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        int int2 = type0.getSort();
        int int3 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "D" + "'", str1, "D");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ljava/beans/FeatureDescriptor;(FIDCCJ)Lva/beans/FeatureDescriptor;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.Signature signature51 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray52 = signature51.getArgumentTypes();
        org.mockito.asm.Type type53 = signature51.getReturnType();
        java.lang.String str54 = type53.getDescriptor();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "V" + "'", str54, "V");
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java/beans/FeatureDescriptor(I)I", method1, method2);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 104);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray55 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo57 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) '#');
        org.mockito.cglib.core.Signature signature58 = methodInfo57.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(methodInfo57);
        org.junit.Assert.assertNotNull(signature58);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 1);
        java.lang.String str54 = methodInfo53.toString();
        java.lang.String str55 = methodInfo53.toString();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        enhancer56.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer56.setCallbackFilter(callbackFilter64);
        enhancer56.setUseCache(false);
        java.lang.ClassLoader classLoader68 = enhancer56.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        enhancer71.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy74 = enhancer71.getNamingPolicy();
        enhancer70.setNamingPolicy(namingPolicy74);
        enhancer69.setNamingPolicy(namingPolicy74);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter77 = null;
        enhancer69.setCallbackFilter(callbackFilter77);
        boolean boolean79 = enhancer69.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        enhancer80.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = null;
        enhancer80.setStrategy(generatorStrategy83);
        java.lang.Class[] classArray85 = new java.lang.Class[] {};
        java.lang.String[] strArray86 = org.mockito.cglib.core.ReflectUtils.getNames(classArray85);
        java.lang.String[] strArray87 = org.mockito.cglib.core.ReflectUtils.getNames(classArray85);
        enhancer80.setInterfaces(classArray85);
        org.mockito.cglib.core.NamingPolicy namingPolicy89 = enhancer80.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy90 = enhancer80.getStrategy();
        enhancer69.setStrategy(generatorStrategy90);
        enhancer56.setStrategy(generatorStrategy90);
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter95 = null;
        enhancer56.setCallbackFilter(callbackFilter95);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter97 = null;
        enhancer56.setCallbackFilter(callbackFilter97);
        boolean boolean99 = methodInfo53.equals((java.lang.Object) enhancer56);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNotNull(namingPolicy74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(classArray85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(namingPolicy89);
        org.junit.Assert.assertNotNull(generatorStrategy90);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer25.setCallbackFilter(callbackFilter33);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader37 = enhancer25.getClassLoader();
        enhancer11.setClassLoader(classLoader37);
        enhancer0.setClassLoader(classLoader37);
        enhancer0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj42 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        enhancer0.setInterfaces(classArray3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        enhancer6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer6.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader21 = enhancer6.getClassLoader();
        enhancer0.setClassLoader(classLoader21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        int int54 = methodInfo53.getModifiers();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("hi!", method56, method57);
        propertyDescriptor58.setShortDescription("J");
        java.lang.Class<?> wildcardClass61 = propertyDescriptor58.getPropertyType();
        java.lang.Class<?> wildcardClass62 = propertyDescriptor58.getClass();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass62);
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass62);
        boolean boolean68 = methodInfo53.equals((java.lang.Object) wildcardClass62);
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        java.util.List list70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list71 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass62, list70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java/beans/PropertyDescriptor" + "'", str65, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java/beans/PropertyDescriptor" + "'", str69, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("<init>()V");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 57);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo56 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 14);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo56);
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer0.setCallbackFilter(callbackFilter5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray15 = org.mockito.asm.Type.getArgumentTypes("(I)LI;");
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray15);
        int int17 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray16);
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass7, classArray16, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getName();
        boolean boolean17 = propertyDescriptor15.isHidden();
        java.lang.String str18 = propertyDescriptor15.getName();
        propertyDescriptor15.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer22.getNamingPolicy();
        enhancer22.setUseFactory(false);
        enhancer22.setInterceptDuringConstruction(true);
        propertyDescriptor15.setValue("(FIDCCJ)I", (java.lang.Object) enhancer22);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer22.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer33.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer32.setCallbacks(callbackArray45);
        enhancer22.setCallbacks(callbackArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass7, callbackArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer1.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader16 = enhancer1.getClassLoader();
        java.lang.ClassLoader classLoader17 = enhancer1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer1.getNamingPolicy();
        enhancer1.setUseCache(false);
        java.lang.ClassLoader classLoader21 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method22 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; preferred]", classLoader21);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 57);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(methodInfo53);
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setValue("J", (java.lang.Object) 0.0d);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("D");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        boolean boolean15 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "D" + "'", str12, "D");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()F");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("hi!", method50, method51);
        propertyDescriptor52.setShortDescription("J");
        java.lang.Class<?> wildcardClass55 = propertyDescriptor52.getPropertyType();
        java.lang.Class<?> wildcardClass56 = propertyDescriptor52.getClass();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.Class[] classArray68 = new java.lang.Class[] { wildcardClass56, wildcardClass64 };
        java.lang.String[] strArray69 = org.mockito.cglib.core.ReflectUtils.getNames(classArray68);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("hi!", method71, method72);
        propertyDescriptor73.setShortDescription("J");
        java.lang.Class<?> wildcardClass76 = propertyDescriptor73.getPropertyType();
        java.lang.Class<?> wildcardClass77 = propertyDescriptor73.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass77);
        java.lang.reflect.Method[] methodArray82 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, false, true);
        java.lang.reflect.Method[] methodArray85 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray79, false, false);
        java.lang.reflect.Method[] methodArray86 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray69, methodArray85);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray48, methodArray85);
        java.lang.Class[] classArray88 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray48);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(methodArray82);
        org.junit.Assert.assertNotNull(methodArray85);
        org.junit.Assert.assertNotNull(methodArray86);
        org.junit.Assert.assertNotNull(methodArray87);
        org.junit.Assert.assertNotNull(classArray88);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer30.setUseFactory(false);
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer38.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer49.setCallbackFilter(callbackFilter50);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        enhancer49.setInterfaces(classArray52);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = enhancer55.getClassLoader();
        enhancer49.setClassLoader(classLoader61);
        enhancer38.setClassLoader(classLoader61);
        enhancer30.setClassLoader(classLoader61);
        enhancer0.setClassLoader(classLoader61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        byte[] byteArray2 = new byte[] { (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter4 = null;
        enhancer3.setCallbackFilter(callbackFilter4);
        boolean boolean6 = enhancer3.getAttemptLoad();
        enhancer3.setAttemptLoad(false);
        boolean boolean9 = enhancer3.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer10.setCallbackFilter(callbackFilter11);
        java.lang.Class[] classArray13 = new java.lang.Class[] {};
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        enhancer10.setInterfaces(classArray13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer16.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader31 = enhancer16.getClassLoader();
        enhancer10.setClassLoader(classLoader31);
        enhancer3.setClassLoader(classLoader31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class34 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; expert]", byteArray2, classLoader31);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("hi!");
        propertyDescriptor3.setExpert(false);
        java.lang.String str13 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean15 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;=Lva/beans/PropertyDescriptor;}]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=(FIDCCJ)I; displayName=<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type26 = classInfo25.getType();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        propertyDescriptor30.setShortDescription("J");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor30.getPropertyType();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor30.getClass();
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass34);
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass34);
        boolean boolean37 = classInfo25.equals((java.lang.Object) wildcardClass34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass34);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str36, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setExpert(false);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyEditorClass();
        boolean boolean24 = namingPolicy13.equals((java.lang.Object) propertyDescriptor20);
        java.lang.Class<?> wildcardClass25 = propertyDescriptor20.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration26 = propertyDescriptor20.attributeNames();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strEnumeration26);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer26.getClassLoader();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        org.mockito.cglib.core.ClassInfo classInfo47 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass46);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass46);
        org.mockito.asm.ClassVisitor classVisitor53 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 1);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str55 = type54.toString();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.toString();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type56 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray58);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        enhancer60.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = null;
        enhancer60.setStrategy(generatorStrategy63);
        boolean boolean65 = enhancer60.getUseCache();
        org.mockito.cglib.proxy.Callback callback66 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray67 = new org.mockito.cglib.proxy.Callback[] { callback66 };
        enhancer60.setCallbacks(callbackArray67);
        boolean boolean69 = type54.equals((java.lang.Object) enhancer60);
        boolean boolean70 = methodInfo53.equals((java.lang.Object) enhancer60);
        int int71 = methodInfo53.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo72 = methodInfo53.getClassInfo();
        int int73 = classInfo72.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "J" + "'", str55, "J");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "I" + "'", str57, "I");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(I)J" + "'", str59, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(callbackArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(classInfo72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        byte[] byteArray1 = new byte[] {};
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Callback callback8 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray9 = new org.mockito.cglib.proxy.Callback[] { callback8 };
        enhancer2.setCallbacks(callbackArray9);
        enhancer2.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer13.setCallbackFilter(callbackFilter14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer13.setInterfaces(classArray16);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        java.lang.ClassLoader classLoader25 = enhancer19.getClassLoader();
        enhancer13.setClassLoader(classLoader25);
        enhancer2.setClassLoader(classLoader25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class28 = org.mockito.cglib.core.ReflectUtils.defineClass("Lorg/mockito/cglib/core/Signature;", byteArray1, classLoader25);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(callbackArray9);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.toString();
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray28);
        java.lang.Class[] classArray30 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray28);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.util.List list32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass20, classArray30, list32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "I" + "'", str26, "I");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(I)I" + "'", str29, "(I)I");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        enhancer1.setStrategy(generatorStrategy4);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        enhancer9.setNamingPolicy(namingPolicy22);
        boolean boolean27 = namingPolicy22.equals((java.lang.Object) 0.0d);
        enhancer1.setNamingPolicy(namingPolicy22);
        enhancer1.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer31.setUseFactory(false);
        enhancer31.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer39.setCallbacks(callbackArray46);
        enhancer39.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter51 = null;
        enhancer50.setCallbackFilter(callbackFilter51);
        java.lang.Class[] classArray53 = new java.lang.Class[] {};
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        enhancer50.setInterfaces(classArray53);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = enhancer56.getClassLoader();
        enhancer50.setClassLoader(classLoader62);
        enhancer39.setClassLoader(classLoader62);
        enhancer31.setClassLoader(classLoader62);
        enhancer1.setClassLoader(classLoader62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor67 = org.mockito.cglib.core.ReflectUtils.findConstructor("(I)Lava.beans.PropertyDescriptor[name=hi!;", classLoader62);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader62);
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        boolean boolean10 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list14 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass11, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        boolean boolean14 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;", "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer3.getStrategy();
        boolean boolean5 = signature2.equals((java.lang.Object) generatorStrategy4);
        org.mockito.cglib.core.ClassGenerator classGenerator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray7 = generatorStrategy4.generate(classGenerator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setName("D");
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer9.setCallbackFilter(callbackFilter10);
        java.lang.Class[] classArray12 = new java.lang.Class[] {};
        java.lang.String[] strArray13 = org.mockito.cglib.core.ReflectUtils.getNames(classArray12);
        enhancer9.setInterfaces(classArray12);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        java.lang.ClassLoader classLoader21 = enhancer15.getClassLoader();
        enhancer9.setClassLoader(classLoader21);
        enhancer9.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer25.setCallbackFilter(callbackFilter33);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader37 = enhancer25.getClassLoader();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        propertyDescriptor41.setShortDescription("J");
        java.lang.Class<?> wildcardClass44 = propertyDescriptor41.getPropertyType();
        java.lang.Class<?> wildcardClass45 = propertyDescriptor41.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass45);
        enhancer25.setSuperclass((java.lang.Class) wildcardClass45);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        enhancer49.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        enhancer49.setStrategy(generatorStrategy52);
        java.lang.Class[] classArray54 = new java.lang.Class[] {};
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        enhancer49.setInterfaces(classArray54);
        int int58 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        enhancer25.setInterfaces(classArray54);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        enhancer9.setInterfaces(classArray54);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        enhancer63.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer63.getNamingPolicy();
        enhancer62.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer62.setCallbacks(callbackArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj71 = enhancer0.create(classArray54, (java.lang.Object[]) callbackArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java/beans/PropertyDescriptor" + "'", str47, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(callbackArray69);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("C");
        int int3 = type1.getOpcode((int) (byte) 100);
        int int4 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 57);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 0);
        java.lang.String str55 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj6 = propertyDescriptor3.getValue("I");
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class<?> wildcardClass13 = classArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        boolean boolean15 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass13);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer17.setCallbackFilter(callbackFilter18);
        boolean boolean20 = enhancer17.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer17.getNamingPolicy();
        enhancer17.setUseFactory(false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str25 = type24.getClassName();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer26.setUseFactory(false);
        enhancer26.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.Callback callback40 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray41 = new org.mockito.cglib.proxy.Callback[] { callback40 };
        enhancer34.setCallbacks(callbackArray41);
        enhancer34.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer45.setCallbackFilter(callbackFilter46);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        enhancer45.setInterfaces(classArray48);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer52.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy55);
        java.lang.ClassLoader classLoader57 = enhancer51.getClassLoader();
        enhancer45.setClassLoader(classLoader57);
        enhancer34.setClassLoader(classLoader57);
        enhancer26.setClassLoader(classLoader57);
        boolean boolean61 = type24.equals((java.lang.Object) enhancer26);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        enhancer62.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        enhancer62.setStrategy(generatorStrategy65);
        boolean boolean67 = enhancer62.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy71 = null;
        enhancer68.setStrategy(generatorStrategy71);
        boolean boolean73 = enhancer68.getUseCache();
        org.mockito.cglib.proxy.Callback callback74 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray75 = new org.mockito.cglib.proxy.Callback[] { callback74 };
        enhancer68.setCallbacks(callbackArray75);
        enhancer62.setCallbacks(callbackArray75);
        enhancer26.setCallbacks(callbackArray75);
        enhancer17.setCallbacks(callbackArray75);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass13, callbackArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[Ljava/lang/Class;" + "'", str16, "[Ljava/lang/Class;");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "char" + "'", str25, "char");
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(callbackArray41);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(callbackArray75);
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean10 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        boolean boolean14 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor2 = org.mockito.cglib.core.ReflectUtils.findConstructor("C", classLoader1);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        boolean boolean9 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = signature15.equals((java.lang.Object) type16);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        boolean boolean21 = signature15.equals((java.lang.Object) classArray18);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray18);
        int int23 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray22);
        org.mockito.cglib.proxy.Callback callback24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, classArray22, callback24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str10, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(classArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Callback callback13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, callback13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str12, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        int int16 = type0.getSize();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        boolean boolean28 = type0.equals((java.lang.Object) type27);
        java.lang.String str29 = type27.toString();
        int int30 = type27.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str29, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        java.lang.Class class0 = null;
        java.lang.Class[] classArray1 = new java.lang.Class[] {};
        int int2 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray1);
        java.lang.Class[] classArray3 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray1);
        int int4 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str7 = type6.toString();
        boolean boolean9 = type6.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str11 = type10.toString();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.Type[] typeArray14 = new org.mockito.asm.Type[] { type12 };
        java.lang.String str15 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray14);
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type6, typeArray14);
        java.lang.String str17 = signature16.toString();
        org.mockito.asm.Type[] typeArray18 = signature16.getArgumentTypes();
        org.mockito.asm.Type type19 = signature16.getReturnType();
        java.lang.String str20 = signature16.getName();
        java.lang.String str21 = signature16.getDescriptor();
        org.mockito.asm.Type[] typeArray22 = signature16.getArgumentTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = org.mockito.cglib.core.ReflectUtils.newInstance(class0, classArray3, (java.lang.Object[]) typeArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "J" + "'", str7, "J");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "I" + "'", str13, "I");
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(I)J" + "'", str15, "(I)J");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str17, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str20, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(I)J" + "'", str21, "(I)J");
        org.junit.Assert.assertNotNull(typeArray22);
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        int int51 = methodInfo50.getModifiers();
        java.lang.String str52 = methodInfo50.toString();
        org.mockito.cglib.core.Signature signature53 = methodInfo50.getSignature();
        java.lang.String str54 = signature53.getDescriptor();
        java.lang.String str55 = signature53.getDescriptor();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str52, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        boolean boolean26 = enhancer12.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class27 = enhancer12.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        int int2 = type1.getDimensions();
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getName();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor6.getPropertyType();
        boolean boolean9 = type1.equals((java.lang.Object) propertyDescriptor6);
        java.lang.String str10 = propertyDescriptor6.getDisplayName();
        java.lang.String str11 = propertyDescriptor6.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str11, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        boolean boolean27 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.asm.ClassVisitor classVisitor34 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("int", "Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = null;
        enhancer4.setStrategy(generatorStrategy7);
        boolean boolean9 = enhancer4.getUseCache();
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer4.setCallbacks(callbackArray11);
        enhancer4.setUseCache(true);
        boolean boolean15 = type3.equals((java.lang.Object) enhancer4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = enhancer4.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list12 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass7, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str9, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        boolean boolean14 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setBound(false);
        java.lang.String str17 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; displayName=(I)J]" + "'", str17, "java.beans.PropertyDescriptor[name=hi!; displayName=(I)J]");
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.lang.Object obj15 = propertyDescriptor3.getValue("Ljava/beans/PropertyDescriptor;");
        boolean boolean16 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("I");
        propertyDescriptor3.setShortDescription("long");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type type53 = signature52.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = type53.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(type53);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("J", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        java.util.Enumeration<java.lang.String> strEnumeration5 = propertyDescriptor3.attributeNames();
        boolean boolean6 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "J" + "'", str4, "J");
        org.junit.Assert.assertNotNull(strEnumeration5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer30.setUseFactory(false);
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer38.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer49.setCallbackFilter(callbackFilter50);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        enhancer49.setInterfaces(classArray52);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = enhancer55.getClassLoader();
        enhancer49.setClassLoader(classLoader61);
        enhancer38.setClassLoader(classLoader61);
        enhancer30.setClassLoader(classLoader61);
        enhancer0.setClassLoader(classLoader61);
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("hi!", method67, method68);
        propertyDescriptor69.setShortDescription("J");
        java.lang.Class<?> wildcardClass72 = propertyDescriptor69.getPropertyType();
        java.lang.Class<?> wildcardClass73 = propertyDescriptor69.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.cglib.core.ClassInfo classInfo75 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass73);
        java.lang.String str77 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass73);
        java.lang.Class[] classArray82 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method83 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass73, "Lva/beans/FeatureDescriptor;", classArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: Lva/beans/FeatureDescriptor;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(classInfo75);
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java/beans/PropertyDescriptor" + "'", str77, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(type79);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 10);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.ClassInfo classInfo56 = methodInfo55.getClassInfo();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        boolean boolean68 = classInfo56.equals((java.lang.Object) wildcardClass64);
        org.mockito.asm.Type type69 = classInfo56.getSuperType();
        java.lang.String str70 = type69.getClassName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java.beans.FeatureDescriptor" + "'", str70, "java.beans.FeatureDescriptor");
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean11 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer12.setInterfaces(classArray17);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer12.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy21);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str27 = type26.toString();
        boolean boolean29 = type26.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str31 = type30.toString();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.toString();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type32 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray34);
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type26, typeArray34);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy40 = null;
        enhancer37.setStrategy(generatorStrategy40);
        boolean boolean42 = enhancer37.getUseCache();
        org.mockito.cglib.proxy.Callback callback43 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray44 = new org.mockito.cglib.proxy.Callback[] { callback43 };
        enhancer37.setCallbacks(callbackArray44);
        enhancer37.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback48 = null;
        enhancer37.setCallback(callback48);
        boolean boolean50 = signature36.equals((java.lang.Object) enhancer37);
        java.lang.String str51 = signature36.getName();
        java.lang.Class<?> wildcardClass52 = signature36.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str54 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass52);
        org.mockito.cglib.core.Predicate predicate57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = namingPolicy21.getClassName("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J", (java.lang.Object) propertyDescriptorArray56, predicate57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "J" + "'", str27, "J");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "J" + "'", str31, "J");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "I" + "'", str33, "I");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(I)J" + "'", str35, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(callbackArray44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str51, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str54, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str55, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray14 = null;
        org.mockito.cglib.proxy.Callback callback15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, classArray14, callback15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        enhancer1.setUseCache(true);
        java.lang.ClassLoader classLoader6 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method7 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; expert]", classLoader6);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader6);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str11 = type10.toString();
        boolean boolean13 = type10.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str15 = type14.toString();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str17 = type16.toString();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type16 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray18);
        org.mockito.cglib.core.Signature signature20 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type10, typeArray18);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        enhancer21.setStrategy(generatorStrategy24);
        boolean boolean26 = enhancer21.getUseCache();
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer21.setCallbacks(callbackArray28);
        enhancer21.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback32 = null;
        enhancer21.setCallback(callback32);
        boolean boolean34 = signature20.equals((java.lang.Object) enhancer21);
        java.lang.String str35 = signature20.getName();
        java.lang.Class<?> wildcardClass36 = signature20.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.cglib.core.Predicate predicate41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = namingPolicy6.getClassName("java.beans.PropertyDescriptor[name=(I)I; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor]", (java.lang.Object) wildcardClass36, predicate41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "J" + "'", str15, "J");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "I" + "'", str17, "I");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(I)J" + "'", str19, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str35, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str38, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str39, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type40);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 10);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.ClassInfo classInfo56 = methodInfo55.getClassInfo();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        boolean boolean68 = classInfo56.equals((java.lang.Object) wildcardClass64);
        org.mockito.cglib.proxy.Callback callback69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass64, callback69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; expert]");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        enhancer2.setStrategy(generatorStrategy5);
        java.lang.Class[] classArray7 = new java.lang.Class[] {};
        java.lang.String[] strArray8 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray7);
        enhancer2.setInterfaces(classArray7);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer2.getNamingPolicy();
        boolean boolean12 = type1.equals((java.lang.Object) namingPolicy11);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer11.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer25.setCallbackFilter(callbackFilter33);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader37 = enhancer25.getClassLoader();
        enhancer11.setClassLoader(classLoader37);
        enhancer0.setClassLoader(classLoader37);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer0.setCallbackFilter(callbackFilter42);
        org.mockito.asm.ClassVisitor classVisitor44 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader37);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0}; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.String str2 = type1.toString();
        java.lang.String str3 = type1.getClassName();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        boolean boolean17 = type1.equals((java.lang.Object) propertyDescriptorArray16);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str2, "Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ava.beans.PropertyDescriptor[name=hi!" + "'", str3, "ava.beans.PropertyDescriptor[name=hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer1.setCallbackFilter(callbackFilter9);
        enhancer1.setUseCache(false);
        java.lang.ClassLoader classLoader13 = enhancer1.getClassLoader();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.lang.String str23 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass21);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = null;
        enhancer25.setStrategy(generatorStrategy28);
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        enhancer25.setInterfaces(classArray30);
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        enhancer1.setInterfaces(classArray30);
        int int36 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        int int37 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray30);
        org.mockito.cglib.proxy.Callback callback38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = org.mockito.cglib.proxy.Enhancer.create(class0, classArray30, callback38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java/beans/PropertyDescriptor" + "'", str23, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.reflect.Method method18 = propertyDescriptor17.getReadMethod();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setHidden(false);
        boolean boolean22 = propertyDescriptor17.isHidden();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor17.getPropertyType();
        propertyDescriptor17.setExpert(true);
        propertyDescriptor17.setExpert(true);
        boolean boolean31 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setBound(true);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        propertyDescriptor17.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray46);
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray48);
        propertyDescriptor3.setShortDescription("I(I)I");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass54 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(I)J" + "'", str13, "(I)J");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertNull(wildcardClass54);
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("float");
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.reflect.Method method22 = propertyDescriptor21.getReadMethod();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor21.getPropertyEditorClass();
        propertyDescriptor21.setHidden(false);
        java.lang.String str26 = propertyDescriptor21.getName();
        propertyDescriptor21.setShortDescription("hi!");
        boolean boolean29 = propertyDescriptor21.isPreferred();
        propertyDescriptor3.setValue("", (java.lang.Object) boolean29);
        boolean boolean31 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean33 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("float");
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj17 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=java.beans.PropertyDescriptor[name=hi!; values={J=I}]]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 10, (byte) 100 };
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer7.setCallbackFilter(callbackFilter15);
        boolean boolean17 = enhancer7.getUseCache();
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer20.getStrategy();
        enhancer20.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader24 = enhancer20.getClassLoader();
        enhancer7.setClassLoader(classLoader24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class26 = org.mockito.cglib.core.ReflectUtils.defineClass("S", byteArray6, classLoader24);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 1, 0, 10, 100]");
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(classLoader24);
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setValue("float", (java.lang.Object) 8);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setDisplayName("va.beans.PropertyDescriptor");
        java.lang.reflect.Method method26 = propertyDescriptor12.getReadMethod();
        boolean boolean27 = propertyDescriptor12.isExpert();
        boolean boolean28 = propertyDescriptor12.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        java.lang.String str12 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray13 = classInfo8.getInterfaces();
        java.lang.String str14 = classInfo8.toString();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor" + "'", str12, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor" + "'", str14, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer7.setCallbacks(callbackArray14);
        enhancer1.setCallbacks(callbackArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer1.getNamingPolicy();
        java.lang.ClassLoader classLoader18 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method19 = org.mockito.cglib.core.ReflectUtils.findMethod("I(I)J", classLoader18);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader18);
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer1.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader16 = enhancer1.getClassLoader();
        java.lang.ClassLoader classLoader17 = enhancer1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer1.getNamingPolicy();
        java.lang.Class[] classArray19 = null;
        enhancer1.setInterfaces(classArray19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer1.setCallbackFilter(callbackFilter21);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer23.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer32.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy35);
        enhancer23.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer23.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        enhancer39.setStrategy(generatorStrategy42);
        boolean boolean44 = enhancer39.getUseCache();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer39.setCallbacks(callbackArray46);
        enhancer23.setCallbacks(callbackArray46);
        enhancer1.setCallbacks(callbackArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks(class0, callbackArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(callbackArray46);
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        enhancer13.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer13.setInterfaces(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer13.getStrategy();
        enhancer13.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer13.setCallback(callback26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy33);
        enhancer28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer28.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer28.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer47.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy50);
        enhancer45.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter53 = null;
        enhancer45.setCallbackFilter(callbackFilter53);
        enhancer45.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature59 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = signature59.equals((java.lang.Object) type60);
        java.lang.Class[] classArray62 = new java.lang.Class[] {};
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        boolean boolean65 = signature59.equals((java.lang.Object) classArray62);
        java.lang.String[] strArray66 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        enhancer45.setInterfaces(classArray62);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray62);
        boolean boolean69 = namingPolicy43.equals((java.lang.Object) classArray62);
        org.mockito.cglib.proxy.Callback callback70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj71 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, classArray62, callback70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        int int12 = classInfo8.getModifiers();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        propertyDescriptor16.setShortDescription("va.beans.PropertyDescriptor");
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer23.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer23.setCallbackFilter(callbackFilter31);
        enhancer23.setUseCache(false);
        java.lang.ClassLoader classLoader35 = enhancer23.getClassLoader();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("hi!", method57, method58);
        propertyDescriptor59.setShortDescription("J");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor59.getPropertyType();
        java.lang.Class<?> wildcardClass63 = propertyDescriptor59.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass55, wildcardClass63 };
        java.lang.String[] strArray68 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        int int69 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray67);
        java.lang.reflect.Constructor constructor70 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass43, classArray67);
        org.mockito.cglib.core.MethodInfo methodInfo71 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor70);
        org.mockito.cglib.core.Signature signature72 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor70);
        propertyDescriptor16.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; preferred]", (java.lang.Object) constructor70);
        boolean boolean74 = classInfo8.equals((java.lang.Object) propertyDescriptor16);
        boolean boolean75 = propertyDescriptor16.isExpert();
        boolean boolean76 = propertyDescriptor16.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str47, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(constructor70);
        org.junit.Assert.assertNotNull(methodInfo71);
        org.junit.Assert.assertNotNull(signature72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer0.setCallback(callback4);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = null;
        enhancer7.setStrategy(generatorStrategy10);
        boolean boolean12 = enhancer7.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        enhancer13.setStrategy(generatorStrategy16);
        boolean boolean18 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Callback callback19 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray20 = new org.mockito.cglib.proxy.Callback[] { callback19 };
        enhancer13.setCallbacks(callbackArray20);
        enhancer7.setCallbacks(callbackArray20);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray23 = generatorStrategy6.generate((org.mockito.cglib.core.ClassGenerator) enhancer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(callbackArray20);
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setShortDescription("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        java.lang.Class<?> wildcardClass32 = namingPolicy29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class35 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Callback callback10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, callback10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getName();
        boolean boolean16 = propertyDescriptor14.isHidden();
        java.lang.String str17 = propertyDescriptor14.getName();
        propertyDescriptor14.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer21.setUseFactory(false);
        enhancer21.setInterceptDuringConstruction(true);
        propertyDescriptor14.setValue("(FIDCCJ)I", (java.lang.Object) enhancer21);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer21.setCallbackFilter(callbackFilter30);
        boolean boolean32 = generatorStrategy10.equals((java.lang.Object) callbackFilter30);
        boolean boolean34 = generatorStrategy10.equals((java.lang.Object) 10L);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        boolean boolean42 = propertyDescriptor38.isPreferred();
        propertyDescriptor38.setHidden(true);
        java.lang.Class<?> wildcardClass45 = propertyDescriptor38.getPropertyEditorClass();
        java.lang.reflect.Method method46 = null;
        propertyDescriptor38.setWriteMethod(method46);
        propertyDescriptor38.setDisplayName("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.lang.String str50 = propertyDescriptor38.getDisplayName();
        java.lang.reflect.Method method51 = null;
        propertyDescriptor38.setWriteMethod(method51);
        boolean boolean53 = generatorStrategy10.equals((java.lang.Object) method51);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]" + "'", str50, "java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str3, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java/beans/FeatureDescriptor" + "'", str4, "java/beans/FeatureDescriptor");
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setValue("float", (java.lang.Object) 8);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setDisplayName("va.beans.PropertyDescriptor");
        java.lang.reflect.Method method26 = propertyDescriptor12.getReadMethod();
        java.lang.reflect.Method method27 = propertyDescriptor12.getWriteMethod();
        boolean boolean28 = propertyDescriptor12.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy34);
        enhancer29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer38.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy41);
        enhancer29.setNamingPolicy(namingPolicy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer29.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = null;
        enhancer45.setStrategy(generatorStrategy48);
        boolean boolean50 = enhancer45.getUseCache();
        org.mockito.cglib.proxy.Callback callback51 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray52 = new org.mockito.cglib.proxy.Callback[] { callback51 };
        enhancer45.setCallbacks(callbackArray52);
        enhancer29.setCallbacks(callbackArray52);
        enhancer0.setCallbacks(callbackArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class56 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(callbackArray52);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list19 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass11, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(classInfo17);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer12.getNamingPolicy();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str31 = type30.toString();
        boolean boolean33 = type30.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str35 = type34.toString();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str37 = type36.toString();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type36 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray38);
        org.mockito.cglib.core.Signature signature40 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type30, typeArray38);
        java.lang.String str41 = signature40.getName();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer44.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy47);
        enhancer42.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer42.setCallbackFilter(callbackFilter50);
        enhancer42.setUseCache(false);
        java.lang.ClassLoader classLoader54 = enhancer42.getClassLoader();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("hi!", method56, method57);
        propertyDescriptor58.setShortDescription("J");
        java.lang.Class<?> wildcardClass61 = propertyDescriptor58.getPropertyType();
        java.lang.Class<?> wildcardClass62 = propertyDescriptor58.getClass();
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        enhancer42.setSuperclass((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass62);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass62);
        boolean boolean68 = signature40.equals((java.lang.Object) propertyDescriptorArray67);
        org.mockito.cglib.core.Predicate predicate69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = namingPolicy26.getClassName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;=Lva/beans/PropertyDescriptor;}]", "java.beans.PropertyDescriptor[name=hi!; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V=java.beans.PropertyDescriptor[name=hi!; displayName=D]}]", (java.lang.Object) propertyDescriptorArray67, predicate69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "J" + "'", str31, "J");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "J" + "'", str35, "J");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "I" + "'", str37, "I");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(I)J" + "'", str39, "(I)J");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str41, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader54);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer30.setUseFactory(false);
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer38.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer49.setCallbackFilter(callbackFilter50);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        enhancer49.setInterfaces(classArray52);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = enhancer55.getClassLoader();
        enhancer49.setClassLoader(classLoader61);
        enhancer38.setClassLoader(classLoader61);
        enhancer30.setClassLoader(classLoader61);
        enhancer0.setClassLoader(classLoader61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer0.getStrategy();
        boolean boolean68 = generatorStrategy66.equals((java.lang.Object) (byte) 0);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        enhancer69.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = null;
        enhancer69.setStrategy(generatorStrategy72);
        enhancer69.setUseFactory(false);
        java.lang.ClassLoader classLoader76 = enhancer69.getClassLoader();
        enhancer69.setUseFactory(true);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray79 = generatorStrategy66.generate((org.mockito.cglib.core.ClassGenerator) enhancer69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(classLoader76);
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        org.mockito.asm.Type type22 = type21.getElementType();
        int int24 = type21.getOpcode((int) (byte) 0);
        java.lang.String str25 = type21.getInternalName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java/beans/PropertyDescriptor" + "'", str25, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        org.mockito.cglib.core.Signature signature52 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray53 = methodInfo50.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo54 = methodInfo50.getClassInfo();
        org.mockito.asm.Type type55 = classInfo54.getType();
        int int56 = type55.getSort();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setName("(I)J");
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        propertyDescriptor3.setDisplayName("(I)B");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(method8);
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 1);
        java.lang.Object obj54 = null;
        boolean boolean55 = methodInfo53.equals(obj54);
        org.mockito.cglib.core.ClassInfo classInfo56 = methodInfo53.getClassInfo();
        java.lang.String str57 = methodInfo53.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str57, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(true);
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer7.setCallbackFilter(callbackFilter15);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader19 = enhancer7.getClassLoader();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        propertyDescriptor23.setShortDescription("J");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor23.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        enhancer7.setSuperclass((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        boolean boolean33 = generatorStrategy6.equals((java.lang.Object) wildcardClass27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass27);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java/beans/PropertyDescriptor" + "'", str29, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lava.beans.PropertyDescriptor[name=hi!;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Callback callback32 = null;
        enhancer0.setCallback(callback32);
        java.lang.Class[] classArray34 = null;
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer35.getClassLoader();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        org.mockito.cglib.core.ClassInfo classInfo56 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass55);
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        propertyDescriptor71.setShortDescription("J");
        java.lang.Class<?> wildcardClass74 = propertyDescriptor71.getPropertyType();
        java.lang.Class<?> wildcardClass75 = propertyDescriptor71.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass67, wildcardClass75 };
        java.lang.String[] strArray80 = org.mockito.cglib.core.ReflectUtils.getNames(classArray79);
        int int81 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray79);
        java.lang.reflect.Constructor constructor82 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass55, classArray79);
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = enhancer0.create(classArray34, (java.lang.Object[]) propertyDescriptorArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str59, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(constructor82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        enhancer2.setStrategy(generatorStrategy5);
        boolean boolean7 = enhancer2.getUseCache();
        enhancer2.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        enhancer10.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        enhancer10.setNamingPolicy(namingPolicy23);
        boolean boolean28 = namingPolicy23.equals((java.lang.Object) 0.0d);
        enhancer2.setNamingPolicy(namingPolicy23);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer32.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy35);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        boolean boolean41 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setHidden(false);
        propertyDescriptor40.setDisplayName("(I)J");
        java.lang.reflect.Method method46 = null;
        propertyDescriptor40.setWriteMethod(method46);
        propertyDescriptor40.setPreferred(false);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor40.getPropertyType();
        propertyDescriptor40.setExpert(true);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        propertyDescriptor57.setShortDescription("J");
        java.lang.Class<?> wildcardClass60 = propertyDescriptor57.getPropertyType();
        java.lang.Class<?> wildcardClass61 = propertyDescriptor57.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        propertyDescriptor40.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        enhancer2.setSuperclass((java.lang.Class) wildcardClass61);
        boolean boolean70 = type1.equals((java.lang.Object) wildcardClass61);
        org.mockito.cglib.proxy.Callback callback71 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass61, callback71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lorg/mockito/cglib/core/ReflectUtils$3;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer9.setUseFactory(false);
        enhancer9.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer17.setCallbacks(callbackArray24);
        enhancer17.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer28.setCallbackFilter(callbackFilter29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        enhancer28.setInterfaces(classArray31);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = enhancer34.getClassLoader();
        enhancer28.setClassLoader(classLoader40);
        enhancer17.setClassLoader(classLoader40);
        enhancer9.setClassLoader(classLoader40);
        enhancer1.setClassLoader(classLoader40);
        enhancer1.setUseFactory(true);
        boolean boolean47 = enhancer1.getUseCache();
        java.lang.ClassLoader classLoader48 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor49 = org.mockito.cglib.core.ReflectUtils.findConstructor("LI(I)I;", classLoader48);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->LI");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(classLoader48);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type26 = classInfo25.getType();
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        propertyDescriptor30.setShortDescription("J");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor30.getPropertyType();
        boolean boolean34 = propertyDescriptor30.isPreferred();
        propertyDescriptor30.setHidden(true);
        propertyDescriptor30.setHidden(false);
        java.lang.reflect.Method method39 = null;
        propertyDescriptor30.setReadMethod(method39);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = null;
        enhancer41.setStrategy(generatorStrategy44);
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        enhancer41.setInterfaces(classArray46);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer41.getNamingPolicy();
        java.beans.PropertyEditor propertyEditor51 = propertyDescriptor30.createPropertyEditor((java.lang.Object) namingPolicy50);
        boolean boolean52 = type26.equals((java.lang.Object) namingPolicy50);
        org.mockito.asm.Type type53 = type26.getElementType();
        java.lang.String str54 = type26.getInternalName();
        java.lang.String str55 = type26.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNull(propertyEditor51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java/beans/PropertyDescriptor" + "'", str54, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str55, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        java.lang.Class<?> wildcardClass19 = generatorStrategy18.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray20 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass19);
        org.mockito.cglib.proxy.Callback[] callbackArray21 = new org.mockito.cglib.proxy.Callback[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass19, callbackArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.DefaultGeneratorStrategy is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(propertyDescriptorArray20);
        org.junit.Assert.assertNotNull(callbackArray21);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = null;
        enhancer9.setStrategy(generatorStrategy12);
        boolean boolean14 = enhancer9.getUseCache();
        enhancer9.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        enhancer17.setNamingPolicy(namingPolicy30);
        boolean boolean35 = namingPolicy30.equals((java.lang.Object) 0.0d);
        enhancer9.setNamingPolicy(namingPolicy30);
        enhancer9.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer46.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy49);
        enhancer44.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer44.setCallbackFilter(callbackFilter52);
        enhancer44.setUseCache(false);
        java.lang.ClassLoader classLoader56 = enhancer44.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer44.getStrategy();
        enhancer9.setStrategy(generatorStrategy57);
        propertyDescriptor3.setValue("(I)F", (java.lang.Object) enhancer9);
        java.lang.ClassLoader classLoader60 = enhancer9.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter61 = null;
        enhancer9.setCallbackFilter(callbackFilter61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class63 = enhancer9.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(classLoader56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        org.mockito.asm.Type type0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer1.setCallbackFilter(callbackFilter9);
        enhancer1.setUseCache(false);
        java.lang.ClassLoader classLoader13 = enhancer1.getClassLoader();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass21);
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        propertyDescriptor29.setShortDescription("J");
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyType();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor29.getClass();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass33, wildcardClass41 };
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        java.lang.reflect.Constructor constructor48 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray45);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor48);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor48);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str25, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(constructor48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        enhancer1.setStrategy(generatorStrategy4);
        boolean boolean6 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Callback callback7 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray8 = new org.mockito.cglib.proxy.Callback[] { callback7 };
        enhancer1.setCallbacks(callbackArray8);
        enhancer1.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer12.setCallbackFilter(callbackFilter20);
        enhancer12.setUseCache(false);
        java.lang.ClassLoader classLoader24 = enhancer12.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer12.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer26.getClassLoader();
        enhancer12.setClassLoader(classLoader38);
        enhancer1.setClassLoader(classLoader38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method41 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]", classLoader38);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(callbackArray8);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader24);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = classInfo9.getType();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str13 = type12.toString();
        boolean boolean15 = type12.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str17 = type16.toString();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.toString();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type18 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray20);
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type12, typeArray20);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        enhancer23.setStrategy(generatorStrategy26);
        boolean boolean28 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.Callback callback29 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray30 = new org.mockito.cglib.proxy.Callback[] { callback29 };
        enhancer23.setCallbacks(callbackArray30);
        enhancer23.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer23.setCallback(callback34);
        boolean boolean36 = signature22.equals((java.lang.Object) enhancer23);
        java.lang.String str37 = signature22.getName();
        java.lang.Class<?> wildcardClass38 = signature22.getClass();
        boolean boolean39 = classInfo9.equals((java.lang.Object) wildcardClass38);
        boolean boolean40 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        java.util.List list42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list43 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass38, list42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "J" + "'", str13, "J");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "J" + "'", str17, "J");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "I" + "'", str19, "I");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(I)J" + "'", str21, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(callbackArray30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str37, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("int");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer15.setCallbacks(callbackArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer15.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer15.setCallbackFilter(callbackFilter25);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = signature29.equals((java.lang.Object) type30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        boolean boolean35 = signature29.equals((java.lang.Object) classArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        enhancer15.setInterfaces(classArray36);
        enhancer11.setInterfaces(classArray36);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.ClassLoader classLoader13 = null;
        enhancer0.setClassLoader(classLoader13);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer0.setCallbackFilter(callbackFilter17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = enhancer0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader20 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(generatorStrategy19);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer35.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer35.getStrategy();
        enhancer0.setStrategy(generatorStrategy48);
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = signature52.equals((java.lang.Object) type53);
        java.lang.Class[] classArray55 = new java.lang.Class[] {};
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        boolean boolean58 = signature52.equals((java.lang.Object) classArray55);
        java.lang.String str59 = signature52.toString();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        org.mockito.cglib.core.ClassInfo classInfo68 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type[] typeArray69 = classInfo68.getInterfaces();
        boolean boolean70 = signature52.equals((java.lang.Object) classInfo68);
        boolean boolean71 = generatorStrategy48.equals((java.lang.Object) classInfo68);
        java.lang.reflect.Method method73 = null;
        java.lang.reflect.Method method74 = null;
        java.beans.PropertyDescriptor propertyDescriptor75 = new java.beans.PropertyDescriptor("hi!", method73, method74);
        java.lang.Class<?> wildcardClass76 = propertyDescriptor75.getPropertyType();
        boolean boolean77 = propertyDescriptor75.isExpert();
        java.lang.Object obj79 = propertyDescriptor75.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        boolean boolean80 = propertyDescriptor75.isHidden();
        boolean boolean81 = generatorStrategy48.equals((java.lang.Object) propertyDescriptor75);
        java.lang.reflect.Method method82 = null;
        propertyDescriptor75.setReadMethod(method82);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(classInfo68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer0.setCallback(callback26);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy33);
        enhancer28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer28.setCallbackFilter(callbackFilter36);
        enhancer28.setUseCache(false);
        java.lang.ClassLoader classLoader40 = enhancer28.getClassLoader();
        enhancer0.setClassLoader(classLoader40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class42 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(classLoader40);
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 100, (byte) 0, (byte) -1 };
        java.lang.ClassLoader classLoader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class7 = org.mockito.cglib.core.ReflectUtils.defineClass("B", byteArray5, classLoader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 100, 0, -1]");
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        org.mockito.asm.Type type20 = classInfo8.getType();
        org.mockito.asm.Type type21 = classInfo8.getSuperType();
        int int22 = classInfo8.getModifiers();
        org.mockito.asm.Type type23 = classInfo8.getSuperType();
        int int25 = type23.getOpcode(53);
        org.mockito.asm.Type type26 = type23.getElementType();
        java.lang.String str27 = type23.getDescriptor();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 57 + "'", int25 == 57);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str27, "Ljava/beans/FeatureDescriptor;");
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer22.setCallbackFilter(callbackFilter23);
        boolean boolean25 = enhancer22.getAttemptLoad();
        enhancer22.setAttemptLoad(false);
        boolean boolean28 = enhancer22.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer29.setCallbackFilter(callbackFilter30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        enhancer29.setInterfaces(classArray32);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer44.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy47);
        enhancer35.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader50 = enhancer35.getClassLoader();
        enhancer29.setClassLoader(classLoader50);
        enhancer22.setClassLoader(classLoader50);
        boolean boolean53 = classInfo8.equals((java.lang.Object) enhancer22);
        org.mockito.asm.Type type54 = classInfo8.getType();
        org.mockito.asm.Type type55 = type54.getElementType();
        int int56 = type54.getSize();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        int int2 = type0.getOpcode(8);
        int int4 = type0.getOpcode(108);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.cglib.core.Signature signature10 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = signature10.equals((java.lang.Object) type11);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        boolean boolean20 = type11.equals((java.lang.Object) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str24 = type23.toString();
        boolean boolean26 = type23.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str28 = type27.toString();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.toString();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray31);
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type23, typeArray31);
        org.mockito.asm.Type type34 = signature33.getReturnType();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str36 = type35.toString();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.toString();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type37 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray39);
        org.mockito.cglib.core.Signature signature41 = new org.mockito.cglib.core.Signature("float", type34, typeArray39);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray39);
        org.mockito.cglib.core.Signature signature43 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", type7, typeArray39);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str45 = type44.toString();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("I");
        org.mockito.asm.Type[] typeArray49 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray49);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray49);
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("I", type7, typeArray49);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray49);
        int int55 = type0.getOpcode((int) '4');
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 108 + "'", int4 == 108);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "J" + "'", str24, "J");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "J" + "'", str28, "J");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "I" + "'", str30, "I");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(I)J" + "'", str32, "(I)J");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "J" + "'", str36, "J");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "I" + "'", str38, "I");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(I)J" + "'", str40, "(I)J");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(I)F" + "'", str42, "(I)F");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "I" + "'", str45, "I");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(I)LI;" + "'", str50, "(I)LI;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(I)I" + "'", str51, "(I)I");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(I)S" + "'", str53, "(I)S");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("void");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        java.lang.String str20 = propertyDescriptor12.toString();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str20, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer2.setUseFactory(false);
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Callback callback16 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray17 = new org.mockito.cglib.proxy.Callback[] { callback16 };
        enhancer10.setCallbacks(callbackArray17);
        enhancer10.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer21.setCallbackFilter(callbackFilter22);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        enhancer21.setInterfaces(classArray24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = enhancer27.getClassLoader();
        enhancer21.setClassLoader(classLoader33);
        enhancer10.setClassLoader(classLoader33);
        enhancer2.setClassLoader(classLoader33);
        boolean boolean37 = type0.equals((java.lang.Object) enhancer2);
        enhancer2.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.asm.ClassVisitor classVisitor40 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer2.generateClass(classVisitor40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "char" + "'", str1, "char");
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(callbackArray17);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = null;
        enhancer10.setStrategy(generatorStrategy13);
        boolean boolean15 = enhancer10.getUseCache();
        enhancer10.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        enhancer18.setNamingPolicy(namingPolicy31);
        boolean boolean36 = namingPolicy31.equals((java.lang.Object) 0.0d);
        enhancer10.setNamingPolicy(namingPolicy31);
        enhancer10.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy43);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass52);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        enhancer10.setSuperclass((java.lang.Class) wildcardClass52);
        java.lang.ClassLoader classLoader60 = enhancer10.getClassLoader();
        enhancer0.setClassLoader(classLoader60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java/beans/PropertyDescriptor" + "'", str55, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(classLoader60);
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray18 = null;
        enhancer0.setInterfaces(classArray18);
        java.lang.ClassLoader classLoader20 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class23 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader20);
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer17.setCallbacks(callbackArray24);
        enhancer11.setCallbacks(callbackArray24);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer11.getNamingPolicy();
        boolean boolean28 = classInfo8.equals((java.lang.Object) enhancer11);
        org.mockito.asm.ClassVisitor classVisitor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer11.generateClass(classVisitor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(true);
        boolean boolean9 = propertyDescriptor3.isPreferred();
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        boolean boolean11 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer24.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy27);
        enhancer15.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader30 = enhancer15.getClassLoader();
        java.lang.ClassLoader classLoader31 = enhancer15.getClassLoader();
        enhancer0.setClassLoader(classLoader31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(I)J");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        java.lang.String str5 = propertyDescriptor3.getShortDescription();
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setShortDescription("L(I)Lava.beans.PropertyDescriptor[name=hi!;;");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.lang.Object obj15 = propertyDescriptor3.getValue("Ljava/beans/PropertyDescriptor;");
        boolean boolean16 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 10);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature52 = methodInfo51.getSignature();
        org.mockito.asm.Type[] typeArray53 = signature52.getArgumentTypes();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = classInfo9.getType();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str13 = type12.toString();
        boolean boolean15 = type12.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str17 = type16.toString();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.toString();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type18 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray20);
        org.mockito.cglib.core.Signature signature22 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type12, typeArray20);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = null;
        enhancer23.setStrategy(generatorStrategy26);
        boolean boolean28 = enhancer23.getUseCache();
        org.mockito.cglib.proxy.Callback callback29 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray30 = new org.mockito.cglib.proxy.Callback[] { callback29 };
        enhancer23.setCallbacks(callbackArray30);
        enhancer23.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer23.setCallback(callback34);
        boolean boolean36 = signature22.equals((java.lang.Object) enhancer23);
        java.lang.String str37 = signature22.getName();
        java.lang.Class<?> wildcardClass38 = signature22.getClass();
        boolean boolean39 = classInfo9.equals((java.lang.Object) wildcardClass38);
        boolean boolean40 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass38);
        java.beans.PropertyDescriptor[] propertyDescriptorArray41 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass38);
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        propertyDescriptor45.setShortDescription("J");
        java.lang.Class<?> wildcardClass48 = propertyDescriptor45.getPropertyType();
        java.lang.Class<?> wildcardClass49 = propertyDescriptor45.getClass();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        propertyDescriptor53.setShortDescription("J");
        java.lang.Class<?> wildcardClass56 = propertyDescriptor53.getPropertyType();
        java.lang.Class<?> wildcardClass57 = propertyDescriptor53.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.lang.Class[] classArray61 = new java.lang.Class[] { wildcardClass49, wildcardClass57 };
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        int int63 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray61);
        int int64 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray61);
        int int65 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray61);
        java.lang.Class[] classArray66 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray61);
        org.mockito.cglib.proxy.Callback callback67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass38, classArray61, callback67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "J" + "'", str13, "J");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "J" + "'", str17, "J");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "I" + "'", str19, "I");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(I)J" + "'", str21, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(callbackArray30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str37, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray41);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(classArray66);
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("F", method1, method2);
        propertyDescriptor3.setBound(false);
        boolean boolean6 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("I");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Callback callback8 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray9 = new org.mockito.cglib.proxy.Callback[] { callback8 };
        enhancer2.setCallbacks(callbackArray9);
        enhancer2.setSerialVersionUID((java.lang.Long) 1L);
        boolean boolean13 = enhancer2.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        enhancer14.setStrategy(generatorStrategy17);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        enhancer14.setInterfaces(classArray19);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer14.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy23);
        boolean boolean25 = type1.equals((java.lang.Object) namingPolicy23);
        int int26 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(callbackArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!]", "Ljava/beans/PropertyDescriptor;");
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.reflect.Method method7 = propertyDescriptor6.getReadMethod();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor6.getPropertyEditorClass();
        propertyDescriptor6.setHidden(false);
        boolean boolean11 = propertyDescriptor6.isHidden();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor6.getPropertyEditorClass();
        propertyDescriptor6.setName("java/beans/PropertyDescriptor");
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer16.setUseFactory(false);
        propertyDescriptor6.setValue("V", (java.lang.Object) false);
        java.util.Enumeration<java.lang.String> strEnumeration23 = propertyDescriptor6.attributeNames();
        boolean boolean24 = signature2.equals((java.lang.Object) strEnumeration23);
        java.lang.String str25 = signature2.getName();
        org.junit.Assert.assertNull(method7);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(strEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str25, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer1.setCallbackFilter(callbackFilter9);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        enhancer1.setClassLoader(classLoader23);
        enhancer1.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer1.getNamingPolicy();
        java.lang.ClassLoader classLoader28 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method29 = org.mockito.cglib.core.ReflectUtils.findMethod("hi!(I)Lava.beans.PropertyDescriptor[name=hi!;", classLoader28);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("org/mockito/cglib/core/ReflectUtils$3");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str14 = type13.toString();
        boolean boolean16 = type13.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.toString();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type19 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray21);
        org.mockito.cglib.core.Signature signature23 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type13, typeArray21);
        org.mockito.cglib.core.Predicate predicate24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = namingPolicy9.getClassName("I(I)I", "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!]; values={(I)F=java.beans.PropertyDescriptor}]", (java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={J=I}]", predicate24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "J" + "'", str14, "J");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "I" + "'", str20, "I");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(I)J" + "'", str22, "(I)J");
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str49 = methodInfo48.toString();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer52.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy55);
        enhancer50.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter58 = null;
        enhancer50.setCallbackFilter(callbackFilter58);
        enhancer50.setUseCache(false);
        java.lang.ClassLoader classLoader62 = enhancer50.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer50.getStrategy();
        boolean boolean64 = enhancer50.getAttemptLoad();
        java.lang.Class<?> wildcardClass65 = enhancer50.getClass();
        boolean boolean66 = methodInfo48.equals((java.lang.Object) wildcardClass65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method67 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.proxy.Enhancer is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str49, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        java.lang.reflect.Method method10 = propertyDescriptor9.getReadMethod();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor9.getPropertyEditorClass();
        propertyDescriptor9.setHidden(false);
        java.lang.String str14 = propertyDescriptor9.getName();
        java.lang.reflect.Method method15 = propertyDescriptor9.getReadMethod();
        java.lang.String str16 = propertyDescriptor9.getDisplayName();
        boolean boolean17 = propertyDescriptor9.isHidden();
        propertyDescriptor9.setPreferred(false);
        java.beans.PropertyEditor propertyEditor20 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor9);
        java.lang.String str21 = propertyDescriptor9.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(propertyEditor20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        java.lang.ClassLoader classLoader7 = enhancer1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer1.getNamingPolicy();
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        boolean boolean16 = enhancer11.getUseCache();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        enhancer27.setNamingPolicy(namingPolicy32);
        enhancer19.setNamingPolicy(namingPolicy32);
        boolean boolean37 = namingPolicy32.equals((java.lang.Object) 0.0d);
        enhancer11.setNamingPolicy(namingPolicy32);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer41.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy44);
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        propertyDescriptor49.setShortDescription("J");
        java.lang.Class<?> wildcardClass52 = propertyDescriptor49.getPropertyType();
        java.lang.Class<?> wildcardClass53 = propertyDescriptor49.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass53);
        java.lang.ClassLoader classLoader61 = enhancer11.getClassLoader();
        enhancer1.setClassLoader(classLoader61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method63 = org.mockito.cglib.core.ReflectUtils.findMethod("I", classLoader61);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader7);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java/beans/PropertyDescriptor" + "'", str56, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java/beans/PropertyDescriptor" + "'", str57, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        boolean boolean13 = propertyDescriptor3.equals((java.lang.Object) enhancer12);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer1.setCallbackFilter(callbackFilter2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        enhancer1.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer1.setCallbackFilter(callbackFilter7);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer1.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer15.setCallbacks(callbackArray22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer15.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer15.setCallbackFilter(callbackFilter25);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = signature29.equals((java.lang.Object) type30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        boolean boolean35 = signature29.equals((java.lang.Object) classArray32);
        java.lang.Class[] classArray36 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        enhancer15.setInterfaces(classArray36);
        enhancer11.setInterfaces(classArray36);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        enhancer1.setInterfaces(classArray36);
        java.util.List list41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods(class0, classArray36, list41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray50 = signature49.getArgumentTypes();
        java.lang.String str51 = signature49.getName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>" + "'", str51, "<init>");
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.reflect.Method[] methodArray2 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray3 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray2);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer6.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy9);
        enhancer4.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer4.setCallbackFilter(callbackFilter12);
        enhancer4.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer4.getClassLoader();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        enhancer4.setSuperclass((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass24);
        java.lang.reflect.Method[] methodArray32 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray29, true, false);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray1, methodArray32);
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(methodArray2);
        org.junit.Assert.assertNotNull(methodArray3);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertNotNull(methodArray32);
        org.junit.Assert.assertNotNull(methodArray33);
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        org.mockito.cglib.core.Signature signature52 = methodInfo50.getSignature();
        org.mockito.cglib.core.Signature signature53 = methodInfo50.getSignature();
        java.lang.String str54 = signature53.getName();
        org.mockito.asm.Type[] typeArray55 = signature53.getArgumentTypes();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>" + "'", str54, "<init>");
        org.junit.Assert.assertNotNull(typeArray55);
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.String str10 = classInfo9.toString();
        org.mockito.asm.Type type11 = classInfo9.getType();
        org.mockito.asm.Type type12 = classInfo9.getType();
        int int13 = type12.getSize();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        boolean boolean14 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("(I)LI;");
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        java.lang.reflect.Method method30 = propertyDescriptor29.getReadMethod();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor29.getPropertyEditorClass();
        propertyDescriptor29.setHidden(false);
        boolean boolean34 = propertyDescriptor29.isHidden();
        java.lang.Class<?> wildcardClass35 = propertyDescriptor29.getPropertyEditorClass();
        boolean boolean36 = classInfo25.equals((java.lang.Object) propertyDescriptor29);
        int int37 = classInfo25.getModifiers();
        java.lang.String str38 = classInfo25.toString();
        org.mockito.asm.Type type39 = classInfo25.getType();
        org.mockito.asm.Type type40 = classInfo25.getType();
        boolean boolean41 = propertyDescriptor3.equals((java.lang.Object) classInfo25);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(I)LI;" + "'", str16, "(I)LI;");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNull(method30);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.beans.PropertyDescriptor" + "'", str38, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("L(I)Lava.beans.PropertyDescriptor[name=hi!;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("I");
        propertyDescriptor3.setBound(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        boolean boolean13 = propertyDescriptor3.isPreferred();
        boolean boolean14 = propertyDescriptor3.isHidden();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type25 = classInfo24.getType();
        org.mockito.asm.Type type26 = classInfo24.getType();
        int int27 = classInfo24.getModifiers();
        org.mockito.asm.Type type28 = classInfo24.getSuperType();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        propertyDescriptor5.setShortDescription("J");
        java.lang.Class<?> wildcardClass8 = propertyDescriptor5.getPropertyType();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor5.getClass();
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type[] typeArray11 = classInfo10.getInterfaces();
        java.lang.String str12 = classInfo10.toString();
        org.mockito.asm.Type[] typeArray13 = classInfo10.getInterfaces();
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", type1, typeArray13);
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor18.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        boolean boolean29 = enhancer24.getUseCache();
        enhancer24.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        enhancer40.setNamingPolicy(namingPolicy45);
        enhancer32.setNamingPolicy(namingPolicy45);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) 0.0d);
        enhancer24.setNamingPolicy(namingPolicy45);
        enhancer24.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        enhancer54.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy57 = enhancer54.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy57);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        enhancer61.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer61.getNamingPolicy();
        enhancer60.setNamingPolicy(namingPolicy64);
        enhancer59.setNamingPolicy(namingPolicy64);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter67 = null;
        enhancer59.setCallbackFilter(callbackFilter67);
        enhancer59.setUseCache(false);
        java.lang.ClassLoader classLoader71 = enhancer59.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy72 = enhancer59.getStrategy();
        enhancer24.setStrategy(generatorStrategy72);
        propertyDescriptor18.setValue("(I)F", (java.lang.Object) enhancer24);
        java.lang.ClassLoader classLoader75 = enhancer24.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter76 = null;
        enhancer24.setCallbackFilter(callbackFilter76);
        enhancer24.setSerialVersionUID((java.lang.Long) 100L);
        enhancer24.setUseCache(false);
        boolean boolean82 = signature14.equals((java.lang.Object) false);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor" + "'", str12, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy57);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertNotNull(classLoader71);
        org.junit.Assert.assertNotNull(generatorStrategy72);
        org.junit.Assert.assertNotNull(classLoader75);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(I)LI;", method1, method2);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        propertyDescriptor8.setShortDescription("J");
        java.lang.Class<?> wildcardClass11 = propertyDescriptor8.getPropertyType();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor8.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]", (java.lang.Object) wildcardClass12);
        boolean boolean16 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        boolean boolean20 = type17.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type17, typeArray25);
        java.lang.String str28 = type17.getClassName();
        propertyDescriptor3.setValue("va.beans.PropertyDescriptor", (java.lang.Object) type17);
        propertyDescriptor3.setName("Z");
        java.lang.String str32 = propertyDescriptor3.toString();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "J" + "'", str22, "J");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)J" + "'", str26, "(I)J");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "long" + "'", str28, "long");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.beans.PropertyDescriptor[name=Z; displayName=; values={va.beans.PropertyDescriptor=J}; bound]" + "'", str32, "java.beans.PropertyDescriptor[name=Z; displayName=; values={va.beans.PropertyDescriptor=J}; bound]");
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        boolean boolean9 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        boolean boolean11 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer1.setNamingPolicy(namingPolicy13);
        java.lang.ClassLoader classLoader16 = enhancer1.getClassLoader();
        java.lang.ClassLoader classLoader17 = enhancer1.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer1.getNamingPolicy();
        enhancer1.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer21.setCallbackFilter(callbackFilter22);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        enhancer21.setInterfaces(classArray24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = enhancer27.getClassLoader();
        enhancer21.setClassLoader(classLoader33);
        enhancer1.setClassLoader(classLoader33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor36 = org.mockito.cglib.core.ReflectUtils.findConstructor("hi!", classLoader33);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader33);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 0 };
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        java.lang.String str8 = propertyDescriptor7.getName();
        boolean boolean9 = propertyDescriptor7.isHidden();
        java.lang.String str10 = propertyDescriptor7.getName();
        propertyDescriptor7.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer14.setUseFactory(false);
        enhancer14.setInterceptDuringConstruction(true);
        propertyDescriptor7.setValue("(FIDCCJ)I", (java.lang.Object) enhancer14);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer14.setCallbackFilter(callbackFilter23);
        enhancer14.setAttemptLoad(false);
        enhancer14.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        enhancer29.setStrategy(generatorStrategy32);
        boolean boolean34 = enhancer29.getUseCache();
        enhancer29.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        enhancer37.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer47.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy50);
        enhancer45.setNamingPolicy(namingPolicy50);
        enhancer37.setNamingPolicy(namingPolicy50);
        boolean boolean55 = namingPolicy50.equals((java.lang.Object) 0.0d);
        enhancer29.setNamingPolicy(namingPolicy50);
        enhancer29.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer59.setUseFactory(false);
        enhancer59.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer68.getNamingPolicy();
        enhancer67.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Callback callback73 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray74 = new org.mockito.cglib.proxy.Callback[] { callback73 };
        enhancer67.setCallbacks(callbackArray74);
        enhancer67.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter79 = null;
        enhancer78.setCallbackFilter(callbackFilter79);
        java.lang.Class[] classArray81 = new java.lang.Class[] {};
        java.lang.String[] strArray82 = org.mockito.cglib.core.ReflectUtils.getNames(classArray81);
        enhancer78.setInterfaces(classArray81);
        org.mockito.cglib.proxy.Enhancer enhancer84 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer85 = new org.mockito.cglib.proxy.Enhancer();
        enhancer85.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy88 = enhancer85.getNamingPolicy();
        enhancer84.setNamingPolicy(namingPolicy88);
        java.lang.ClassLoader classLoader90 = enhancer84.getClassLoader();
        enhancer78.setClassLoader(classLoader90);
        enhancer67.setClassLoader(classLoader90);
        enhancer59.setClassLoader(classLoader90);
        enhancer29.setClassLoader(classLoader90);
        enhancer14.setClassLoader(classLoader90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class96 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]", byteArray3, classLoader90);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(callbackArray74);
        org.junit.Assert.assertNotNull(classArray81);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(namingPolicy88);
        org.junit.Assert.assertNotNull(classLoader90);
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()Ljava/beans/FeatureDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest12 {

    public static boolean debug = false;

    @Test
    public void test06001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06001");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 9);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 61);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(methodInfo54);
    }

    @Test
    public void test06002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06002");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        java.lang.reflect.Method method4 = null;
        java.lang.reflect.Method method5 = null;
        java.beans.PropertyDescriptor propertyDescriptor6 = new java.beans.PropertyDescriptor("hi!", method4, method5);
        java.lang.String str7 = propertyDescriptor6.getName();
        boolean boolean8 = propertyDescriptor6.isHidden();
        java.lang.String str9 = propertyDescriptor6.getName();
        propertyDescriptor6.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer13.setUseFactory(false);
        enhancer13.setInterceptDuringConstruction(true);
        propertyDescriptor6.setValue("(FIDCCJ)I", (java.lang.Object) enhancer13);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer13.setCallbackFilter(callbackFilter22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer13.getStrategy();
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Callback callback32 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray33 = new org.mockito.cglib.proxy.Callback[] { callback32 };
        enhancer26.setCallbacks(callbackArray33);
        enhancer26.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter38 = null;
        enhancer37.setCallbackFilter(callbackFilter38);
        java.lang.Class[] classArray40 = new java.lang.Class[] {};
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        enhancer37.setInterfaces(classArray40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer44.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader49 = enhancer43.getClassLoader();
        enhancer37.setClassLoader(classLoader49);
        enhancer26.setClassLoader(classLoader49);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = enhancer26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy53 = enhancer26.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer26.getStrategy();
        enhancer13.setStrategy(generatorStrategy54);
        java.lang.ClassLoader classLoader56 = enhancer13.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class57 = org.mockito.cglib.core.ReflectUtils.defineClass("()Ljava/beans/PropertyDescriptor;", byteArray2, classLoader56);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(callbackArray33);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader49);
        org.junit.Assert.assertNotNull(generatorStrategy52);
        org.junit.Assert.assertNotNull(generatorStrategy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test06003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06003");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test06004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06004");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("Lorg/mockito/cglib/proxy/Enhancer;");
        propertyDescriptor3.setShortDescription("va.beans.FeatureDescriptor");
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setName("V");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(strEnumeration15);
    }

    @Test
    public void test06005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06005");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer9.setCallbackFilter(callbackFilter17);
        enhancer9.setUseCache(false);
        java.lang.ClassLoader classLoader21 = enhancer9.getClassLoader();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        propertyDescriptor25.setShortDescription("J");
        java.lang.Class<?> wildcardClass28 = propertyDescriptor25.getPropertyType();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor25.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        enhancer9.setSuperclass((java.lang.Class) wildcardClass29);
        java.beans.PropertyEditor propertyEditor33 = propertyDescriptor3.createPropertyEditor((java.lang.Object) enhancer9);
        enhancer9.setAttemptLoad(false);
        boolean boolean36 = enhancer9.getUseCache();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java/beans/PropertyDescriptor" + "'", str31, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(propertyEditor33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06006");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Llong;", "(I)Ljava.beans.PropertyDescriptor;");
    }

    @Test
    public void test06007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06007");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        boolean boolean23 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        enhancer24.setInterfaces(classArray29);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer24.getStrategy();
        enhancer13.setStrategy(generatorStrategy34);
        enhancer0.setStrategy(generatorStrategy34);
        enhancer0.setAttemptLoad(true);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(true);
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        propertyDescriptor46.setShortDescription("J");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Class<?> wildcardClass50 = propertyDescriptor46.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.cglib.core.ClassInfo classInfo52 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass50);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass50);
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
    }

    @Test
    public void test06008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06008");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setValue("J", (java.lang.Object) 0.0d);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method10 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        boolean boolean13 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.String str19 = propertyDescriptor18.getName();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor18.getPropertyType();
        boolean boolean21 = propertyDescriptor18.isHidden();
        java.lang.String str22 = propertyDescriptor18.getName();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound](I)Lva/beans/PropertyDescriptor;", (java.lang.Object) propertyDescriptor18);
        boolean boolean24 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06009");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;; expert]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06010");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        java.lang.String str21 = classInfo8.toString();
        org.mockito.asm.Type type22 = classInfo8.getType();
        org.mockito.asm.Type[] typeArray23 = classInfo8.getInterfaces();
        org.mockito.asm.Type[] typeArray24 = classInfo8.getInterfaces();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.beans.PropertyDescriptor" + "'", str21, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
    }

    @Test
    public void test06011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06011");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.Class<?> wildcardClass8 = namingPolicy5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getName();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray26 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.lang.reflect.Method[] methodArray30 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray27, true, true);
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor15.createPropertyEditor((java.lang.Object) methodArray30);
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray30);
        java.lang.reflect.Method[] methodArray33 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray11, methodArray30);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertNotNull(methodArray30);
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(methodArray33);
    }

    @Test
    public void test06012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06012");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 57);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 0);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str57 = type56.toString();
        boolean boolean59 = type56.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str61 = type60.toString();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.toString();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type62 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray64);
        org.mockito.cglib.core.Signature signature66 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type56, typeArray64);
        java.lang.String str67 = signature66.toString();
        java.lang.String str68 = signature66.toString();
        org.mockito.asm.Type type69 = signature66.getReturnType();
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("hi!", method71, method72);
        propertyDescriptor73.setShortDescription("J");
        java.lang.Class<?> wildcardClass76 = propertyDescriptor73.getPropertyType();
        java.lang.Class<?> wildcardClass77 = propertyDescriptor73.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass77);
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        boolean boolean81 = type69.equals((java.lang.Object) wildcardClass77);
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj83 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor47, (java.lang.Object[]) propertyDescriptorArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "J" + "'", str57, "J");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "J" + "'", str61, "J");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "I" + "'", str63, "I");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(I)J" + "'", str65, "(I)J");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str67, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str68, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str79, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
    }

    @Test
    public void test06013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06013");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setWriteMethod(method16);
        propertyDescriptor3.setHidden(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]" + "'", str15, "java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
    }

    @Test
    public void test06014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06014");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("java.beans.PropertyDescriptor[name=I; shortDescription=J; values={org/mockito/cglib/core/Signature=java.beans.PropertyDescriptor[name=hi!; shortDescription=B; values={java.beans.PropertyDescriptor[name=hi!; values={J=I}]=java.beans.PropertyDescriptor}]}; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06015");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0; java/beans/FeatureDescriptor(I)I=Lva/beans/PropertyDescriptor;}; propertyEditorClass=class java.beans.PropertyDescriptor]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06016");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass42);
        boolean boolean50 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.lang.String str52 = classInfo51.toString();
        org.mockito.asm.Type[] typeArray53 = classInfo51.getInterfaces();
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer55.getStrategy();
        enhancer55.setSerialVersionUID((java.lang.Long) 1L);
        enhancer55.setSerialVersionUID((java.lang.Long) 10L);
        enhancer55.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        enhancer64.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer64.getNamingPolicy();
        enhancer63.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        enhancer70.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = enhancer70.getNamingPolicy();
        enhancer69.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.proxy.Callback callback75 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray76 = new org.mockito.cglib.proxy.Callback[] { callback75 };
        enhancer69.setCallbacks(callbackArray76);
        enhancer63.setCallbacks(callbackArray76);
        enhancer55.setCallbacks(callbackArray76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass54, callbackArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Lorg.mockito.asm.Type; is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java/beans/PropertyDescriptor" + "'", str46, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.beans.PropertyDescriptor" + "'", str52, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(callbackArray76);
    }

    @Test
    public void test06017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06017");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setUseFactory(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class11 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader6);
    }

    @Test
    public void test06018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06018");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        enhancer6.setUseFactory(false);
        enhancer6.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer6.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer23.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy26);
        enhancer21.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer21.setCallbackFilter(callbackFilter29);
        boolean boolean31 = enhancer21.getUseCache();
        enhancer21.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer21.setCallbackFilter(callbackFilter34);
        boolean boolean36 = enhancer21.getAttemptLoad();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        boolean boolean41 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setHidden(false);
        propertyDescriptor40.setDisplayName("(I)J");
        java.lang.reflect.Method method46 = null;
        propertyDescriptor40.setWriteMethod(method46);
        propertyDescriptor40.setPreferred(false);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor40.getPropertyType();
        propertyDescriptor40.setExpert(true);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        propertyDescriptor57.setShortDescription("J");
        java.lang.Class<?> wildcardClass60 = propertyDescriptor57.getPropertyType();
        java.lang.Class<?> wildcardClass61 = propertyDescriptor57.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        propertyDescriptor40.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.Class[] classArray68 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray67);
        enhancer21.setInterfaces(classArray68);
        org.mockito.cglib.core.NamingPolicy namingPolicy70 = enhancer21.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy70);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(namingPolicy70);
    }

    @Test
    public void test06019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06019");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        org.mockito.asm.Type[] typeArray10 = classInfo8.getInterfaces();
        int int11 = classInfo8.getModifiers();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer12.setCallbackFilter(callbackFilter20);
        enhancer12.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature26 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = signature26.equals((java.lang.Object) type27);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        boolean boolean32 = signature26.equals((java.lang.Object) classArray29);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        enhancer12.setInterfaces(classArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = enhancer12.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer12.getNamingPolicy();
        boolean boolean37 = enhancer12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer12.getNamingPolicy();
        boolean boolean39 = classInfo8.equals((java.lang.Object) enhancer12);
        org.mockito.asm.Type[] typeArray40 = classInfo8.getInterfaces();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(generatorStrategy35);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
    }

    @Test
    public void test06020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06020");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass42);
        boolean boolean50 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        boolean boolean52 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        boolean boolean54 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        java.util.List list55 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list56 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass42, list55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java/beans/PropertyDescriptor" + "'", str46, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str53, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test06021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06021");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str49 = methodInfo48.toString();
        org.mockito.cglib.core.ClassInfo classInfo50 = methodInfo48.getClassInfo();
        int int51 = methodInfo48.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo52 = methodInfo48.getClassInfo();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; displayName=java/beans/PropertyDescriptor; constrained]");
        boolean boolean55 = methodInfo48.equals((java.lang.Object) type54);
        org.mockito.asm.Type type56 = type54.getElementType();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str49, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
    }

    @Test
    public void test06022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06022");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("(I)I", method18, method19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setConstrained(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getPropertyEditorClass();
        java.lang.String str25 = propertyDescriptor20.getDisplayName();
        java.lang.String str26 = propertyDescriptor20.getName();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(I)I" + "'", str25, "(I)I");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)I" + "'", str26, "(I)I");
    }

    @Test
    public void test06023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06023");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.Class<?> wildcardClass27 = signature11.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        enhancer33.setNamingPolicy(namingPolicy38);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter41 = null;
        enhancer33.setCallbackFilter(callbackFilter41);
        enhancer33.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = signature47.equals((java.lang.Object) type48);
        java.lang.Class[] classArray50 = new java.lang.Class[] {};
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        boolean boolean53 = signature47.equals((java.lang.Object) classArray50);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        enhancer33.setInterfaces(classArray50);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer33.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy60 = null;
        enhancer57.setStrategy(generatorStrategy60);
        java.lang.Class[] classArray62 = new java.lang.Class[] {};
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        enhancer57.setInterfaces(classArray62);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer57.getNamingPolicy();
        boolean boolean67 = enhancer57.getUseCache();
        org.mockito.asm.Type[] typeArray69 = org.mockito.asm.Type.getArgumentTypes("(I)LI;");
        java.lang.Class[] classArray70 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray69);
        enhancer57.setInterfaces(classArray70);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray70);
        enhancer33.setInterfaces(classArray70);
        java.util.List list74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass27, classArray70, list74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str29, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str30, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test06024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06024");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("int", method55, method56);
        java.lang.reflect.Method method58 = propertyDescriptor57.getReadMethod();
        java.lang.Class<?> wildcardClass59 = propertyDescriptor57.getPropertyType();
        java.lang.reflect.Method method60 = propertyDescriptor57.getWriteMethod();
        java.lang.String str61 = propertyDescriptor57.getName();
        java.lang.reflect.Method method62 = propertyDescriptor57.getReadMethod();
        boolean boolean63 = methodInfo53.equals((java.lang.Object) propertyDescriptor57);
        java.lang.reflect.Method method64 = null;
        propertyDescriptor57.setWriteMethod(method64);
        java.lang.String str66 = propertyDescriptor57.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNull(method58);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "int" + "'", str61, "int");
        org.junit.Assert.assertNull(method62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.beans.PropertyDescriptor[name=int]" + "'", str66, "java.beans.PropertyDescriptor[name=int]");
    }

    @Test
    public void test06025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06025");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter7 = null;
        enhancer6.setCallbackFilter(callbackFilter7);
        boolean boolean9 = enhancer6.getAttemptLoad();
        boolean boolean10 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        boolean boolean26 = propertyDescriptor25.isHidden();
        propertyDescriptor25.setHidden(false);
        boolean boolean29 = generatorStrategy21.equals((java.lang.Object) false);
        enhancer6.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer6.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer32.setCallbackFilter(callbackFilter40);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader44 = enhancer32.getClassLoader();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        org.mockito.cglib.core.ClassInfo classInfo53 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass52);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass52);
        enhancer6.setSuperclass((java.lang.Class) wildcardClass52);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class60 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
    }

    @Test
    public void test06026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06026");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        boolean boolean8 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06027");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method[] methodArray15 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, false);
        java.lang.reflect.Method[] methodArray18 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, true, true);
        java.lang.reflect.Method[] methodArray21 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray12, false, true);
        java.lang.Class[] classArray22 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray12);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(methodArray15);
        org.junit.Assert.assertNotNull(methodArray18);
        org.junit.Assert.assertNotNull(methodArray21);
        org.junit.Assert.assertNotNull(classArray22);
    }

    @Test
    public void test06028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06028");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        boolean boolean16 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass11);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06029");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        boolean boolean17 = propertyDescriptor3.isExpert();
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        java.lang.String str19 = propertyDescriptor3.getName();
        java.lang.reflect.Method method20 = null;
        propertyDescriptor3.setWriteMethod(method20);
        java.lang.String str22 = propertyDescriptor3.getDisplayName();
        java.lang.Object obj24 = propertyDescriptor3.getValue("");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java/beans/PropertyDescriptor" + "'", str18, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test06030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06030");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean7 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Callback callback8 = null;
        enhancer0.setCallback(callback8);
        enhancer0.setUseCache(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test06031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06031");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.lang.Object obj7 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test06032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06032");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 8);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo54);
    }

    @Test
    public void test06033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06033");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("float");
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer16.setCallbackFilter(callbackFilter24);
        enhancer16.setUseCache(false);
        java.lang.ClassLoader classLoader28 = enhancer16.getClassLoader();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        propertyDescriptor32.setShortDescription("J");
        java.lang.Class<?> wildcardClass35 = propertyDescriptor32.getPropertyType();
        java.lang.Class<?> wildcardClass36 = propertyDescriptor32.getClass();
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass36);
        enhancer16.setSuperclass((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass36);
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        propertyDescriptor44.setShortDescription("J");
        java.lang.Class<?> wildcardClass47 = propertyDescriptor44.getPropertyType();
        java.lang.Class<?> wildcardClass48 = propertyDescriptor44.getClass();
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("hi!", method50, method51);
        propertyDescriptor52.setShortDescription("J");
        java.lang.Class<?> wildcardClass55 = propertyDescriptor52.getPropertyType();
        java.lang.Class<?> wildcardClass56 = propertyDescriptor52.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.Class[] classArray60 = new java.lang.Class[] { wildcardClass48, wildcardClass56 };
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray60);
        int int62 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray60);
        java.lang.reflect.Constructor constructor63 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass36, classArray60);
        org.mockito.cglib.core.MethodInfo methodInfo64 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63);
        org.mockito.cglib.core.Signature signature65 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor63);
        java.lang.String str66 = org.mockito.asm.Type.getConstructorDescriptor(constructor63);
        org.mockito.asm.Type[] typeArray67 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor63);
        org.mockito.asm.Type[] typeArray68 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo69 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor63);
        org.mockito.cglib.core.ClassInfo classInfo71 = methodInfo70.getClassInfo();
        int int72 = classInfo71.getModifiers();
        boolean boolean73 = propertyDescriptor3.equals((java.lang.Object) int72);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str40, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(constructor63);
        org.junit.Assert.assertNotNull(methodInfo64);
        org.junit.Assert.assertNotNull(signature65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str66, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(methodInfo69);
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertNotNull(classInfo71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test06034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06034");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(generatorStrategy5);
    }

    @Test
    public void test06035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06035");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        propertyDescriptor3.setConstrained(false);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06036");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        boolean boolean16 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyType();
        java.lang.Object obj20 = propertyDescriptor3.getValue("F");
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(method17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(I)LI;" + "'", str21, "(I)LI;");
    }

    @Test
    public void test06037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06037");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        boolean boolean12 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer13.getStrategy();
        enhancer13.setSerialVersionUID((java.lang.Long) 1L);
        enhancer13.setSerialVersionUID((java.lang.Long) 10L);
        enhancer13.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer13.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer23.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy26);
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer22.setCallbacks(callbackArray29);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy31 = enhancer22.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer22.setCallbackFilter(callbackFilter32);
        org.mockito.cglib.proxy.Callback callback34 = null;
        enhancer22.setCallback(callback34);
        boolean boolean36 = enhancer22.getAttemptLoad();
        enhancer22.setSerialVersionUID((java.lang.Long) 0L);
        enhancer22.setSerialVersionUID((java.lang.Long) 10L);
        enhancer22.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = null;
        enhancer43.setStrategy(generatorStrategy46);
        boolean boolean48 = enhancer43.getUseCache();
        enhancer43.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        enhancer53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer53.getNamingPolicy();
        enhancer52.setNamingPolicy(namingPolicy56);
        enhancer51.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        enhancer61.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy64 = enhancer61.getNamingPolicy();
        enhancer60.setNamingPolicy(namingPolicy64);
        enhancer59.setNamingPolicy(namingPolicy64);
        enhancer51.setNamingPolicy(namingPolicy64);
        boolean boolean69 = namingPolicy64.equals((java.lang.Object) 0.0d);
        enhancer43.setNamingPolicy(namingPolicy64);
        enhancer43.setUseCache(false);
        enhancer43.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        enhancer75.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy78 = enhancer75.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer80 = new org.mockito.cglib.proxy.Enhancer();
        enhancer80.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer80.getNamingPolicy();
        enhancer79.setNamingPolicy(namingPolicy83);
        org.mockito.cglib.proxy.Callback callback85 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray86 = new org.mockito.cglib.proxy.Callback[] { callback85 };
        enhancer79.setCallbacks(callbackArray86);
        boolean boolean88 = namingPolicy78.equals((java.lang.Object) callbackArray86);
        enhancer43.setCallbacks(callbackArray86);
        enhancer22.setCallbacks(callbackArray86);
        enhancer13.setCallbacks(callbackArray86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerStaticCallbacks((java.lang.Class) wildcardClass7, callbackArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertNotNull(generatorStrategy31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(namingPolicy64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(namingPolicy78);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertNotNull(callbackArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test06038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06038");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!]; values={(I)F=java.beans.PropertyDescriptor}]");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06039");
        org.mockito.asm.Type type1 = null;
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer4.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy7);
        enhancer2.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer2.setCallbackFilter(callbackFilter10);
        enhancer2.setUseCache(false);
        java.lang.ClassLoader classLoader14 = enhancer2.getClassLoader();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        propertyDescriptor18.setShortDescription("J");
        java.lang.Class<?> wildcardClass21 = propertyDescriptor18.getPropertyType();
        java.lang.Class<?> wildcardClass22 = propertyDescriptor18.getClass();
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass22);
        enhancer2.setSuperclass((java.lang.Class) wildcardClass22);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass22);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass22);
        java.lang.reflect.Method method28 = null;
        java.lang.reflect.Method method29 = null;
        java.beans.PropertyDescriptor propertyDescriptor30 = new java.beans.PropertyDescriptor("hi!", method28, method29);
        propertyDescriptor30.setShortDescription("J");
        java.lang.Class<?> wildcardClass33 = propertyDescriptor30.getPropertyType();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor30.getClass();
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray46 = new java.lang.Class[] { wildcardClass34, wildcardClass42 };
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        int int48 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        java.lang.reflect.Constructor constructor49 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass22, classArray46);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor49);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor49, (int) (short) 100);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor49);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("", type1, typeArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(classLoader14);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str26, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(constructor49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test06040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06040");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("loat()Ljava.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06041");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 7);
        org.mockito.cglib.core.ClassInfo classInfo56 = methodInfo55.getClassInfo();
        org.mockito.asm.Type[] typeArray57 = methodInfo55.getExceptionTypes();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNotNull(typeArray57);
    }

    @Test
    public void test06042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06042");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str52 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 0);
        java.lang.String str56 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray57 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature58 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo60 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str52, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str56, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(signature58);
        org.junit.Assert.assertNotNull(methodInfo60);
    }

    @Test
    public void test06043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06043");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(I)I; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(strEnumeration4);
    }

    @Test
    public void test06044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06044");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.asm.Type type25 = classInfo24.getType();
        org.mockito.asm.Type type26 = classInfo24.getType();
        int int27 = type26.getSize();
        java.lang.String str28 = type26.getClassName();
        java.lang.String str29 = type26.getClassName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.PropertyDescriptor" + "'", str28, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.beans.PropertyDescriptor" + "'", str29, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test06045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06045");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/beans/FeatureDescriptor;", "(FIDCCJ)Lva/beans/FeatureDescriptor;");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        enhancer4.setUseCache(true);
        java.lang.ClassLoader classLoader9 = enhancer4.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer4.getStrategy();
        boolean boolean11 = type3.equals((java.lang.Object) enhancer4);
        enhancer4.setInterceptDuringConstruction(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer4.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter16 = null;
        enhancer15.setCallbackFilter(callbackFilter16);
        boolean boolean18 = enhancer15.getAttemptLoad();
        boolean boolean19 = enhancer15.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        enhancer20.setStrategy(generatorStrategy23);
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        java.lang.String[] strArray27 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        enhancer20.setInterfaces(classArray25);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer20.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer20.getStrategy();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        boolean boolean35 = propertyDescriptor34.isHidden();
        propertyDescriptor34.setHidden(false);
        boolean boolean38 = generatorStrategy30.equals((java.lang.Object) false);
        enhancer15.setStrategy(generatorStrategy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer15.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer41.setCallbackFilter(callbackFilter42);
        boolean boolean44 = enhancer41.getAttemptLoad();
        boolean boolean45 = enhancer41.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = null;
        enhancer46.setStrategy(generatorStrategy49);
        java.lang.Class[] classArray51 = new java.lang.Class[] {};
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray51);
        enhancer46.setInterfaces(classArray51);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer46.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy56 = enhancer46.getStrategy();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        boolean boolean61 = propertyDescriptor60.isHidden();
        propertyDescriptor60.setHidden(false);
        boolean boolean64 = generatorStrategy56.equals((java.lang.Object) false);
        enhancer41.setStrategy(generatorStrategy56);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer41.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy66);
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        propertyDescriptor71.setShortDescription("J");
        java.lang.Class<?> wildcardClass74 = propertyDescriptor71.getPropertyType();
        java.lang.Class<?> wildcardClass75 = propertyDescriptor71.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        enhancer15.setSuperclass((java.lang.Class) wildcardClass75);
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer82 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer83 = new org.mockito.cglib.proxy.Enhancer();
        enhancer83.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy86 = enhancer83.getNamingPolicy();
        enhancer82.setNamingPolicy(namingPolicy86);
        org.mockito.cglib.proxy.Callback callback88 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray89 = new org.mockito.cglib.proxy.Callback[] { callback88 };
        enhancer82.setCallbacks(callbackArray89);
        enhancer15.setCallbacks(callbackArray89);
        enhancer4.setCallbacks(callbackArray89);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(classArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(namingPolicy86);
        org.junit.Assert.assertNotNull(callbackArray89);
    }

    @Test
    public void test06046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06046");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        propertyDescriptor3.setHidden(false);
        java.lang.String str14 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Callback callback24 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray25 = new org.mockito.cglib.proxy.Callback[] { callback24 };
        enhancer18.setCallbacks(callbackArray25);
        java.lang.ClassLoader classLoader27 = enhancer18.getClassLoader();
        propertyDescriptor3.setValue("java/beans/FeatureDescriptor(I)I", (java.lang.Object) classLoader27);
        java.lang.Class<?> wildcardClass29 = propertyDescriptor3.getClass();
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Callback callback31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass29, callback31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(callbackArray25);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java/beans/PropertyDescriptor" + "'", str30, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test06047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06047");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        java.lang.reflect.Method method25 = propertyDescriptor24.getReadMethod();
        java.lang.Class<?> wildcardClass26 = propertyDescriptor24.getPropertyEditorClass();
        propertyDescriptor24.setHidden(false);
        boolean boolean29 = propertyDescriptor24.isHidden();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor24.getPropertyEditorClass();
        propertyDescriptor24.setDisplayName("D");
        propertyDescriptor12.setValue("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V", (java.lang.Object) propertyDescriptor24);
        java.util.Enumeration<java.lang.String> strEnumeration34 = propertyDescriptor12.attributeNames();
        propertyDescriptor12.setExpert(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strEnumeration34);
    }

    @Test
    public void test06048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06048");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        boolean boolean18 = propertyDescriptor17.isHidden();
        propertyDescriptor17.setHidden(false);
        propertyDescriptor17.setDisplayName("(I)J");
        java.lang.reflect.Method method23 = null;
        propertyDescriptor17.setWriteMethod(method23);
        propertyDescriptor17.setPreferred(false);
        java.lang.String str27 = propertyDescriptor17.getShortDescription();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.reflect.Method method32 = propertyDescriptor31.getReadMethod();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor31.getPropertyEditorClass();
        propertyDescriptor31.setHidden(false);
        boolean boolean36 = propertyDescriptor31.isHidden();
        java.lang.Class<?> wildcardClass37 = propertyDescriptor31.getPropertyEditorClass();
        propertyDescriptor31.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor31.getPropertyType();
        propertyDescriptor31.setExpert(true);
        propertyDescriptor31.setExpert(true);
        boolean boolean45 = propertyDescriptor31.isExpert();
        propertyDescriptor31.setBound(true);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("hi!", method50, method51);
        propertyDescriptor52.setShortDescription("J");
        java.lang.Class<?> wildcardClass55 = propertyDescriptor52.getPropertyType();
        java.lang.Class<?> wildcardClass56 = propertyDescriptor52.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.cglib.core.ClassInfo classInfo58 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass56);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass56);
        java.lang.Class[] classArray60 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray59);
        propertyDescriptor31.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray60);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray60);
        java.beans.PropertyEditor propertyEditor63 = propertyDescriptor17.createPropertyEditor((java.lang.Object) classArray62);
        java.lang.String[] strArray64 = org.mockito.cglib.core.ReflectUtils.getNames(classArray62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method65 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass7, "java.beans.PropertyDescriptor[name=(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V]", classArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: java.beans.PropertyDescriptor[name=(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V]");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(I)J" + "'", str27, "(I)J");
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(classInfo58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(classArray60);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertNull(propertyEditor63);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test06049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06049");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        boolean boolean26 = enhancer0.getAttemptLoad();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str28 = type27.toString();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.toString();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type29 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = null;
        enhancer33.setStrategy(generatorStrategy36);
        boolean boolean38 = enhancer33.getUseCache();
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer33.setCallbacks(callbackArray40);
        boolean boolean42 = type27.equals((java.lang.Object) enhancer33);
        enhancer33.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer46.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer52.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Callback callback57 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray58 = new org.mockito.cglib.proxy.Callback[] { callback57 };
        enhancer51.setCallbacks(callbackArray58);
        enhancer45.setCallbacks(callbackArray58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer45.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy61);
        enhancer0.setNamingPolicy(namingPolicy61);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "J" + "'", str28, "J");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "I" + "'", str30, "I");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(I)J" + "'", str32, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(callbackArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(callbackArray58);
        org.junit.Assert.assertNotNull(namingPolicy61);
    }

    @Test
    public void test06050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06050");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "J" + "'", str12, "J");
    }

    @Test
    public void test06051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06051");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("(I)B");
        boolean boolean9 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06052");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        boolean boolean20 = type17.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type17, typeArray25);
        java.lang.String str28 = type17.getClassName();
        propertyDescriptor3.setValue("va.beans.PropertyDescriptor", (java.lang.Object) type17);
        propertyDescriptor3.setName("Z");
        java.lang.String str32 = propertyDescriptor3.getDisplayName();
        java.lang.String str33 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method34 = null;
        propertyDescriptor3.setReadMethod(method34);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; preferred]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "J" + "'", str22, "J");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)J" + "'", str26, "(I)J");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "long" + "'", str28, "long");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test06053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06053");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 10);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature53 = methodInfo52.getSignature();
        org.mockito.cglib.core.Signature signature54 = methodInfo52.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(signature54);
    }

    @Test
    public void test06054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06054");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        enhancer11.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.Callback callback34 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray35 = new org.mockito.cglib.proxy.Callback[] { callback34 };
        enhancer28.setCallbacks(callbackArray35);
        enhancer11.setCallbacks(callbackArray35);
        enhancer0.setCallbacks(callbackArray35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader39 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(callbackArray35);
    }

    @Test
    public void test06055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06055");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("(FIDCCJ)I");
        java.lang.Object obj12 = propertyDescriptor3.getValue("Lava.beans.PropertyDescriptor[name=hi!;");
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method15 = null;
        propertyDescriptor3.setWriteMethod(method15);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test06056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06056");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer1.getStrategy();
        enhancer1.setSerialVersionUID((java.lang.Long) 1L);
        enhancer1.setSerialVersionUID((java.lang.Long) 10L);
        enhancer1.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Callback callback21 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray22 = new org.mockito.cglib.proxy.Callback[] { callback21 };
        enhancer15.setCallbacks(callbackArray22);
        enhancer9.setCallbacks(callbackArray22);
        enhancer1.setCallbacks(callbackArray22);
        java.lang.ClassLoader classLoader26 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor27 = org.mockito.cglib.core.ReflectUtils.findConstructor("(I)LI)Ljava/beans/FeatureDescriptor;", classLoader26);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(callbackArray22);
        org.junit.Assert.assertNotNull(classLoader26);
    }

    @Test
    public void test06057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06057");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer10.setUseFactory(false);
        enhancer10.setInterceptDuringConstruction(true);
        propertyDescriptor3.setValue("(FIDCCJ)I", (java.lang.Object) enhancer10);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer10.setCallbackFilter(callbackFilter19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer10.getStrategy();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        propertyDescriptor25.setShortDescription("J");
        java.lang.Class<?> wildcardClass28 = propertyDescriptor25.getPropertyType();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor25.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray31 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass29);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass29);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.cglib.core.ClassInfo classInfo35 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        boolean boolean36 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass29);
        enhancer10.setSuperclass((java.lang.Class) wildcardClass29);
        boolean boolean38 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass29);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer41.getNamingPolicy();
        enhancer40.setNamingPolicy(namingPolicy44);
        enhancer39.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter47 = null;
        enhancer39.setCallbackFilter(callbackFilter47);
        enhancer39.setUseCache(false);
        java.lang.ClassLoader classLoader51 = enhancer39.getClassLoader();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("hi!", method53, method54);
        propertyDescriptor55.setShortDescription("J");
        java.lang.Class<?> wildcardClass58 = propertyDescriptor55.getPropertyType();
        java.lang.Class<?> wildcardClass59 = propertyDescriptor55.getClass();
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass59);
        enhancer39.setSuperclass((java.lang.Class) wildcardClass59);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass59);
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass59);
        java.lang.reflect.Method method65 = null;
        java.lang.reflect.Method method66 = null;
        java.beans.PropertyDescriptor propertyDescriptor67 = new java.beans.PropertyDescriptor("hi!", method65, method66);
        propertyDescriptor67.setShortDescription("J");
        java.lang.Class<?> wildcardClass70 = propertyDescriptor67.getPropertyType();
        java.lang.Class<?> wildcardClass71 = propertyDescriptor67.getClass();
        java.lang.reflect.Method method73 = null;
        java.lang.reflect.Method method74 = null;
        java.beans.PropertyDescriptor propertyDescriptor75 = new java.beans.PropertyDescriptor("hi!", method73, method74);
        propertyDescriptor75.setShortDescription("J");
        java.lang.Class<?> wildcardClass78 = propertyDescriptor75.getPropertyType();
        java.lang.Class<?> wildcardClass79 = propertyDescriptor75.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.lang.Class[] classArray83 = new java.lang.Class[] { wildcardClass71, wildcardClass79 };
        java.lang.String[] strArray84 = org.mockito.cglib.core.ReflectUtils.getNames(classArray83);
        int int85 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray83);
        java.lang.reflect.Constructor constructor86 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass59, classArray83);
        java.lang.String str87 = org.mockito.asm.Type.getConstructorDescriptor(constructor86);
        org.mockito.cglib.core.MethodInfo methodInfo89 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor86, (int) (short) 10);
        org.mockito.asm.Type[] typeArray90 = methodInfo89.getExceptionTypes();
        org.mockito.asm.Type[] typeArray91 = methodInfo89.getExceptionTypes();
        java.lang.Class[] classArray92 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray91);
        java.lang.String[] strArray93 = org.mockito.cglib.core.ReflectUtils.getNames(classArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor94 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass29, classArray92);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java/beans/PropertyDescriptor" + "'", str32, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str34, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(classLoader51);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str63, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(constructor86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str87, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(classArray92);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test06058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06058");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        java.lang.String str22 = classInfo8.toString();
        org.mockito.asm.Type type23 = classInfo8.getSuperType();
        java.lang.String str24 = type23.getInternalName();
        org.mockito.asm.Type type25 = type23.getElementType();
        int int26 = type23.getSort();
        int int27 = type23.getDimensions();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.beans.PropertyDescriptor" + "'", str22, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java/beans/FeatureDescriptor" + "'", str24, "java/beans/FeatureDescriptor");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test06059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06059");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06060");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        propertyDescriptor47.setShortDescription("J");
        java.lang.Class<?> wildcardClass50 = propertyDescriptor47.getPropertyType();
        java.lang.Class<?> wildcardClass51 = propertyDescriptor47.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass43, wildcardClass51 };
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        int int57 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray55);
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray55);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, (int) (short) 100);
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo61.getClassInfo();
        org.mockito.cglib.core.Signature signature63 = methodInfo61.getSignature();
        java.beans.PropertyEditor propertyEditor64 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodInfo61);
        org.mockito.cglib.core.Signature signature65 = methodInfo61.getSignature();
        org.mockito.asm.Type[] typeArray66 = methodInfo61.getExceptionTypes();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("hi!", method68, method69);
        propertyDescriptor70.setShortDescription("J");
        boolean boolean73 = propertyDescriptor70.isExpert();
        propertyDescriptor70.setConstrained(false);
        boolean boolean76 = methodInfo61.equals((java.lang.Object) false);
        org.mockito.asm.Type[] typeArray77 = methodInfo61.getExceptionTypes();
        java.lang.Class[] classArray78 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray77);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str35, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(signature63);
        org.junit.Assert.assertNull(propertyEditor64);
        org.junit.Assert.assertNotNull(signature65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(classArray78);
    }

    @Test
    public void test06061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06061");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Ljava/lang/reflect/Constructor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06062");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; displayName=(I)J]");
        int int2 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test06063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06063");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        enhancer0.setInterfaces(classArray3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        enhancer6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer6.setNamingPolicy(namingPolicy18);
        java.lang.ClassLoader classLoader21 = enhancer6.getClassLoader();
        enhancer0.setClassLoader(classLoader21);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer0.setCallback(callback23);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader21);
    }

    @Test
    public void test06064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06064");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 1);
        org.mockito.asm.Type[] typeArray53 = methodInfo52.getExceptionTypes();
        org.mockito.cglib.core.Signature signature54 = methodInfo52.getSignature();
        org.mockito.asm.Type type55 = signature54.getReturnType();
        java.lang.Object obj56 = null;
        boolean boolean57 = type55.equals(obj56);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test06065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06065");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06066");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter3 = null;
        enhancer0.setCallbackFilter(callbackFilter3);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        boolean boolean10 = enhancer5.getUseCache();
        enhancer5.setUseFactory(true);
        boolean boolean13 = enhancer5.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer14.setCallbackFilter(callbackFilter15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer14.setInterfaces(classArray17);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer5.setInterfaces(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.asm.ClassVisitor classVisitor23 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray20);
    }

    @Test
    public void test06067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06067");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=()V]");
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor5.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        boolean boolean16 = enhancer11.getUseCache();
        enhancer11.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        enhancer27.setNamingPolicy(namingPolicy32);
        enhancer19.setNamingPolicy(namingPolicy32);
        boolean boolean37 = namingPolicy32.equals((java.lang.Object) 0.0d);
        enhancer11.setNamingPolicy(namingPolicy32);
        enhancer11.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        enhancer41.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy44 = enhancer41.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy44);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer48.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy51);
        enhancer46.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer46.setCallbackFilter(callbackFilter54);
        enhancer46.setUseCache(false);
        java.lang.ClassLoader classLoader58 = enhancer46.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer46.getStrategy();
        enhancer11.setStrategy(generatorStrategy59);
        propertyDescriptor5.setValue("(I)F", (java.lang.Object) enhancer11);
        java.lang.ClassLoader classLoader62 = enhancer11.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter63 = null;
        enhancer11.setCallbackFilter(callbackFilter63);
        enhancer11.setSerialVersionUID((java.lang.Long) 100L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer11.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer11.getStrategy();
        boolean boolean69 = type1.equals((java.lang.Object) generatorStrategy68);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(generatorStrategy67);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test06068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06068");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        boolean boolean14 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06069");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]");
        java.lang.String str2 = type1.getInternalName();
        int int3 = type1.getDimensions();
        org.mockito.cglib.core.Signature signature6 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str7 = signature6.toString();
        java.lang.String str8 = signature6.getDescriptor();
        java.lang.String str9 = signature6.toString();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        enhancer10.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer10.setCallbackFilter(callbackFilter18);
        enhancer10.setUseCache(false);
        java.lang.ClassLoader classLoader22 = enhancer10.getClassLoader();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        propertyDescriptor26.setShortDescription("J");
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor26.getClass();
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        enhancer10.setSuperclass((java.lang.Class) wildcardClass30);
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass30);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass30);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        propertyDescriptor46.setShortDescription("J");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Class<?> wildcardClass50 = propertyDescriptor46.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.lang.Class[] classArray54 = new java.lang.Class[] { wildcardClass42, wildcardClass50 };
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        int int56 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray54);
        java.lang.reflect.Constructor constructor57 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass30, classArray54);
        java.lang.String str58 = org.mockito.asm.Type.getConstructorDescriptor(constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        org.mockito.cglib.core.MethodInfo methodInfo60 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor57);
        boolean boolean61 = signature6.equals((java.lang.Object) constructor57);
        org.mockito.asm.Type[] typeArray62 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor57);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray62);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]" + "'", str2, "java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str7, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(I)I" + "'", str8, "(I)I");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str9, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader22);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str34, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(constructor57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str58, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(methodInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "()Ljava.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}];" + "'", str63, "()Ljava.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}];");
    }

    @Test
    public void test06070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06070");
        java.lang.Class class0 = null;
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Callback callback13 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray14 = new org.mockito.cglib.proxy.Callback[] { callback13 };
        enhancer7.setCallbacks(callbackArray14);
        enhancer1.setCallbacks(callbackArray14);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer1.getNamingPolicy();
        enhancer1.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        enhancer20.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer20.getUseCache();
        enhancer20.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy33);
        enhancer28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer38.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy41);
        enhancer36.setNamingPolicy(namingPolicy41);
        enhancer28.setNamingPolicy(namingPolicy41);
        boolean boolean46 = namingPolicy41.equals((java.lang.Object) 0.0d);
        enhancer20.setNamingPolicy(namingPolicy41);
        enhancer20.setUseCache(false);
        enhancer20.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer52.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Callback callback62 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray63 = new org.mockito.cglib.proxy.Callback[] { callback62 };
        enhancer56.setCallbacks(callbackArray63);
        boolean boolean65 = namingPolicy55.equals((java.lang.Object) callbackArray63);
        enhancer20.setCallbacks(callbackArray63);
        enhancer1.setCallbacks(callbackArray63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks(class0, callbackArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(callbackArray14);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(callbackArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test06071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06071");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str52 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 0);
        java.lang.String str56 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray57 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray58 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str52, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str56, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(methodInfo59);
    }

    @Test
    public void test06072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06072");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Callback callback15 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray16 = new org.mockito.cglib.proxy.Callback[] { callback15 };
        enhancer9.setCallbacks(callbackArray16);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer9.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer9.setCallbackFilter(callbackFilter19);
        java.lang.ClassLoader classLoader21 = enhancer9.getClassLoader();
        enhancer9.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer33.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy36);
        enhancer24.setNamingPolicy(namingPolicy36);
        java.lang.ClassLoader classLoader39 = enhancer24.getClassLoader();
        java.lang.ClassLoader classLoader40 = enhancer24.getClassLoader();
        enhancer9.setClassLoader(classLoader40);
        enhancer9.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        enhancer46.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer46.getNamingPolicy();
        enhancer45.setNamingPolicy(namingPolicy49);
        enhancer44.setNamingPolicy(namingPolicy49);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        enhancer53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer53.getNamingPolicy();
        enhancer52.setNamingPolicy(namingPolicy56);
        enhancer44.setNamingPolicy(namingPolicy56);
        java.lang.ClassLoader classLoader59 = enhancer44.getClassLoader();
        enhancer44.setSerialVersionUID((java.lang.Long) 1L);
        enhancer44.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = enhancer64.getStrategy();
        enhancer64.setSerialVersionUID((java.lang.Long) 1L);
        enhancer64.setSerialVersionUID((java.lang.Long) 10L);
        enhancer64.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        enhancer73.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = enhancer73.getNamingPolicy();
        enhancer72.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        enhancer79.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = enhancer79.getNamingPolicy();
        enhancer78.setNamingPolicy(namingPolicy82);
        org.mockito.cglib.proxy.Callback callback84 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray85 = new org.mockito.cglib.proxy.Callback[] { callback84 };
        enhancer78.setCallbacks(callbackArray85);
        enhancer72.setCallbacks(callbackArray85);
        enhancer64.setCallbacks(callbackArray85);
        enhancer44.setCallbacks(callbackArray85);
        enhancer9.setCallbacks(callbackArray85);
        java.beans.PropertyEditor propertyEditor91 = propertyDescriptor3.createPropertyEditor((java.lang.Object) enhancer9);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(callbackArray16);
        org.junit.Assert.assertNotNull(generatorStrategy18);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(classLoader59);
        org.junit.Assert.assertNotNull(generatorStrategy65);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(callbackArray85);
        org.junit.Assert.assertNull(propertyEditor91);
    }

    @Test
    public void test06073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06073");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 0 };
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter5 = null;
        enhancer4.setCallbackFilter(callbackFilter5);
        boolean boolean7 = enhancer4.getAttemptLoad();
        enhancer4.setAttemptLoad(false);
        enhancer4.setSerialVersionUID((java.lang.Long) 100L);
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        propertyDescriptor15.setShortDescription("J");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor15.getPropertyType();
        boolean boolean19 = propertyDescriptor15.isPreferred();
        propertyDescriptor15.setHidden(true);
        java.lang.reflect.Method method22 = null;
        propertyDescriptor15.setWriteMethod(method22);
        propertyDescriptor15.setHidden(false);
        java.lang.String str26 = propertyDescriptor15.getName();
        propertyDescriptor15.setExpert(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Callback callback36 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray37 = new org.mockito.cglib.proxy.Callback[] { callback36 };
        enhancer30.setCallbacks(callbackArray37);
        java.lang.ClassLoader classLoader39 = enhancer30.getClassLoader();
        propertyDescriptor15.setValue("java/beans/FeatureDescriptor(I)I", (java.lang.Object) classLoader39);
        enhancer4.setClassLoader(classLoader39);
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        java.lang.String str46 = propertyDescriptor45.getName();
        boolean boolean47 = propertyDescriptor45.isHidden();
        java.lang.String str48 = propertyDescriptor45.getName();
        propertyDescriptor45.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer52.getNamingPolicy();
        enhancer52.setUseFactory(false);
        enhancer52.setInterceptDuringConstruction(true);
        propertyDescriptor45.setValue("(FIDCCJ)I", (java.lang.Object) enhancer52);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter61 = null;
        enhancer52.setCallbackFilter(callbackFilter61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer52.getStrategy();
        java.lang.ClassLoader classLoader64 = enhancer52.getClassLoader();
        enhancer4.setClassLoader(classLoader64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class66 = org.mockito.cglib.core.ReflectUtils.defineClass("java.beans.PropertyDescriptor[name=(FIDCCJ)I; bound]", byteArray3, classLoader64);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(callbackArray37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(classLoader64);
    }

    @Test
    public void test06074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06074");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass42);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass42);
        boolean boolean50 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        boolean boolean52 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        java.util.List list54 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list55 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass42, list54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java/beans/PropertyDescriptor" + "'", str46, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
    }

    @Test
    public void test06075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06075");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = signature49.getDescriptor();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test06076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06076");
        byte[] byteArray1 = null;
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        enhancer4.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer4.getNamingPolicy();
        enhancer3.setNamingPolicy(namingPolicy7);
        enhancer2.setNamingPolicy(namingPolicy7);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer2.setCallbackFilter(callbackFilter10);
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature16 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = signature16.equals((java.lang.Object) type17);
        java.lang.Class[] classArray19 = new java.lang.Class[] {};
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        boolean boolean22 = signature16.equals((java.lang.Object) classArray19);
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray19);
        enhancer2.setInterfaces(classArray19);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer2.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer2.getNamingPolicy();
        boolean boolean27 = enhancer2.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer2.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer29.setCallbackFilter(callbackFilter30);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer29.setCallbackFilter(callbackFilter32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer29.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy48);
        enhancer43.setNamingPolicy(namingPolicy48);
        enhancer35.setNamingPolicy(namingPolicy48);
        enhancer35.setUseFactory(false);
        enhancer35.setInterceptDuringConstruction(true);
        boolean boolean56 = enhancer35.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter58 = null;
        enhancer57.setCallbackFilter(callbackFilter58);
        boolean boolean60 = enhancer57.getAttemptLoad();
        enhancer57.setAttemptLoad(false);
        boolean boolean63 = enhancer57.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer64.setCallbackFilter(callbackFilter65);
        java.lang.Class[] classArray67 = new java.lang.Class[] {};
        java.lang.String[] strArray68 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        enhancer64.setInterfaces(classArray67);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        enhancer72.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = enhancer72.getNamingPolicy();
        enhancer71.setNamingPolicy(namingPolicy75);
        enhancer70.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.Enhancer enhancer78 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer79 = new org.mockito.cglib.proxy.Enhancer();
        enhancer79.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy82 = enhancer79.getNamingPolicy();
        enhancer78.setNamingPolicy(namingPolicy82);
        enhancer70.setNamingPolicy(namingPolicy82);
        java.lang.ClassLoader classLoader85 = enhancer70.getClassLoader();
        enhancer64.setClassLoader(classLoader85);
        enhancer57.setClassLoader(classLoader85);
        enhancer35.setClassLoader(classLoader85);
        enhancer29.setClassLoader(classLoader85);
        enhancer2.setClassLoader(classLoader85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class91 = org.mockito.cglib.core.ReflectUtils.defineClass("Ljava.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}];", byteArray1, classLoader85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(classArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(namingPolicy82);
        org.junit.Assert.assertNotNull(classLoader85);
    }

    @Test
    public void test06077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06077");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;", "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer3.getStrategy();
        boolean boolean5 = signature2.equals((java.lang.Object) generatorStrategy4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        propertyDescriptor9.setShortDescription("J");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str19 = type18.getInternalName();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer22.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy25);
        enhancer20.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer20.setCallbackFilter(callbackFilter28);
        enhancer20.setUseCache(false);
        java.lang.ClassLoader classLoader32 = enhancer20.getClassLoader();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo41 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass40);
        enhancer20.setSuperclass((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass40);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.lang.Class[] classArray64 = new java.lang.Class[] { wildcardClass52, wildcardClass60 };
        java.lang.String[] strArray65 = org.mockito.cglib.core.ReflectUtils.getNames(classArray64);
        int int66 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray64);
        java.lang.reflect.Constructor constructor67 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass40, classArray64);
        java.lang.String str68 = org.mockito.asm.Type.getConstructorDescriptor(constructor67);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor67, (int) (short) 10);
        org.mockito.asm.Type[] typeArray71 = methodInfo70.getExceptionTypes();
        java.lang.Class[] classArray72 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray71);
        boolean boolean74 = generatorStrategy4.equals((java.lang.Object) typeArray71);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java/beans/PropertyDescriptor" + "'", str19, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(classInfo41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str44, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(classArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(constructor67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str68, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str73, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06078");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        int int53 = methodInfo52.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo54 = methodInfo52.getClassInfo();
        int int55 = methodInfo52.getModifiers();
        java.lang.String str56 = methodInfo52.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str56, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test06079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06079");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        boolean boolean14 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("java/beans/FeatureDescriptorjava.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]");
        propertyDescriptor3.setName("()Lva/beans/PropertyDescriptor;");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06080");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) -1);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature54 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str55 = signature54.getName();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>" + "'", str55, "<init>");
    }

    @Test
    public void test06081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06081");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = enhancer0.getStrategy();
        enhancer0.setInterceptDuringConstruction(false);
        boolean boolean28 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(generatorStrategy25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test06082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06082");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray7 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test06083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06083");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer0.setCallback(callback13);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer24.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy27);
        enhancer15.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer15.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(true);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = classInfo44.getType();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str48 = type47.toString();
        boolean boolean50 = type47.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str52 = type51.toString();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.toString();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type53 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray55);
        org.mockito.cglib.core.Signature signature57 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type47, typeArray55);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = null;
        enhancer58.setStrategy(generatorStrategy61);
        boolean boolean63 = enhancer58.getUseCache();
        org.mockito.cglib.proxy.Callback callback64 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray65 = new org.mockito.cglib.proxy.Callback[] { callback64 };
        enhancer58.setCallbacks(callbackArray65);
        enhancer58.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback69 = null;
        enhancer58.setCallback(callback69);
        boolean boolean71 = signature57.equals((java.lang.Object) enhancer58);
        java.lang.String str72 = signature57.getName();
        java.lang.Class<?> wildcardClass73 = signature57.getClass();
        boolean boolean74 = classInfo44.equals((java.lang.Object) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray75 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass73);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass73);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "J" + "'", str48, "J");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "J" + "'", str52, "J");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "I" + "'", str54, "I");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(I)J" + "'", str56, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(callbackArray65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str72, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray75);
    }

    @Test
    public void test06084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06084");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter3 = null;
        enhancer0.setCallbackFilter(callbackFilter3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        enhancer6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        enhancer6.setNamingPolicy(namingPolicy19);
        enhancer6.setUseFactory(false);
        enhancer6.setInterceptDuringConstruction(true);
        boolean boolean27 = enhancer6.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer28.setCallbackFilter(callbackFilter29);
        boolean boolean31 = enhancer28.getAttemptLoad();
        enhancer28.setAttemptLoad(false);
        boolean boolean34 = enhancer28.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer35.setCallbackFilter(callbackFilter36);
        java.lang.Class[] classArray38 = new java.lang.Class[] {};
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        enhancer35.setInterfaces(classArray38);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer43.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy46);
        enhancer41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer50.getNamingPolicy();
        enhancer49.setNamingPolicy(namingPolicy53);
        enhancer41.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader56 = enhancer41.getClassLoader();
        enhancer35.setClassLoader(classLoader56);
        enhancer28.setClassLoader(classLoader56);
        enhancer6.setClassLoader(classLoader56);
        enhancer0.setClassLoader(classLoader56);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = null;
        enhancer0.setNamingPolicy(namingPolicy61);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test06085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06085");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy12 = enhancer0.getStrategy();
        boolean boolean13 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertNotNull(generatorStrategy12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06086");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setConstrained(true);
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.Object obj8 = propertyDescriptor3.getValue("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        propertyDescriptor3.setShortDescription("java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test06087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06087");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) -1, (byte) -1, (byte) 0, (byte) -1 };
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        enhancer7.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        enhancer12.setUseFactory(true);
        enhancer12.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer12.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy22);
        enhancer7.setUseFactory(true);
        enhancer7.setUseCache(true);
        java.lang.ClassLoader classLoader28 = enhancer7.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class29 = org.mockito.cglib.core.ReflectUtils.defineClass("()Ljava.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}];", byteArray6, classLoader28);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, -1, -1, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(classLoader28);
    }

    @Test
    public void test06088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06088");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer8.setUseFactory(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Callback callback22 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray23 = new org.mockito.cglib.proxy.Callback[] { callback22 };
        enhancer16.setCallbacks(callbackArray23);
        enhancer16.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer27.setCallbackFilter(callbackFilter28);
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        enhancer27.setInterfaces(classArray30);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = enhancer33.getClassLoader();
        enhancer27.setClassLoader(classLoader39);
        enhancer16.setClassLoader(classLoader39);
        enhancer8.setClassLoader(classLoader39);
        enhancer0.setClassLoader(classLoader39);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer47.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        enhancer53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer53.getNamingPolicy();
        enhancer52.setNamingPolicy(namingPolicy56);
        org.mockito.cglib.proxy.Callback callback58 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray59 = new org.mockito.cglib.proxy.Callback[] { callback58 };
        enhancer52.setCallbacks(callbackArray59);
        enhancer46.setCallbacks(callbackArray59);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer46.getNamingPolicy();
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("(I)I", method64, method65);
        boolean boolean67 = namingPolicy62.equals((java.lang.Object) propertyDescriptor66);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer68.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer73 = new org.mockito.cglib.proxy.Enhancer();
        enhancer73.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy76 = enhancer73.getNamingPolicy();
        enhancer72.setNamingPolicy(namingPolicy76);
        org.mockito.cglib.proxy.Callback callback78 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray79 = new org.mockito.cglib.proxy.Callback[] { callback78 };
        enhancer72.setCallbacks(callbackArray79);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy81 = enhancer72.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter82 = null;
        enhancer72.setCallbackFilter(callbackFilter82);
        org.mockito.cglib.core.Signature signature86 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type87 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean88 = signature86.equals((java.lang.Object) type87);
        java.lang.Class[] classArray89 = new java.lang.Class[] {};
        java.lang.String[] strArray90 = org.mockito.cglib.core.ReflectUtils.getNames(classArray89);
        java.lang.String[] strArray91 = org.mockito.cglib.core.ReflectUtils.getNames(classArray89);
        boolean boolean92 = signature86.equals((java.lang.Object) classArray89);
        java.lang.Class[] classArray93 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray89);
        enhancer72.setInterfaces(classArray93);
        enhancer68.setInterfaces(classArray93);
        boolean boolean96 = namingPolicy62.equals((java.lang.Object) enhancer68);
        enhancer0.setNamingPolicy(namingPolicy62);
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(callbackArray23);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(callbackArray59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(namingPolicy76);
        org.junit.Assert.assertNotNull(callbackArray79);
        org.junit.Assert.assertNotNull(generatorStrategy81);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(classArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(classArray93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test06089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06089");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        boolean boolean53 = methodInfo51.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!]; values={(I)F=java.beans.PropertyDescriptor}]");
        org.mockito.cglib.core.Signature signature54 = methodInfo51.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(signature54);
    }

    @Test
    public void test06090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06090");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 1);
        org.mockito.asm.Type[] typeArray53 = methodInfo52.getExceptionTypes();
        java.lang.String str54 = methodInfo52.toString();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str58 = type57.toString();
        boolean boolean60 = type57.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str62 = type61.toString();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str64 = type63.toString();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type63 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray65);
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type57, typeArray65);
        org.mockito.asm.Type type68 = signature67.getReturnType();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str70 = type69.toString();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.toString();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type71 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray73);
        org.mockito.cglib.core.Signature signature75 = new org.mockito.cglib.core.Signature("float", type68, typeArray73);
        boolean boolean76 = methodInfo52.equals((java.lang.Object) signature75);
        java.lang.String str77 = signature75.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "J" + "'", str58, "J");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "J" + "'", str62, "J");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "I" + "'", str64, "I");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(I)J" + "'", str66, "(I)J");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "J" + "'", str70, "J");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "I" + "'", str72, "I");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(I)J" + "'", str74, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "float(I)J" + "'", str77, "float(I)J");
    }

    @Test
    public void test06091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06091");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 57);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray54 = methodInfo53.getExceptionTypes();
        org.mockito.asm.Type[] typeArray55 = methodInfo53.getExceptionTypes();
        org.mockito.cglib.core.Signature signature56 = methodInfo53.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(signature56);
    }

    @Test
    public void test06092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06092");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        java.lang.ClassLoader classLoader17 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Callback callback24 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray25 = new org.mockito.cglib.proxy.Callback[] { callback24 };
        enhancer18.setCallbacks(callbackArray25);
        enhancer18.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer29.setCallbackFilter(callbackFilter30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        enhancer29.setInterfaces(classArray32);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        enhancer36.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer36.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = enhancer35.getClassLoader();
        enhancer29.setClassLoader(classLoader41);
        enhancer18.setClassLoader(classLoader41);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer18.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy46 = enhancer18.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        enhancer49.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer49.getNamingPolicy();
        enhancer48.setNamingPolicy(namingPolicy52);
        enhancer47.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        enhancer47.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer47.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        enhancer63.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = null;
        enhancer63.setStrategy(generatorStrategy66);
        boolean boolean68 = enhancer63.getUseCache();
        org.mockito.cglib.proxy.Callback callback69 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray70 = new org.mockito.cglib.proxy.Callback[] { callback69 };
        enhancer63.setCallbacks(callbackArray70);
        enhancer47.setCallbacks(callbackArray70);
        enhancer18.setCallbacks(callbackArray70);
        enhancer0.setCallbacks(callbackArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class[] classArray75 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) callbackArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(callbackArray25);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(generatorStrategy46);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(callbackArray70);
    }

    @Test
    public void test06093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06093");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test06094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06094");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy7 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer8.setCallbackFilter(callbackFilter9);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        enhancer8.setInterfaces(classArray11);
        org.mockito.cglib.proxy.Callback callback14 = null;
        enhancer8.setCallback(callback14);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        enhancer16.setUseCache(true);
        java.lang.ClassLoader classLoader21 = enhancer16.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = enhancer16.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer23.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer23.setCallbackFilter(callbackFilter31);
        enhancer23.setUseCache(false);
        java.lang.ClassLoader classLoader35 = enhancer23.getClassLoader();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        boolean boolean49 = generatorStrategy22.equals((java.lang.Object) wildcardClass43);
        enhancer8.setStrategy(generatorStrategy22);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray51 = generatorStrategy7.generate((org.mockito.cglib.core.ClassGenerator) enhancer8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(generatorStrategy7);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNotNull(generatorStrategy22);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06095");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("[Lorg/mockito/asm/Type;", "B");
    }

    @Test
    public void test06096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06096");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("C", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test06097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06097");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method15 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strEnumeration14);
        org.junit.Assert.assertNull(method15);
    }

    @Test
    public void test06098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06098");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 9);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) -1);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test06099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06099");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        java.lang.reflect.Method method8 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06100");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]]", method1, method2);
        propertyDescriptor3.setShortDescription("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;");
        boolean boolean6 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06101");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setConstrained(true);
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06102");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("D");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06103");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer13.setUseFactory(false);
        propertyDescriptor3.setValue("V", (java.lang.Object) false);
        java.util.Enumeration<java.lang.String> strEnumeration20 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setWriteMethod(method21);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer24.setCallbackFilter(callbackFilter32);
        enhancer24.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer24.getClassLoader();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        propertyDescriptor40.setShortDescription("J");
        java.lang.Class<?> wildcardClass43 = propertyDescriptor40.getPropertyType();
        java.lang.Class<?> wildcardClass44 = propertyDescriptor40.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass44);
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass44);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("hi!", method50, method51);
        propertyDescriptor52.setShortDescription("J");
        java.lang.Class<?> wildcardClass55 = propertyDescriptor52.getPropertyType();
        java.lang.Class<?> wildcardClass56 = propertyDescriptor52.getClass();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.Class[] classArray68 = new java.lang.Class[] { wildcardClass56, wildcardClass64 };
        java.lang.String[] strArray69 = org.mockito.cglib.core.ReflectUtils.getNames(classArray68);
        int int70 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass44, classArray68);
        java.lang.String str72 = org.mockito.asm.Type.getConstructorDescriptor(constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo73 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71, 57);
        org.mockito.cglib.core.MethodInfo methodInfo76 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray77 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray78 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.asm.Type[] typeArray79 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor71);
        org.mockito.cglib.core.MethodInfo methodInfo80 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor71);
        propertyDescriptor3.setValue("()F", (java.lang.Object) constructor71);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(strEnumeration20);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str48, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str72, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo73);
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertNotNull(methodInfo76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(methodInfo80);
    }

    @Test
    public void test06104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06104");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(I)Ljava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor];");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06105");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("");
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        boolean boolean17 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06106");
        java.lang.ClassLoader classLoader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method2 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J=Ljava/beans/PropertyDescriptor;}]", classLoader1);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans.PropertyDescriptor[name=hi!; values={java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06107");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer13.setCallbackFilter(callbackFilter14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        boolean boolean17 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        enhancer18.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        enhancer18.setInterfaces(classArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer18.getStrategy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        boolean boolean33 = propertyDescriptor32.isHidden();
        propertyDescriptor32.setHidden(false);
        boolean boolean36 = generatorStrategy28.equals((java.lang.Object) false);
        enhancer13.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer13.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy38);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer43.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Callback callback48 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray49 = new org.mockito.cglib.proxy.Callback[] { callback48 };
        enhancer42.setCallbacks(callbackArray49);
        enhancer42.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer53.setCallbackFilter(callbackFilter54);
        java.lang.Class[] classArray56 = new java.lang.Class[] {};
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray56);
        enhancer53.setInterfaces(classArray56);
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        enhancer60.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer60.getNamingPolicy();
        enhancer59.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader65 = enhancer59.getClassLoader();
        enhancer53.setClassLoader(classLoader65);
        enhancer42.setClassLoader(classLoader65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy68 = enhancer42.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy69 = enhancer42.getStrategy();
        enhancer42.setAttemptLoad(true);
        enhancer42.setInterceptDuringConstruction(false);
        java.lang.ClassLoader classLoader74 = enhancer42.getClassLoader();
        java.lang.ClassLoader classLoader75 = enhancer42.getClassLoader();
        enhancer0.setClassLoader(classLoader75);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(callbackArray49);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader65);
        org.junit.Assert.assertNotNull(generatorStrategy68);
        org.junit.Assert.assertNotNull(generatorStrategy69);
        org.junit.Assert.assertNotNull(classLoader74);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test06108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06108");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray50 = signature49.getArgumentTypes();
        java.lang.String str51 = signature49.toString();
        org.mockito.asm.Type type52 = signature49.getReturnType();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str51, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(type52);
    }

    @Test
    public void test06109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06109");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer0.setCallback(callback4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        propertyDescriptor9.setShortDescription("J");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type22 = classInfo21.getType();
        org.mockito.asm.Type type23 = classInfo21.getType();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
    }

    @Test
    public void test06110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06110");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method12 = propertyDescriptor3.getWriteMethod();
        boolean boolean13 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setExpert(true);
        boolean boolean16 = propertyDescriptor3.isPreferred();
        java.util.Enumeration<java.lang.String> strEnumeration17 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method18 = null;
        propertyDescriptor3.setWriteMethod(method18);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strEnumeration17);
    }

    @Test
    public void test06111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06111");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Ljava.beans.PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06112");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.reflect.Method method28 = propertyDescriptor27.getReadMethod();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor27.getPropertyEditorClass();
        propertyDescriptor27.setValue("J", (java.lang.Object) 0.0d);
        boolean boolean33 = generatorStrategy23.equals((java.lang.Object) 0.0d);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass41);
        boolean boolean47 = generatorStrategy23.equals((java.lang.Object) wildcardClass41);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        boolean boolean52 = propertyDescriptor51.isHidden();
        boolean boolean53 = generatorStrategy23.equals((java.lang.Object) propertyDescriptor51);
        propertyDescriptor51.setName("Lorg/mockito/cglib/proxy/Enhancer;");
        propertyDescriptor51.setShortDescription("I");
        propertyDescriptor51.setExpert(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str46, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06113");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer0.setCallback(callback4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        propertyDescriptor9.setShortDescription("J");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type22 = classInfo21.getType();
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06114");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setShortDescription("float");
        boolean boolean11 = propertyDescriptor3.isExpert();
        boolean boolean12 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06115");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06116");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; bound; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06117");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()Lava.beans.PropertyDescriptor[name=hi!;");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ava.beans.PropertyDescriptor[name=hi!" + "'", str3, "ava.beans.PropertyDescriptor[name=hi!");
    }

    @Test
    public void test06118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06118");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader24 = null;
        enhancer0.setClassLoader(classLoader24);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy29 = null;
        enhancer26.setStrategy(generatorStrategy29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        enhancer26.setInterfaces(classArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer26.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer26.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        boolean boolean41 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setHidden(false);
        boolean boolean44 = generatorStrategy36.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy36);
        java.lang.Class<?> wildcardClass46 = generatorStrategy36.getClass();
        org.mockito.cglib.core.ClassInfo classInfo47 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classInfo47);
    }

    @Test
    public void test06119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06119");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.ClassInfo classInfo48 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.util.List list51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list52 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass20, list51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
    }

    @Test
    public void test06120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06120");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo56 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(methodInfo56);
    }

    @Test
    public void test06121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06121");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        boolean boolean5 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06122");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java/beans/FeatureDescriptorjava.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06123");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("(I)LI;");
        propertyDescriptor3.setPreferred(true);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer18.setCallbackFilter(callbackFilter26);
        enhancer18.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature32 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = signature32.equals((java.lang.Object) type33);
        java.lang.Class[] classArray35 = new java.lang.Class[] {};
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        boolean boolean38 = signature32.equals((java.lang.Object) classArray35);
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray35);
        enhancer18.setInterfaces(classArray35);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer18.getStrategy();
        java.lang.ClassLoader classLoader42 = null;
        enhancer18.setClassLoader(classLoader42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        enhancer44.setStrategy(generatorStrategy47);
        java.lang.Class[] classArray49 = new java.lang.Class[] {};
        java.lang.String[] strArray50 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray49);
        enhancer44.setInterfaces(classArray49);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer44.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy54 = enhancer44.getStrategy();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("hi!", method56, method57);
        boolean boolean59 = propertyDescriptor58.isHidden();
        propertyDescriptor58.setHidden(false);
        boolean boolean62 = generatorStrategy54.equals((java.lang.Object) false);
        enhancer18.setStrategy(generatorStrategy54);
        boolean boolean64 = enhancer18.getUseCache();
        enhancer18.setSerialVersionUID((java.lang.Long) 100L);
        enhancer18.setUseCache(true);
        java.beans.PropertyEditor propertyEditor69 = propertyDescriptor3.createPropertyEditor((java.lang.Object) enhancer18);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertNotNull(classArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(generatorStrategy54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(propertyEditor69);
    }

    @Test
    public void test06124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06124");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        enhancer6.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer24.setCallbacks(callbackArray31);
        enhancer18.setCallbacks(callbackArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer18.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy34);
        enhancer6.setUseFactory(true);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        propertyDescriptor41.setShortDescription("J");
        java.lang.Class<?> wildcardClass44 = propertyDescriptor41.getPropertyType();
        java.lang.Class<?> wildcardClass45 = propertyDescriptor41.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass45);
        boolean boolean48 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass45);
        enhancer6.setSuperclass((java.lang.Class) wildcardClass45);
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy51 = enhancer50.getStrategy();
        enhancer50.setSerialVersionUID((java.lang.Long) 1L);
        enhancer50.setSerialVersionUID((java.lang.Long) 10L);
        enhancer50.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer58.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer65.getNamingPolicy();
        enhancer64.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.Callback callback70 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray71 = new org.mockito.cglib.proxy.Callback[] { callback70 };
        enhancer64.setCallbacks(callbackArray71);
        enhancer58.setCallbacks(callbackArray71);
        enhancer50.setCallbacks(callbackArray71);
        enhancer6.setCallbacks(callbackArray71);
        enhancer6.setUseFactory(true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(generatorStrategy51);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(callbackArray71);
    }

    @Test
    public void test06125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06125");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer26.setCallbackFilter(callbackFilter27);
        boolean boolean29 = enhancer26.getAttemptLoad();
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer31.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        boolean boolean46 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setHidden(false);
        boolean boolean49 = generatorStrategy41.equals((java.lang.Object) false);
        enhancer26.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer26.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass60);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer68.getNamingPolicy();
        enhancer67.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Callback callback73 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray74 = new org.mockito.cglib.proxy.Callback[] { callback73 };
        enhancer67.setCallbacks(callbackArray74);
        enhancer0.setCallbacks(callbackArray74);
        enhancer0.setUseCache(false);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter81 = null;
        enhancer0.setCallbackFilter(callbackFilter81);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(callbackArray74);
    }

    @Test
    public void test06126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06126");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("(I)Lva.beans.PropertyDescriptor;", "int");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(I)Lva.beans.PropertyDescriptor;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06127");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getPropertyType();
        boolean boolean16 = propertyDescriptor14.isExpert();
        java.lang.Object obj18 = propertyDescriptor14.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor14.attributeNames();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        propertyDescriptor24.setShortDescription("J");
        java.lang.Class<?> wildcardClass27 = propertyDescriptor24.getPropertyType();
        java.lang.Class<?> wildcardClass28 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type[] typeArray30 = classInfo29.getInterfaces();
        org.mockito.asm.Type[] typeArray31 = classInfo29.getInterfaces();
        propertyDescriptor14.setValue("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", (java.lang.Object) classInfo29);
        propertyDescriptor3.setValue("()Ljava/beans/PropertyDescriptor;", (java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        java.lang.String str34 = propertyDescriptor3.getDisplayName();
        boolean boolean35 = propertyDescriptor3.isExpert();
        java.lang.Object obj37 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!]Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test06128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06128");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo11 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        propertyDescriptor24.setShortDescription("J");
        java.lang.Class<?> wildcardClass27 = propertyDescriptor24.getPropertyType();
        java.lang.Class<?> wildcardClass28 = propertyDescriptor24.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.lang.Class[] classArray32 = new java.lang.Class[] { wildcardClass20, wildcardClass28 };
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        int int34 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        int int35 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        java.lang.Class[] classArray37 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray32);
        org.mockito.cglib.proxy.Callback callback38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, classArray37, callback38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo11);
        org.junit.Assert.assertNotNull(classInfo12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(classArray37);
    }

    @Test
    public void test06129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06129");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class<?> wildcardClass13 = classArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray15 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.Class[] classArray16 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray15);
        java.lang.reflect.Method[] methodArray19 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray15, false, false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(propertyDescriptorArray15);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(methodArray19);
    }

    @Test
    public void test06130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06130");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setConstrained(true);
        boolean boolean6 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=C; hidden]");
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test06131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06131");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        boolean boolean23 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        enhancer24.setInterfaces(classArray29);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer24.getStrategy();
        enhancer13.setStrategy(generatorStrategy34);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy36 = enhancer13.getStrategy();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        java.lang.reflect.Method method41 = propertyDescriptor40.getReadMethod();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor40.getPropertyEditorClass();
        propertyDescriptor40.setValue("J", (java.lang.Object) 0.0d);
        boolean boolean46 = generatorStrategy36.equals((java.lang.Object) 0.0d);
        enhancer0.setStrategy(generatorStrategy36);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.asm.ClassVisitor classVisitor50 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
        org.junit.Assert.assertNotNull(generatorStrategy36);
        org.junit.Assert.assertNull(method41);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06132");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.reflect.Method method19 = propertyDescriptor18.getReadMethod();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor18.getPropertyEditorClass();
        propertyDescriptor18.setHidden(false);
        boolean boolean23 = propertyDescriptor18.isHidden();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor18.getPropertyEditorClass();
        propertyDescriptor18.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass27 = propertyDescriptor18.getPropertyType();
        propertyDescriptor18.setExpert(true);
        propertyDescriptor18.setExpert(true);
        boolean boolean32 = propertyDescriptor18.isExpert();
        propertyDescriptor18.setBound(true);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass43);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        propertyDescriptor18.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray47);
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor18);
        boolean boolean50 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method51 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(method51);
    }

    @Test
    public void test06133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06133");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str13 = type12.getClassName();
        int int15 = type12.getOpcode(19);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor" + "'", str13, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
    }

    @Test
    public void test06134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06134");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = enhancer0.getStrategy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(generatorStrategy18);
    }

    @Test
    public void test06135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06135");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setExpert(false);
        boolean boolean18 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setShortDescription("(I)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06136");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(generatorStrategy24);
    }

    @Test
    public void test06137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06137");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!](I)I");
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java.beans");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06138");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setValue("float", (java.lang.Object) 8);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyEditorClass();
        java.lang.String str24 = propertyDescriptor12.getShortDescription();
        propertyDescriptor12.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor12.attributeNames();
        boolean boolean28 = propertyDescriptor12.isHidden();
        propertyDescriptor12.setPreferred(false);
        propertyDescriptor12.setExpert(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06139");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer22.setCallbackFilter(callbackFilter23);
        boolean boolean25 = enhancer22.getAttemptLoad();
        enhancer22.setAttemptLoad(false);
        boolean boolean28 = enhancer22.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer29.setCallbackFilter(callbackFilter30);
        java.lang.Class[] classArray32 = new java.lang.Class[] {};
        java.lang.String[] strArray33 = org.mockito.cglib.core.ReflectUtils.getNames(classArray32);
        enhancer29.setInterfaces(classArray32);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer44.getNamingPolicy();
        enhancer43.setNamingPolicy(namingPolicy47);
        enhancer35.setNamingPolicy(namingPolicy47);
        java.lang.ClassLoader classLoader50 = enhancer35.getClassLoader();
        enhancer29.setClassLoader(classLoader50);
        enhancer22.setClassLoader(classLoader50);
        boolean boolean53 = classInfo8.equals((java.lang.Object) enhancer22);
        org.mockito.asm.Type[] typeArray54 = classInfo8.getInterfaces();
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray54);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(classLoader50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(classArray55);
    }

    @Test
    public void test06140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06140");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        org.mockito.asm.Type type10 = classInfo8.getType();
        java.lang.String str11 = type10.getInternalName();
        java.lang.String str12 = type10.getClassName();
        java.lang.String str13 = type10.getInternalName();
        java.lang.String str14 = type10.getDescriptor();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor" + "'", str12, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java/beans/PropertyDescriptor" + "'", str13, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str14, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test06141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06141");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("byte");
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        java.lang.String str16 = propertyDescriptor3.getName();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "byte" + "'", str15, "byte");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "byte" + "'", str16, "byte");
    }

    @Test
    public void test06142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06142");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("Ljava/beans/PropertyDescriptor;");
        org.mockito.asm.Type[] typeArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature4 = new org.mockito.cglib.core.Signature("", type2, typeArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
    }

    @Test
    public void test06143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06143");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) type1);
        java.lang.String str3 = type0.getClassName();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer6.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy9);
        enhancer4.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer4.setCallbackFilter(callbackFilter12);
        enhancer4.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer4.getClassLoader();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass24);
        enhancer4.setSuperclass((java.lang.Class) wildcardClass24);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass24);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        propertyDescriptor32.setShortDescription("J");
        java.lang.Class<?> wildcardClass35 = propertyDescriptor32.getPropertyType();
        java.lang.Class<?> wildcardClass36 = propertyDescriptor32.getClass();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        propertyDescriptor40.setShortDescription("J");
        java.lang.Class<?> wildcardClass43 = propertyDescriptor40.getPropertyType();
        java.lang.Class<?> wildcardClass44 = propertyDescriptor40.getClass();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        java.lang.Class[] classArray48 = new java.lang.Class[] { wildcardClass36, wildcardClass44 };
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        int int50 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray48);
        java.lang.reflect.Constructor constructor51 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass24, classArray48);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor51);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor51);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor51);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor51);
        boolean boolean56 = type0.equals((java.lang.Object) methodInfo55);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "byte" + "'", str3, "byte");
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str28, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(constructor51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06144");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 0, (byte) 10, (byte) 100, (byte) 0 };
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer7.setCallbackFilter(callbackFilter15);
        enhancer7.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = signature21.equals((java.lang.Object) type22);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        boolean boolean27 = signature21.equals((java.lang.Object) classArray24);
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        enhancer7.setInterfaces(classArray24);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer7.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer7.getNamingPolicy();
        boolean boolean32 = enhancer7.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer7.getNamingPolicy();
        enhancer7.setUseFactory(false);
        boolean boolean36 = enhancer7.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer7.setCallbackFilter(callbackFilter37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer39.setCallbacks(callbackArray46);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy48 = enhancer39.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        enhancer39.setCallbackFilter(callbackFilter49);
        org.mockito.cglib.proxy.Callback callback51 = null;
        enhancer39.setCallback(callback51);
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer55.getNamingPolicy();
        enhancer54.setNamingPolicy(namingPolicy58);
        enhancer53.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter61 = null;
        enhancer53.setCallbackFilter(callbackFilter61);
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer65.getNamingPolicy();
        enhancer64.setNamingPolicy(namingPolicy68);
        enhancer63.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter71 = null;
        enhancer63.setCallbackFilter(callbackFilter71);
        enhancer63.setUseCache(false);
        java.lang.ClassLoader classLoader75 = enhancer63.getClassLoader();
        enhancer53.setClassLoader(classLoader75);
        enhancer39.setClassLoader(classLoader75);
        enhancer7.setClassLoader(classLoader75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class79 = org.mockito.cglib.core.ReflectUtils.defineClass("()F", byteArray6, classLoader75);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 10, 100, 0]");
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertNotNull(generatorStrategy48);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test06145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06145");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("Lava.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06146");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        org.mockito.asm.Type type20 = classInfo8.getType();
        int int21 = type20.getSize();
        java.lang.String str22 = type20.toString();
        java.lang.reflect.Method method24 = null;
        java.lang.reflect.Method method25 = null;
        java.beans.PropertyDescriptor propertyDescriptor26 = new java.beans.PropertyDescriptor("hi!", method24, method25);
        propertyDescriptor26.setShortDescription("J");
        java.lang.Class<?> wildcardClass29 = propertyDescriptor26.getPropertyType();
        java.lang.Class<?> wildcardClass30 = propertyDescriptor26.getClass();
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type[] typeArray32 = classInfo31.getInterfaces();
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray32);
        int int35 = type20.getOpcode((int) (byte) 100);
        int int36 = type20.getDimensions();
        org.mockito.asm.Type type37 = type20.getElementType();
        org.mockito.asm.Type type38 = type37.getElementType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str22, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str33, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 104 + "'", int35 == 104);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
    }

    @Test
    public void test06147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06147");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.reflect.Method method18 = propertyDescriptor17.getReadMethod();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setHidden(false);
        boolean boolean22 = propertyDescriptor17.isHidden();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor17.getPropertyType();
        propertyDescriptor17.setExpert(true);
        propertyDescriptor17.setExpert(true);
        boolean boolean31 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setBound(true);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        propertyDescriptor17.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray46);
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        propertyDescriptor53.setShortDescription("J");
        java.lang.Class<?> wildcardClass56 = propertyDescriptor53.getPropertyType();
        java.lang.Class<?> wildcardClass57 = propertyDescriptor53.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray59 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass57);
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass57);
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, true, true);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray49, methodArray63);
        java.beans.PropertyEditor propertyEditor65 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodArray63);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(propertyDescriptorArray59);
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNull(propertyEditor65);
    }

    @Test
    public void test06148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06148");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", method1, method2);
        propertyDescriptor3.setName("void");
        boolean boolean6 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test06149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06149");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setWriteMethod(method12);
        java.lang.String str14 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method17 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(strEnumeration10);
        org.junit.Assert.assertNotNull(strEnumeration11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test06150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06150");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer14.setCallbackFilter(callbackFilter22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer24.setCallbackFilter(callbackFilter32);
        enhancer24.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer24.getClassLoader();
        enhancer14.setClassLoader(classLoader36);
        enhancer0.setClassLoader(classLoader36);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        boolean boolean47 = propertyDescriptor43.isPreferred();
        propertyDescriptor43.setHidden(true);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor43.getPropertyEditorClass();
        java.lang.String str51 = propertyDescriptor43.getShortDescription();
        java.lang.String str52 = propertyDescriptor43.getShortDescription();
        boolean boolean53 = namingPolicy39.equals((java.lang.Object) propertyDescriptor43);
        propertyDescriptor43.setHidden(false);
        java.lang.String str56 = propertyDescriptor43.getName();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "J" + "'", str51, "J");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "J" + "'", str52, "J");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
    }

    @Test
    public void test06151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06151");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.reflect.Method method9 = propertyDescriptor8.getReadMethod();
        propertyDescriptor8.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor8.attributeNames();
        java.lang.reflect.Method method13 = propertyDescriptor8.getWriteMethod();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method13);
        propertyDescriptor3.setName("C");
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden; propertyEditorClass=class java.beans.PropertyDescriptor]");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getPropertyEditorClass();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        enhancer33.setNamingPolicy(namingPolicy38);
        enhancer25.setNamingPolicy(namingPolicy38);
        enhancer25.setUseFactory(false);
        enhancer25.setInterceptDuringConstruction(true);
        enhancer25.setInterceptDuringConstruction(false);
        enhancer25.setAttemptLoad(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = enhancer25.getStrategy();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=; hidden]", (java.lang.Object) generatorStrategy50);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(generatorStrategy50);
    }

    @Test
    public void test06152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06152");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        boolean boolean12 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
    }

    @Test
    public void test06153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06153");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setValue("J", (java.lang.Object) 0.0d);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setDisplayName("D");
        java.lang.String str12 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass16 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        org.mockito.cglib.proxy.Callback callback19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass17, callback19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "D" + "'", str12, "D");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
    }

    @Test
    public void test06154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06154");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(true);
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback7 = null;
        enhancer0.setCallback(callback7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.toString();
        int int15 = type13.getSize();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.toString();
        int int19 = type17.getSize();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.DOUBLE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str23 = type22.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type16, type17, type20, type21, type22, type24 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str29 = type28.toString();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.toString();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type13, type27, type28, type30 };
        org.mockito.cglib.core.Signature signature33 = new org.mockito.cglib.core.Signature("char", type12, typeArray32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("I");
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray37);
        org.mockito.cglib.core.Signature signature39 = new org.mockito.cglib.core.Signature("hi!", type12, typeArray37);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray37);
        java.lang.Class[] classArray41 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray40);
        enhancer0.setInterfaces(classArray41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str45 = type44.toString();
        boolean boolean47 = type44.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.toString();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type50 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray52);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type44, typeArray52);
        java.lang.String str55 = signature54.getName();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        enhancer56.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer56.setCallbackFilter(callbackFilter64);
        enhancer56.setUseCache(false);
        java.lang.ClassLoader classLoader68 = enhancer56.getClassLoader();
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("hi!", method70, method71);
        propertyDescriptor72.setShortDescription("J");
        java.lang.Class<?> wildcardClass75 = propertyDescriptor72.getPropertyType();
        java.lang.Class<?> wildcardClass76 = propertyDescriptor72.getClass();
        org.mockito.cglib.core.ClassInfo classInfo77 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass76);
        enhancer56.setSuperclass((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray79 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass76);
        org.mockito.cglib.core.ClassInfo classInfo80 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass76);
        boolean boolean82 = signature54.equals((java.lang.Object) propertyDescriptorArray81);
        java.lang.Class[] classArray83 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray81);
        java.lang.String[] strArray84 = org.mockito.cglib.core.ReflectUtils.getNames(classArray83);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.beans.PropertyDescriptor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "I" + "'", str18, "I");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(FIDCCJ)I" + "'", str26, "(FIDCCJ)I");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "I" + "'", str29, "I");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "I" + "'", str31, "I");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(I)LI;" + "'", str38, "(I)LI;");
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "J" + "'", str45, "J");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "J" + "'", str49, "J");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "I" + "'", str51, "I");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(I)J" + "'", str53, "(I)J");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str55, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(classInfo77);
        org.junit.Assert.assertNotNull(propertyDescriptorArray79);
        org.junit.Assert.assertNotNull(classInfo80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(classArray83);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test06155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06155");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        java.lang.Class<?> wildcardClass8 = namingPolicy5.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.lang.Object obj10 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method11 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.cglib.core.DefaultNamingPolicy is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test06156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06156");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        enhancer6.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer24.setCallbacks(callbackArray31);
        enhancer18.setCallbacks(callbackArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer18.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.Callback callback42 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray43 = new org.mockito.cglib.proxy.Callback[] { callback42 };
        enhancer36.setCallbacks(callbackArray43);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer36.getStrategy();
        enhancer36.setUseCache(true);
        boolean boolean48 = namingPolicy34.equals((java.lang.Object) enhancer36);
        boolean boolean50 = namingPolicy34.equals((java.lang.Object) "S");
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass60);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray66, false, false);
        org.mockito.cglib.core.Predicate predicate70 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = namingPolicy34.getClassName("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;", "init>(Ljava.beans.PropertyDescriptor", (java.lang.Object) false, predicate70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(callbackArray43);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(methodArray69);
    }

    @Test
    public void test06157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06157");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        java.util.Enumeration<java.lang.String> strEnumeration7 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        boolean boolean12 = propertyDescriptor3.isHidden();
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strEnumeration7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06158");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        boolean boolean14 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Callback callback19 = null;
        enhancer0.setCallback(callback19);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer22.getNamingPolicy();
        enhancer21.setNamingPolicy(namingPolicy25);
        org.mockito.cglib.proxy.Callback callback27 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray28 = new org.mockito.cglib.proxy.Callback[] { callback27 };
        enhancer21.setCallbacks(callbackArray28);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy30 = enhancer21.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer21.setCallbackFilter(callbackFilter31);
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer21.setCallback(callback33);
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy50 = enhancer47.getNamingPolicy();
        enhancer46.setNamingPolicy(namingPolicy50);
        enhancer45.setNamingPolicy(namingPolicy50);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter53 = null;
        enhancer45.setCallbackFilter(callbackFilter53);
        enhancer45.setUseCache(false);
        java.lang.ClassLoader classLoader57 = enhancer45.getClassLoader();
        enhancer35.setClassLoader(classLoader57);
        enhancer21.setClassLoader(classLoader57);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer21.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(callbackArray28);
        org.junit.Assert.assertNotNull(generatorStrategy30);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(namingPolicy50);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(namingPolicy60);
    }

    @Test
    public void test06159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06159");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer1.setCallbackFilter(callbackFilter9);
        enhancer1.setUseCache(false);
        java.lang.ClassLoader classLoader13 = enhancer1.getClassLoader();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.cglib.core.ClassInfo classInfo22 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        enhancer1.setSuperclass((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass21);
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        propertyDescriptor29.setShortDescription("J");
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyType();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor29.getClass();
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray43 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.Class[] classArray45 = new java.lang.Class[] { wildcardClass33, wildcardClass41 };
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray45);
        java.lang.reflect.Constructor constructor48 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray45);
        java.lang.String str49 = org.mockito.asm.Type.getConstructorDescriptor(constructor48);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor48, (int) (short) 10);
        org.mockito.cglib.core.ClassInfo classInfo52 = methodInfo51.getClassInfo();
        org.mockito.cglib.core.Signature signature53 = methodInfo51.getSignature();
        org.mockito.asm.Type[] typeArray54 = methodInfo51.getExceptionTypes();
        int int55 = methodInfo51.getModifiers();
        org.mockito.cglib.core.Signature signature56 = methodInfo51.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo57 = methodInfo51.getClassInfo();
        org.mockito.asm.Type type58 = classInfo57.getType();
        org.mockito.asm.Type[] typeArray60 = org.mockito.asm.Type.getArgumentTypes("(I)Ljava/beans/PropertyDescriptor;");
        org.mockito.cglib.core.Signature signature61 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=float; propertyEditorClass=class java.beans.PropertyDescriptor]", type58, typeArray60);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(classLoader13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(classInfo22);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str25, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(propertyDescriptorArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(constructor48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str49, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(classInfo52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(signature56);
        org.junit.Assert.assertNotNull(classInfo57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray60);
    }

    @Test
    public void test06160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06160");
        java.lang.Class[] classArray0 = new java.lang.Class[] {};
        java.lang.String[] strArray1 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        java.lang.String[] strArray2 = org.mockito.cglib.core.ReflectUtils.getNames(classArray0);
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = signature5.equals((java.lang.Object) type6);
        java.lang.Class[] classArray8 = new java.lang.Class[] {};
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.String[] strArray10 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        boolean boolean11 = signature5.equals((java.lang.Object) classArray8);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray8);
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray25 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray22, false, true);
        java.lang.reflect.Method[] methodArray26 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray12, methodArray25);
        java.lang.reflect.Method[] methodArray27 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray2, methodArray25);
        java.lang.reflect.Method[] methodArray28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method[] methodArray29 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray2, methodArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertNotNull(methodArray25);
        org.junit.Assert.assertNotNull(methodArray26);
        org.junit.Assert.assertNotNull(methodArray27);
    }

    @Test
    public void test06161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06161");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.reflect.Method method26 = propertyDescriptor25.getReadMethod();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setHidden(false);
        boolean boolean30 = propertyDescriptor25.isHidden();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setName("java/beans/PropertyDescriptor");
        propertyDescriptor25.setName("(I)LI;");
        propertyDescriptor25.setShortDescription("(I)LI;");
        java.lang.reflect.Method method38 = propertyDescriptor25.getReadMethod();
        boolean boolean39 = classInfo8.equals((java.lang.Object) propertyDescriptor25);
        propertyDescriptor25.setConstrained(false);
        propertyDescriptor25.setShortDescription("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        propertyDescriptor25.setDisplayName("java.beans.PropertyDescriptor[name=()V]");
        java.lang.Object obj47 = propertyDescriptor25.getValue("()Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test06162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06162");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]; preferred; values={Lava.beans.PropertyDescriptor[name=hi!;=true; J=0.0}; bound; propertyEditorClass=class java.beans.PropertyDescriptor]", "ava.beans.PropertyDescriptor[name=hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name 'java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]; preferred; values={Lava.beans.PropertyDescriptor[name=hi!;=true; J=0.0}; bound; propertyEditorClass=class java.beans.PropertyDescriptor]' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06163");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        int int12 = classInfo8.getModifiers();
        org.mockito.asm.Type type13 = classInfo8.getSuperType();
        org.mockito.asm.Type type14 = classInfo8.getType();
        org.mockito.asm.Type type15 = type14.getElementType();
        java.lang.String str16 = type14.getClassName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.beans.PropertyDescriptor" + "'", str16, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test06164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06164");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.ClassLoader classLoader13 = null;
        enhancer0.setClassLoader(classLoader13);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(true);
        boolean boolean19 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class22 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test06165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06165");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("(I)I", method18, method19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setConstrained(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor20.getPropertyEditorClass();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        enhancer27.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer27.setCallbackFilter(callbackFilter35);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader39 = enhancer27.getClassLoader();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo48 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass47);
        enhancer27.setSuperclass((java.lang.Class) wildcardClass47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass47);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("hi!", method53, method54);
        propertyDescriptor55.setShortDescription("J");
        java.lang.Class<?> wildcardClass58 = propertyDescriptor55.getPropertyType();
        java.lang.Class<?> wildcardClass59 = propertyDescriptor55.getClass();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass59, wildcardClass67 };
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray71);
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray71);
        java.lang.reflect.Constructor constructor74 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass47, classArray71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.Signature signature76 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor74);
        java.lang.String str77 = org.mockito.asm.Type.getConstructorDescriptor(constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74);
        int int80 = methodInfo79.getModifiers();
        propertyDescriptor20.setValue("java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]", (java.lang.Object) int80);
        java.lang.String str82 = propertyDescriptor20.getShortDescription();
        propertyDescriptor20.setPreferred(false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str51, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(constructor74);
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertNotNull(signature76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str77, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(I)I" + "'", str82, "(I)I");
    }

    @Test
    public void test06166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06166");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LI;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06167");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.String str15 = propertyDescriptor14.getDisplayName();
        java.lang.String str16 = propertyDescriptor14.getName();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer18.setCallbackFilter(callbackFilter26);
        enhancer18.setUseCache(false);
        java.lang.ClassLoader classLoader30 = enhancer18.getClassLoader();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        propertyDescriptor34.setShortDescription("J");
        java.lang.Class<?> wildcardClass37 = propertyDescriptor34.getPropertyType();
        java.lang.Class<?> wildcardClass38 = propertyDescriptor34.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        enhancer18.setSuperclass((java.lang.Class) wildcardClass38);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = null;
        enhancer42.setStrategy(generatorStrategy45);
        java.lang.Class[] classArray47 = new java.lang.Class[] {};
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        enhancer42.setInterfaces(classArray47);
        int int51 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray47);
        enhancer18.setInterfaces(classArray47);
        java.lang.Class[] classArray53 = new java.lang.Class[] {};
        int int54 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray53);
        enhancer18.setInterfaces(classArray53);
        propertyDescriptor14.setValue("org.mockito.cglib.core.DefaultNamingPolicy", (java.lang.Object) classArray53);
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        java.util.List list59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.getMethods((java.lang.Class) wildcardClass7, classArray53, list59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str9, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java/beans/PropertyDescriptor" + "'", str40, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test06168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06168");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer10.setUseFactory(false);
        enhancer10.setInterceptDuringConstruction(true);
        propertyDescriptor3.setValue("(FIDCCJ)I", (java.lang.Object) enhancer10);
        boolean boolean19 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method20 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj23 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(method20);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test06169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06169");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setName("I(I)I");
        org.junit.Assert.assertNull(method4);
    }

    @Test
    public void test06170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06170");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("I", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method5 = null;
        propertyDescriptor3.setReadMethod(method5);
        boolean boolean7 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06171");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method8 = propertyDescriptor3.getWriteMethod();
        java.lang.String str9 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getPropertyType();
        java.lang.String str12 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setBound(true);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test06172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06172");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.toString();
        java.lang.String str7 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str3, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(I)I" + "'", str4, "(I)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/FeatureDescriptor" + "'", str5, "java/beans/FeatureDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str6, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(I)I" + "'", str7, "(I)I");
    }

    @Test
    public void test06173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06173");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method10 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setShortDescription("Lorg/mockito/cglib/proxy/Enhancer;");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test06174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06174");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        java.lang.String str51 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) '4');
        org.mockito.cglib.core.MethodInfo methodInfo56 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 104);
        org.mockito.asm.Type[] typeArray57 = methodInfo56.getExceptionTypes();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str51, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(methodInfo56);
        org.junit.Assert.assertNotNull(typeArray57);
    }

    @Test
    public void test06175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06175");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer2.setUseFactory(false);
        enhancer2.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.Callback callback16 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray17 = new org.mockito.cglib.proxy.Callback[] { callback16 };
        enhancer10.setCallbacks(callbackArray17);
        enhancer10.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer21.setCallbackFilter(callbackFilter22);
        java.lang.Class[] classArray24 = new java.lang.Class[] {};
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray24);
        enhancer21.setInterfaces(classArray24);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        java.lang.ClassLoader classLoader33 = enhancer27.getClassLoader();
        enhancer21.setClassLoader(classLoader33);
        enhancer10.setClassLoader(classLoader33);
        enhancer2.setClassLoader(classLoader33);
        boolean boolean37 = type0.equals((java.lang.Object) enhancer2);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        enhancer38.setStrategy(generatorStrategy41);
        boolean boolean43 = enhancer38.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = null;
        enhancer44.setStrategy(generatorStrategy47);
        boolean boolean49 = enhancer44.getUseCache();
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer44.setCallbacks(callbackArray51);
        enhancer38.setCallbacks(callbackArray51);
        enhancer2.setCallbacks(callbackArray51);
        enhancer2.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader57 = enhancer2.getClassLoader();
        java.lang.Class<?> wildcardClass58 = classLoader57.getClass();
        java.util.List list59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list60 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass58, list59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "char" + "'", str1, "char");
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(callbackArray17);
        org.junit.Assert.assertNotNull(classArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(callbackArray51);
        org.junit.Assert.assertNotNull(classLoader57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test06176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06176");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method12 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test06177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06177");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        java.lang.String str5 = propertyDescriptor4.getName();
        boolean boolean6 = propertyDescriptor4.isHidden();
        java.lang.String str7 = propertyDescriptor4.getName();
        propertyDescriptor4.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer11.setUseFactory(false);
        enhancer11.setInterceptDuringConstruction(true);
        propertyDescriptor4.setValue("(FIDCCJ)I", (java.lang.Object) enhancer11);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer11.setCallbackFilter(callbackFilter20);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer24.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy27);
        enhancer22.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy34);
        enhancer22.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer22.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy37);
        boolean boolean39 = enhancer11.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = null;
        enhancer40.setStrategy(generatorStrategy43);
        java.lang.Class[] classArray45 = new java.lang.Class[] {};
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray45);
        enhancer40.setInterfaces(classArray45);
        enhancer40.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter52 = null;
        enhancer51.setCallbackFilter(callbackFilter52);
        java.lang.Class[] classArray54 = new java.lang.Class[] {};
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        enhancer51.setInterfaces(classArray54);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        java.lang.ClassLoader classLoader63 = enhancer57.getClassLoader();
        enhancer51.setClassLoader(classLoader63);
        enhancer40.setClassLoader(classLoader63);
        enhancer11.setClassLoader(classLoader63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor67 = org.mockito.cglib.core.ReflectUtils.findConstructor("java/beans/FeatureDescriptor(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;", classLoader63);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.ClassNotFoundException-->java/beans/FeatureDescriptor");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(classArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader63);
    }

    @Test
    public void test06178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06178");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy11 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        boolean boolean14 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test06179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06179");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        boolean boolean20 = type17.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type17, typeArray25);
        java.lang.String str28 = type17.getClassName();
        propertyDescriptor3.setValue("va.beans.PropertyDescriptor", (java.lang.Object) type17);
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method32 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setHidden(true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "J" + "'", str22, "J");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)J" + "'", str26, "(I)J");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "long" + "'", str28, "long");
        org.junit.Assert.assertNull(method32);
    }

    @Test
    public void test06180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06180");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 10);
        org.mockito.asm.Type[] typeArray51 = methodInfo50.getExceptionTypes();
        org.mockito.asm.Type[] typeArray52 = methodInfo50.getExceptionTypes();
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray53);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test06181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06181");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06182");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        java.lang.String str12 = type1.getClassName();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        propertyDescriptor29.setShortDescription("J");
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyType();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor29.getClass();
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        enhancer13.setSuperclass((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        propertyDescriptor41.setShortDescription("J");
        java.lang.Class<?> wildcardClass44 = propertyDescriptor41.getPropertyType();
        java.lang.Class<?> wildcardClass45 = propertyDescriptor41.getClass();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        propertyDescriptor49.setShortDescription("J");
        java.lang.Class<?> wildcardClass52 = propertyDescriptor49.getPropertyType();
        java.lang.Class<?> wildcardClass53 = propertyDescriptor49.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass45, wildcardClass53 };
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass33, classArray57);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo62 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60);
        java.lang.String str63 = org.mockito.asm.Type.getConstructorDescriptor(constructor60);
        org.mockito.cglib.core.Signature signature64 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor60);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor60);
        java.lang.String str66 = org.mockito.asm.Type.getConstructorDescriptor(constructor60);
        org.mockito.cglib.core.MethodInfo methodInfo68 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60, (int) (byte) 0);
        org.mockito.cglib.core.MethodInfo methodInfo70 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor60, 65);
        org.mockito.asm.Type[] typeArray71 = methodInfo70.getExceptionTypes();
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray71);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "long" + "'", str12, "long");
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str37, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(methodInfo62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str63, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str65, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str66, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo68);
        org.junit.Assert.assertNotNull(methodInfo70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "()J" + "'", str72, "()J");
    }

    @Test
    public void test06183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06183");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 10, (byte) 10, (byte) -1, (byte) 10 };
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer8.setCallbackFilter(callbackFilter9);
        boolean boolean11 = enhancer8.getAttemptLoad();
        boolean boolean12 = enhancer8.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy16 = null;
        enhancer13.setStrategy(generatorStrategy16);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer13.setInterfaces(classArray18);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer13.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer13.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        boolean boolean28 = propertyDescriptor27.isHidden();
        propertyDescriptor27.setHidden(false);
        boolean boolean31 = generatorStrategy23.equals((java.lang.Object) false);
        enhancer8.setStrategy(generatorStrategy23);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer8.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer34.setCallbackFilter(callbackFilter35);
        boolean boolean37 = enhancer34.getAttemptLoad();
        boolean boolean38 = enhancer34.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        enhancer39.setStrategy(generatorStrategy42);
        java.lang.Class[] classArray44 = new java.lang.Class[] {};
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        enhancer39.setInterfaces(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer39.getStrategy();
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        boolean boolean54 = propertyDescriptor53.isHidden();
        propertyDescriptor53.setHidden(false);
        boolean boolean57 = generatorStrategy49.equals((java.lang.Object) false);
        enhancer34.setStrategy(generatorStrategy49);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer34.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy59);
        java.lang.reflect.Method method62 = null;
        java.lang.reflect.Method method63 = null;
        java.beans.PropertyDescriptor propertyDescriptor64 = new java.beans.PropertyDescriptor("hi!", method62, method63);
        propertyDescriptor64.setShortDescription("J");
        java.lang.Class<?> wildcardClass67 = propertyDescriptor64.getPropertyType();
        java.lang.Class<?> wildcardClass68 = propertyDescriptor64.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        java.beans.PropertyDescriptor[] propertyDescriptorArray70 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        enhancer8.setSuperclass((java.lang.Class) wildcardClass68);
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer76 = new org.mockito.cglib.proxy.Enhancer();
        enhancer76.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy79 = enhancer76.getNamingPolicy();
        enhancer75.setNamingPolicy(namingPolicy79);
        org.mockito.cglib.proxy.Callback callback81 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray82 = new org.mockito.cglib.proxy.Callback[] { callback81 };
        enhancer75.setCallbacks(callbackArray82);
        enhancer8.setCallbacks(callbackArray82);
        boolean boolean85 = enhancer8.getAttemptLoad();
        java.lang.ClassLoader classLoader86 = enhancer8.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class87 = org.mockito.cglib.core.ReflectUtils.defineClass("float(I)J", byteArray7, classLoader86);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 1, 10, 10, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(propertyDescriptorArray70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(namingPolicy79);
        org.junit.Assert.assertNotNull(callbackArray82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(classLoader86);
    }

    @Test
    public void test06184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06184");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.ClassLoader classLoader13 = null;
        enhancer0.setClassLoader(classLoader13);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(true);
        boolean boolean19 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Callback callback22 = null;
        enhancer0.setCallback(callback22);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer0.getNamingPolicy();
        org.mockito.asm.ClassVisitor classVisitor25 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy24);
    }

    @Test
    public void test06185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06185");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str12 = type11.toString();
        boolean boolean14 = type11.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str16 = type15.toString();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str18 = type17.toString();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type17 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type11, typeArray19);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy25 = null;
        enhancer22.setStrategy(generatorStrategy25);
        boolean boolean27 = enhancer22.getUseCache();
        org.mockito.cglib.proxy.Callback callback28 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray29 = new org.mockito.cglib.proxy.Callback[] { callback28 };
        enhancer22.setCallbacks(callbackArray29);
        enhancer22.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback33 = null;
        enhancer22.setCallback(callback33);
        boolean boolean35 = signature21.equals((java.lang.Object) enhancer22);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer22.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        enhancer40.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer40.setCallbackFilter(callbackFilter48);
        enhancer40.setUseCache(false);
        java.lang.ClassLoader classLoader52 = enhancer40.getClassLoader();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.cglib.core.ClassInfo classInfo61 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass60);
        enhancer40.setSuperclass((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray63 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass60);
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("hi!", method66, method67);
        propertyDescriptor68.setShortDescription("J");
        java.lang.Class<?> wildcardClass71 = propertyDescriptor68.getPropertyType();
        java.lang.Class<?> wildcardClass72 = propertyDescriptor68.getClass();
        java.lang.reflect.Method method74 = null;
        java.lang.reflect.Method method75 = null;
        java.beans.PropertyDescriptor propertyDescriptor76 = new java.beans.PropertyDescriptor("hi!", method74, method75);
        propertyDescriptor76.setShortDescription("J");
        java.lang.Class<?> wildcardClass79 = propertyDescriptor76.getPropertyType();
        java.lang.Class<?> wildcardClass80 = propertyDescriptor76.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass80);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.Class[] classArray84 = new java.lang.Class[] { wildcardClass72, wildcardClass80 };
        java.lang.String[] strArray85 = org.mockito.cglib.core.ReflectUtils.getNames(classArray84);
        int int86 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray84);
        java.lang.reflect.Constructor constructor87 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass60, classArray84);
        java.lang.String str88 = org.mockito.asm.Type.getConstructorDescriptor(constructor87);
        org.mockito.cglib.core.MethodInfo methodInfo89 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor87);
        org.mockito.cglib.core.MethodInfo methodInfo90 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor87);
        org.mockito.cglib.core.Predicate predicate91 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = namingPolicy36.getClassName("ava.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor", "java.beans.PropertyDescriptor[name=hi!; displayName=()LI(I)I;]", (java.lang.Object) constructor87, predicate91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "J" + "'", str12, "J");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "J" + "'", str16, "J");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "I" + "'", str18, "I");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(I)J" + "'", str20, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(callbackArray29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(classLoader52);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(classInfo61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str64, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNull(wildcardClass79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(classArray84);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(constructor87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str88, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo89);
        org.junit.Assert.assertNotNull(methodInfo90);
    }

    @Test
    public void test06186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06186");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer13.setCallbackFilter(callbackFilter14);
        boolean boolean16 = enhancer13.getAttemptLoad();
        boolean boolean17 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        enhancer18.setStrategy(generatorStrategy21);
        java.lang.Class[] classArray23 = new java.lang.Class[] {};
        java.lang.String[] strArray24 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        java.lang.String[] strArray25 = org.mockito.cglib.core.ReflectUtils.getNames(classArray23);
        enhancer18.setInterfaces(classArray23);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer18.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer18.getStrategy();
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        boolean boolean33 = propertyDescriptor32.isHidden();
        propertyDescriptor32.setHidden(false);
        boolean boolean36 = generatorStrategy28.equals((java.lang.Object) false);
        enhancer13.setStrategy(generatorStrategy28);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer13.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy38);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(classArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(namingPolicy42);
    }

    @Test
    public void test06187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06187");
        java.lang.reflect.Member member0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.MethodInfo methodInfo2 = org.mockito.cglib.core.ReflectUtils.getMethodInfo(member0, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot get signature of a field");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06188");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setName("");
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setWriteMethod(method14);
        java.lang.reflect.Method method16 = propertyDescriptor3.getWriteMethod();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        boolean boolean19 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method16);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06189");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer11.getNamingPolicy();
        enhancer10.setNamingPolicy(namingPolicy14);
        enhancer9.setNamingPolicy(namingPolicy14);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter17 = null;
        enhancer9.setCallbackFilter(callbackFilter17);
        enhancer9.setUseCache(false);
        java.lang.ClassLoader classLoader21 = enhancer9.getClassLoader();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        propertyDescriptor25.setShortDescription("J");
        java.lang.Class<?> wildcardClass28 = propertyDescriptor25.getPropertyType();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor25.getClass();
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass29);
        enhancer9.setSuperclass((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray32 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        propertyDescriptor45.setShortDescription("J");
        java.lang.Class<?> wildcardClass48 = propertyDescriptor45.getPropertyType();
        java.lang.Class<?> wildcardClass49 = propertyDescriptor45.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.Class[] classArray53 = new java.lang.Class[] { wildcardClass41, wildcardClass49 };
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        int int55 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray53);
        java.lang.reflect.Constructor constructor56 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass29, classArray53);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass29);
        java.beans.PropertyDescriptor[] propertyDescriptorArray58 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass29);
        java.lang.reflect.Method[] methodArray61 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray58, false, false);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray58, true, false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(classLoader21);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(propertyDescriptorArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str33, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(constructor56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray58);
        org.junit.Assert.assertNotNull(methodArray61);
        org.junit.Assert.assertNotNull(methodArray64);
    }

    @Test
    public void test06190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06190");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer12.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader27 = enhancer12.getClassLoader();
        java.lang.ClassLoader classLoader28 = enhancer12.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer12.getNamingPolicy();
        enhancer12.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer32.setCallbackFilter(callbackFilter40);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader44 = enhancer32.getClassLoader();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str54 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass52);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = enhancer56.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer56.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy63);
        enhancer12.setNamingPolicy(namingPolicy63);
        enhancer0.setNamingPolicy(namingPolicy63);
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("hi!", method70, method71);
        propertyDescriptor72.setShortDescription("J");
        java.lang.Class<?> wildcardClass75 = propertyDescriptor72.getPropertyType();
        java.lang.Class<?> wildcardClass76 = propertyDescriptor72.getClass();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass76);
        java.lang.String str79 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass76);
        java.lang.reflect.Method[] methodArray84 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray81, false, true);
        java.lang.reflect.Method[] methodArray87 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray81, false, true);
        org.mockito.cglib.core.Predicate predicate88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = namingPolicy63.getClassName("java.beans.PropertyDescriptor[name=int; values={java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]=0}]", "Ljava.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}];", (java.lang.Object) methodArray87, predicate88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java/beans/PropertyDescriptor" + "'", str54, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java/beans/PropertyDescriptor" + "'", str79, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "java/beans/PropertyDescriptor" + "'", str80, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(methodArray84);
        org.junit.Assert.assertNotNull(methodArray87);
    }

    @Test
    public void test06191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06191");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("[Ljava/lang/Class;java.beans.PropertyDescriptor[name=hi!; shortDescription=float]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06192");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setName("Ljava/beans/FeatureDescriptor;");
        java.lang.String str9 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=Z]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str9, "Ljava/beans/FeatureDescriptor;");
    }

    @Test
    public void test06193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06193");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test06194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06194");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 10);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.ClassInfo classInfo56 = methodInfo55.getClassInfo();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass64);
        boolean boolean68 = classInfo56.equals((java.lang.Object) wildcardClass64);
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass64);
        org.mockito.cglib.core.ClassInfo classInfo72 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass64);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java/beans/PropertyDescriptor" + "'", str69, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "java/beans/PropertyDescriptor" + "'", str70, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(classInfo72);
    }

    @Test
    public void test06195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06195");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setConstrained(true);
        java.lang.Class<?> wildcardClass13 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        boolean boolean21 = propertyDescriptor17.isPreferred();
        propertyDescriptor17.setHidden(true);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor17.getPropertyEditorClass();
        java.lang.reflect.Method method25 = propertyDescriptor17.getReadMethod();
        propertyDescriptor17.setExpert(false);
        boolean boolean28 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setName("(I)LI;");
        java.beans.PropertyEditor propertyEditor31 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor17);
        java.lang.String str32 = propertyDescriptor3.getDisplayName();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(method25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(propertyEditor31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test06196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06196");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.String str9 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray10 = classInfo8.getInterfaces();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.beans.PropertyDescriptor" + "'", str9, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray10);
    }

    @Test
    public void test06197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06197");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy19);
        boolean boolean21 = enhancer6.getUseCache();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test06198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06198");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = enhancer0.getNamingPolicy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(true);
        boolean boolean8 = enhancer0.getUseCache();
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test06199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06199");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader6);
    }

    @Test
    public void test06200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06200");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method12 = null;
        java.lang.reflect.Method method13 = null;
        java.beans.PropertyDescriptor propertyDescriptor14 = new java.beans.PropertyDescriptor("hi!", method12, method13);
        java.lang.Class<?> wildcardClass15 = propertyDescriptor14.getPropertyType();
        boolean boolean16 = propertyDescriptor14.isExpert();
        java.lang.Object obj18 = propertyDescriptor14.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.util.Enumeration<java.lang.String> strEnumeration19 = propertyDescriptor14.attributeNames();
        java.lang.reflect.Method method22 = null;
        java.lang.reflect.Method method23 = null;
        java.beans.PropertyDescriptor propertyDescriptor24 = new java.beans.PropertyDescriptor("hi!", method22, method23);
        propertyDescriptor24.setShortDescription("J");
        java.lang.Class<?> wildcardClass27 = propertyDescriptor24.getPropertyType();
        java.lang.Class<?> wildcardClass28 = propertyDescriptor24.getClass();
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type[] typeArray30 = classInfo29.getInterfaces();
        org.mockito.asm.Type[] typeArray31 = classInfo29.getInterfaces();
        propertyDescriptor14.setValue("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", (java.lang.Object) classInfo29);
        propertyDescriptor3.setValue("()Ljava/beans/PropertyDescriptor;", (java.lang.Object) "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        java.lang.String str34 = propertyDescriptor3.getDisplayName();
        boolean boolean35 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass36 = propertyDescriptor3.getClass();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strEnumeration19);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test06201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06201");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 10);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo54);
    }

    @Test
    public void test06202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06202");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer26.setCallbackFilter(callbackFilter27);
        boolean boolean29 = enhancer26.getAttemptLoad();
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer31.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        boolean boolean46 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setHidden(false);
        boolean boolean49 = generatorStrategy41.equals((java.lang.Object) false);
        enhancer26.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer26.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy51);
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        propertyDescriptor56.setShortDescription("J");
        java.lang.Class<?> wildcardClass59 = propertyDescriptor56.getPropertyType();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor56.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        java.beans.PropertyDescriptor[] propertyDescriptorArray62 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass60);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        enhancer68.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy71 = enhancer68.getNamingPolicy();
        enhancer67.setNamingPolicy(namingPolicy71);
        org.mockito.cglib.proxy.Callback callback73 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray74 = new org.mockito.cglib.proxy.Callback[] { callback73 };
        enhancer67.setCallbacks(callbackArray74);
        enhancer0.setCallbacks(callbackArray74);
        boolean boolean77 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader78 = enhancer0.getClassLoader();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=(I)B]");
        java.lang.Class<?> wildcardClass81 = type80.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray82 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass81);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(propertyDescriptorArray62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(namingPolicy71);
        org.junit.Assert.assertNotNull(callbackArray74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(classLoader78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(propertyDescriptorArray82);
    }

    @Test
    public void test06203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06203");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.lang.ClassLoader classLoader23 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter24 = null;
        enhancer0.setCallbackFilter(callbackFilter24);
        org.mockito.cglib.proxy.Callback callback26 = null;
        enhancer0.setCallback(callback26);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test06204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06204");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer12.getNamingPolicy();
        boolean boolean27 = enhancer12.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer12.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer31.getNamingPolicy();
        enhancer30.setNamingPolicy(namingPolicy34);
        enhancer29.setNamingPolicy(namingPolicy34);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter37 = null;
        enhancer29.setCallbackFilter(callbackFilter37);
        enhancer29.setUseCache(false);
        java.lang.ClassLoader classLoader41 = enhancer29.getClassLoader();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        propertyDescriptor45.setShortDescription("J");
        java.lang.Class<?> wildcardClass48 = propertyDescriptor45.getPropertyType();
        java.lang.Class<?> wildcardClass49 = propertyDescriptor45.getClass();
        org.mockito.cglib.core.ClassInfo classInfo50 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass49);
        enhancer29.setSuperclass((java.lang.Class) wildcardClass49);
        java.beans.PropertyDescriptor[] propertyDescriptorArray52 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass49);
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        propertyDescriptor57.setShortDescription("J");
        java.lang.Class<?> wildcardClass60 = propertyDescriptor57.getPropertyType();
        java.lang.Class<?> wildcardClass61 = propertyDescriptor57.getClass();
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("hi!", method63, method64);
        propertyDescriptor65.setShortDescription("J");
        java.lang.Class<?> wildcardClass68 = propertyDescriptor65.getPropertyType();
        java.lang.Class<?> wildcardClass69 = propertyDescriptor65.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.beans.PropertyDescriptor[] propertyDescriptorArray71 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.lang.Class[] classArray73 = new java.lang.Class[] { wildcardClass61, wildcardClass69 };
        java.lang.String[] strArray74 = org.mockito.cglib.core.ReflectUtils.getNames(classArray73);
        int int75 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray73);
        java.lang.reflect.Constructor constructor76 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass49, classArray73);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor76);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor76, (int) (short) 100);
        org.mockito.cglib.core.Signature signature80 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor76);
        boolean boolean81 = namingPolicy28.equals((java.lang.Object) constructor76);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNotNull(classLoader41);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str53, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(propertyDescriptorArray71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(classArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(constructor76);
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertNotNull(signature80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test06205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06205");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature51 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 3);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature55 = methodInfo54.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(signature55);
    }

    @Test
    public void test06206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06206");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setBound(false);
        boolean boolean7 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setConstrained(false);
        propertyDescriptor3.setPreferred(false);
        boolean boolean14 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06207");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]");
        propertyDescriptor3.setName("char");
        boolean boolean12 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setName("float(I)J");
        java.lang.String str15 = propertyDescriptor3.getName();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        propertyDescriptor21.setShortDescription("J");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor21.getPropertyType();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor21.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        java.lang.String str28 = classInfo27.toString();
        org.mockito.asm.Type type29 = classInfo27.getType();
        org.mockito.asm.Type type30 = classInfo27.getType();
        propertyDescriptor3.setValue("Lava.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor;", (java.lang.Object) classInfo27);
        boolean boolean32 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float(I)J" + "'", str15, "float(I)J");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]" + "'", str16, "java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.beans.PropertyDescriptor" + "'", str28, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test06208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06208");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; values={(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;=Lva/beans/PropertyDescriptor;}]");
        java.lang.Object obj2 = null;
        boolean boolean3 = type1.equals(obj2);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test06209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06209");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.cglib.core.Signature signature5 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = signature5.equals((java.lang.Object) type6);
        java.lang.reflect.Method method9 = null;
        java.lang.reflect.Method method10 = null;
        java.beans.PropertyDescriptor propertyDescriptor11 = new java.beans.PropertyDescriptor("hi!", method9, method10);
        propertyDescriptor11.setShortDescription("J");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor11.getPropertyType();
        boolean boolean15 = type6.equals((java.lang.Object) wildcardClass14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str19 = type18.toString();
        boolean boolean21 = type18.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str23 = type22.toString();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.toString();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type24 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray26);
        org.mockito.cglib.core.Signature signature28 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type18, typeArray26);
        org.mockito.asm.Type type29 = signature28.getReturnType();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str31 = type30.toString();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.toString();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type32 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray34);
        org.mockito.cglib.core.Signature signature36 = new org.mockito.cglib.core.Signature("float", type29, typeArray34);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray34);
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", type2, typeArray34);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str40 = type39.toString();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("I");
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray44);
        org.mockito.cglib.core.Signature signature47 = new org.mockito.cglib.core.Signature("I", type2, typeArray44);
        java.lang.String str48 = signature47.toString();
        java.lang.String str49 = signature47.toString();
        java.lang.String str50 = signature47.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "J" + "'", str19, "J");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "J" + "'", str23, "J");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "I" + "'", str25, "I");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(I)J" + "'", str27, "(I)J");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "J" + "'", str31, "J");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "I" + "'", str33, "I");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(I)J" + "'", str35, "(I)J");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(I)F" + "'", str37, "(I)F");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "I" + "'", str40, "I");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(I)LI;" + "'", str45, "(I)LI;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(I)I" + "'", str46, "(I)I");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "I(I)I" + "'", str48, "I(I)I");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "I(I)I" + "'", str49, "I(I)I");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(I)I" + "'", str50, "(I)I");
    }

    @Test
    public void test06210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06210");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("(I)I", method18, method19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setConstrained(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor20.getPropertyEditorClass();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        enhancer27.setNamingPolicy(namingPolicy32);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer27.setCallbackFilter(callbackFilter35);
        enhancer27.setUseCache(false);
        java.lang.ClassLoader classLoader39 = enhancer27.getClassLoader();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        org.mockito.cglib.core.ClassInfo classInfo48 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass47);
        enhancer27.setSuperclass((java.lang.Class) wildcardClass47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass47);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("hi!", method53, method54);
        propertyDescriptor55.setShortDescription("J");
        java.lang.Class<?> wildcardClass58 = propertyDescriptor55.getPropertyType();
        java.lang.Class<?> wildcardClass59 = propertyDescriptor55.getClass();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.Class[] classArray71 = new java.lang.Class[] { wildcardClass59, wildcardClass67 };
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray71);
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray71);
        java.lang.reflect.Constructor constructor74 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass47, classArray71);
        org.mockito.cglib.core.MethodInfo methodInfo75 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.Signature signature76 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor74);
        java.lang.String str77 = org.mockito.asm.Type.getConstructorDescriptor(constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74);
        org.mockito.cglib.core.MethodInfo methodInfo79 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor74);
        int int80 = methodInfo79.getModifiers();
        propertyDescriptor20.setValue("java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]", (java.lang.Object) int80);
        java.lang.Class<?> wildcardClass82 = propertyDescriptor20.getPropertyType();
        propertyDescriptor20.setDisplayName("I(I)J");
        propertyDescriptor20.setShortDescription("java/beans/FeatureDescriptor(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(classInfo48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str51, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(classArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(constructor74);
        org.junit.Assert.assertNotNull(methodInfo75);
        org.junit.Assert.assertNotNull(signature76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str77, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(methodInfo79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(wildcardClass82);
    }

    @Test
    public void test06211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06211");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean10 = propertyDescriptor3.isExpert();
        org.mockito.cglib.core.Signature signature13 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str14 = signature13.toString();
        org.mockito.asm.Type[] typeArray15 = signature13.getArgumentTypes();
        java.beans.PropertyEditor propertyEditor16 = propertyDescriptor3.createPropertyEditor((java.lang.Object) typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass17);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass17);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, false, true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str14, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNull(propertyEditor16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
    }

    @Test
    public void test06212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06212");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Linit>(Ljava/beans/PropertyDescriptor;", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
    }

    @Test
    public void test06213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06213");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        java.lang.reflect.Method method53 = null;
        java.lang.reflect.Method method54 = null;
        java.beans.PropertyDescriptor propertyDescriptor55 = new java.beans.PropertyDescriptor("hi!", method53, method54);
        propertyDescriptor55.setShortDescription("J");
        java.lang.Class<?> wildcardClass58 = propertyDescriptor55.getPropertyType();
        boolean boolean59 = propertyDescriptor55.isPreferred();
        propertyDescriptor55.setHidden(true);
        java.lang.Class<?> wildcardClass62 = propertyDescriptor55.getPropertyEditorClass();
        java.lang.String str63 = propertyDescriptor55.getShortDescription();
        java.lang.String str64 = propertyDescriptor55.getName();
        java.lang.String str65 = propertyDescriptor55.getName();
        propertyDescriptor55.setShortDescription("float");
        boolean boolean68 = classInfo51.equals((java.lang.Object) propertyDescriptor55);
        org.mockito.asm.Type type69 = classInfo51.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        enhancer70.setAttemptLoad(true);
        enhancer70.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer75 = new org.mockito.cglib.proxy.Enhancer();
        enhancer75.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = null;
        enhancer75.setStrategy(generatorStrategy78);
        boolean boolean80 = enhancer75.getUseCache();
        enhancer75.setUseFactory(true);
        enhancer75.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy85 = enhancer75.getNamingPolicy();
        enhancer70.setNamingPolicy(namingPolicy85);
        enhancer70.setUseFactory(true);
        enhancer70.setSerialVersionUID((java.lang.Long) 1L);
        enhancer70.setAttemptLoad(false);
        boolean boolean93 = classInfo51.equals((java.lang.Object) enhancer70);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "J" + "'", str63, "J");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(namingPolicy85);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test06214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06214");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        int int52 = methodInfo51.getModifiers();
        org.mockito.cglib.core.Signature signature53 = methodInfo51.getSignature();
        java.lang.String str54 = methodInfo51.toString();
        int int55 = methodInfo51.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test06215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06215");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature53 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(methodInfo54);
    }

    @Test
    public void test06216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06216");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.reflect.Method method18 = propertyDescriptor17.getReadMethod();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setHidden(false);
        boolean boolean22 = propertyDescriptor17.isHidden();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor17.getPropertyType();
        propertyDescriptor17.setExpert(true);
        propertyDescriptor17.setExpert(true);
        boolean boolean31 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setBound(true);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        propertyDescriptor17.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray46);
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray48);
        propertyDescriptor3.setShortDescription("I(I)I");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass54 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(I)J" + "'", str13, "(I)J");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertNull(wildcardClass54);
    }

    @Test
    public void test06217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06217");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        java.lang.reflect.Method method18 = propertyDescriptor17.getReadMethod();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setHidden(false);
        boolean boolean22 = propertyDescriptor17.isHidden();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor17.getPropertyEditorClass();
        propertyDescriptor17.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor17.getPropertyType();
        propertyDescriptor17.setExpert(true);
        propertyDescriptor17.setExpert(true);
        boolean boolean31 = propertyDescriptor17.isExpert();
        propertyDescriptor17.setBound(true);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        propertyDescriptor38.setShortDescription("J");
        java.lang.Class<?> wildcardClass41 = propertyDescriptor38.getPropertyType();
        java.lang.Class<?> wildcardClass42 = propertyDescriptor38.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass42);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass42);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray45);
        propertyDescriptor17.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray46);
        java.lang.Class[] classArray48 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray46);
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor3.createPropertyEditor((java.lang.Object) classArray48);
        boolean boolean50 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method51 = null;
        propertyDescriptor3.setReadMethod(method51);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(I)J" + "'", str13, "(I)J");
        org.junit.Assert.assertNull(method18);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06218");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        org.mockito.asm.ClassVisitor classVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
    }

    @Test
    public void test06219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06219");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test06220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06220");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer11.setCallbackFilter(callbackFilter19);
        enhancer11.setUseCache(false);
        java.lang.ClassLoader classLoader23 = enhancer11.getClassLoader();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        enhancer11.setSuperclass((java.lang.Class) wildcardClass31);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        java.lang.reflect.Method method45 = null;
        java.lang.reflect.Method method46 = null;
        java.beans.PropertyDescriptor propertyDescriptor47 = new java.beans.PropertyDescriptor("hi!", method45, method46);
        propertyDescriptor47.setShortDescription("J");
        java.lang.Class<?> wildcardClass50 = propertyDescriptor47.getPropertyType();
        java.lang.Class<?> wildcardClass51 = propertyDescriptor47.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.Class[] classArray55 = new java.lang.Class[] { wildcardClass43, wildcardClass51 };
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        int int57 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray55);
        java.lang.reflect.Constructor constructor58 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass31, classArray55);
        org.mockito.cglib.core.MethodInfo methodInfo59 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58);
        org.mockito.cglib.core.MethodInfo methodInfo61 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor58, (int) (short) 100);
        org.mockito.cglib.core.ClassInfo classInfo62 = methodInfo61.getClassInfo();
        org.mockito.cglib.core.Signature signature63 = methodInfo61.getSignature();
        java.beans.PropertyEditor propertyEditor64 = propertyDescriptor3.createPropertyEditor((java.lang.Object) methodInfo61);
        org.mockito.cglib.core.Signature signature65 = methodInfo61.getSignature();
        org.mockito.asm.Type[] typeArray66 = methodInfo61.getExceptionTypes();
        java.lang.reflect.Method method68 = null;
        java.lang.reflect.Method method69 = null;
        java.beans.PropertyDescriptor propertyDescriptor70 = new java.beans.PropertyDescriptor("hi!", method68, method69);
        propertyDescriptor70.setShortDescription("J");
        boolean boolean73 = propertyDescriptor70.isExpert();
        propertyDescriptor70.setConstrained(false);
        boolean boolean76 = methodInfo61.equals((java.lang.Object) false);
        org.mockito.asm.Type[] typeArray77 = methodInfo61.getExceptionTypes();
        int int78 = methodInfo61.getModifiers();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("I(I)I");
        boolean boolean81 = methodInfo61.equals((java.lang.Object) type80);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str35, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(constructor58);
        org.junit.Assert.assertNotNull(methodInfo59);
        org.junit.Assert.assertNotNull(methodInfo61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(signature63);
        org.junit.Assert.assertNull(propertyEditor64);
        org.junit.Assert.assertNotNull(signature65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 100 + "'", int78 == 100);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test06221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06221");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy6);
        enhancer1.setNamingPolicy(namingPolicy6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer1.setCallbackFilter(callbackFilter9);
        enhancer1.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature15 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = signature15.equals((java.lang.Object) type16);
        java.lang.Class[] classArray18 = new java.lang.Class[] {};
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        java.lang.String[] strArray20 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        boolean boolean21 = signature15.equals((java.lang.Object) classArray18);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray18);
        enhancer1.setInterfaces(classArray18);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer1.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer1.getNamingPolicy();
        boolean boolean26 = enhancer1.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer1.getNamingPolicy();
        enhancer1.setUseFactory(false);
        boolean boolean30 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer1.setCallbackFilter(callbackFilter31);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Callback callback39 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray40 = new org.mockito.cglib.proxy.Callback[] { callback39 };
        enhancer33.setCallbacks(callbackArray40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = enhancer33.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer33.setCallbackFilter(callbackFilter43);
        org.mockito.cglib.proxy.Callback callback45 = null;
        enhancer33.setCallback(callback45);
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        enhancer49.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy52 = enhancer49.getNamingPolicy();
        enhancer48.setNamingPolicy(namingPolicy52);
        enhancer47.setNamingPolicy(namingPolicy52);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter55 = null;
        enhancer47.setCallbackFilter(callbackFilter55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer58.setNamingPolicy(namingPolicy62);
        enhancer57.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer57.setCallbackFilter(callbackFilter65);
        enhancer57.setUseCache(false);
        java.lang.ClassLoader classLoader69 = enhancer57.getClassLoader();
        enhancer47.setClassLoader(classLoader69);
        enhancer33.setClassLoader(classLoader69);
        enhancer1.setClassLoader(classLoader69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor73 = org.mockito.cglib.core.ReflectUtils.findConstructor("Lorg/mockito/cglib/core/DefaultNamingPolicy;", classLoader69);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(classArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(callbackArray40);
        org.junit.Assert.assertNotNull(generatorStrategy42);
        org.junit.Assert.assertNotNull(namingPolicy52);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(classLoader69);
    }

    @Test
    public void test06222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06222");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        enhancer0.setAttemptLoad(false);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy18 = null;
        enhancer15.setStrategy(generatorStrategy18);
        java.lang.Class[] classArray20 = new java.lang.Class[] {};
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray20);
        enhancer15.setInterfaces(classArray20);
        enhancer0.setInterfaces(classArray20);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray20);
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test06223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06223");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str13 = type12.getInternalName();
        java.lang.String str14 = type12.getClassName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java/beans/PropertyDescriptor" + "'", str13, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.beans.PropertyDescriptor" + "'", str14, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test06224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06224");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.toString();
        int int16 = type14.getSize();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.toString();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.DOUBLE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type17, type18, type21, type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray26);
        boolean boolean28 = generatorStrategy13.equals((java.lang.Object) typeArray26);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        propertyDescriptor32.setShortDescription("J");
        java.lang.Class<?> wildcardClass35 = propertyDescriptor32.getPropertyType();
        java.lang.Class<?> wildcardClass36 = propertyDescriptor32.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass36);
        boolean boolean39 = generatorStrategy13.equals((java.lang.Object) wildcardClass36);
        java.util.List list40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list41 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass36, list40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "I" + "'", str19, "I");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "char" + "'", str24, "char");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(FIDCCJ)I" + "'", str27, "(FIDCCJ)I");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test06225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06225");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 4);
        org.mockito.cglib.core.Signature signature53 = methodInfo52.getSignature();
        org.mockito.asm.Type type54 = signature53.getReturnType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = type54.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(type54);
    }

    @Test
    public void test06226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06226");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        java.lang.Object obj13 = propertyDescriptor3.getValue("(FIDCCJ)Lva/beans/FeatureDescriptor;");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06227");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 0);
        org.mockito.asm.Type[] typeArray55 = methodInfo54.getExceptionTypes();
        int int56 = methodInfo54.getModifiers();
        org.mockito.asm.Type[] typeArray57 = methodInfo54.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo58 = methodInfo54.getClassInfo();
        java.lang.String str59 = classInfo58.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(classInfo58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.beans.PropertyDescriptor" + "'", str59, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test06228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06228");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer27.setNamingPolicy(namingPolicy31);
        enhancer26.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer26.setCallbackFilter(callbackFilter34);
        enhancer26.setUseCache(false);
        java.lang.ClassLoader classLoader38 = enhancer26.getClassLoader();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        org.mockito.cglib.core.ClassInfo classInfo47 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass46);
        enhancer26.setSuperclass((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass46);
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        propertyDescriptor54.setShortDescription("J");
        java.lang.Class<?> wildcardClass57 = propertyDescriptor54.getPropertyType();
        java.lang.Class<?> wildcardClass58 = propertyDescriptor54.getClass();
        java.lang.reflect.Method method60 = null;
        java.lang.reflect.Method method61 = null;
        java.beans.PropertyDescriptor propertyDescriptor62 = new java.beans.PropertyDescriptor("hi!", method60, method61);
        propertyDescriptor62.setShortDescription("J");
        java.lang.Class<?> wildcardClass65 = propertyDescriptor62.getPropertyType();
        java.lang.Class<?> wildcardClass66 = propertyDescriptor62.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.lang.Class[] classArray70 = new java.lang.Class[] { wildcardClass58, wildcardClass66 };
        java.lang.String[] strArray71 = org.mockito.cglib.core.ReflectUtils.getNames(classArray70);
        int int72 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray70);
        java.lang.reflect.Constructor constructor73 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass46, classArray70);
        org.mockito.cglib.core.MethodInfo methodInfo74 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor73);
        org.mockito.cglib.core.Signature signature75 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor73);
        java.lang.String str76 = org.mockito.asm.Type.getConstructorDescriptor(constructor73);
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor73);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor73);
        int int79 = methodInfo78.getModifiers();
        org.mockito.cglib.core.ClassInfo classInfo80 = methodInfo78.getClassInfo();
        org.mockito.asm.Type[] typeArray81 = methodInfo78.getExceptionTypes();
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray81);
        org.mockito.cglib.proxy.Callback callback83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass20, classArray82, callback83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(classLoader38);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(classInfo47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str50, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(classArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(constructor73);
        org.junit.Assert.assertNotNull(methodInfo74);
        org.junit.Assert.assertNotNull(signature75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str76, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(classInfo80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(classArray82);
    }

    @Test
    public void test06229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06229");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.Object obj11 = propertyDescriptor3.getValue("java/beans/FeatureDescriptor(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test06230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06230");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=LI;]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06231");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(namingPolicy23);
    }

    @Test
    public void test06232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06232");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("I");
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("Lva/beans/FeatureDescriptor;");
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strEnumeration14);
    }

    @Test
    public void test06233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06233");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        boolean boolean20 = type17.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type17, typeArray25);
        java.lang.String str28 = type17.getClassName();
        propertyDescriptor3.setValue("va.beans.PropertyDescriptor", (java.lang.Object) type17);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setConstrained(false);
        java.util.Enumeration<java.lang.String> strEnumeration34 = propertyDescriptor3.attributeNames();
        boolean boolean35 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass36 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("(I)S");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "J" + "'", str22, "J");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)J" + "'", str26, "(I)J");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "long" + "'", str28, "long");
        org.junit.Assert.assertNotNull(strEnumeration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(wildcardClass36);
    }

    @Test
    public void test06234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06234");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("Lva.beans.PropertyDescriptor;", method1, method2);
        propertyDescriptor3.setName("Lorg/mockito/cglib/core/ReflectUtils$3;");
    }

    @Test
    public void test06235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06235");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        boolean boolean5 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06236");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 4);
        org.mockito.cglib.core.Signature signature53 = methodInfo52.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo54 = methodInfo52.getClassInfo();
        boolean boolean56 = methodInfo52.equals((java.lang.Object) "(I)F");
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        boolean boolean64 = propertyDescriptor60.isPreferred();
        java.lang.reflect.Method method65 = propertyDescriptor60.getWriteMethod();
        java.lang.String str66 = propertyDescriptor60.getName();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor60.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass68 = propertyDescriptor60.getPropertyType();
        propertyDescriptor60.setDisplayName("float");
        boolean boolean71 = methodInfo52.equals((java.lang.Object) propertyDescriptor60);
        org.mockito.asm.Type[] typeArray72 = methodInfo52.getExceptionTypes();
        java.lang.Class[] classArray73 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray72);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(method65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(classArray73);
    }

    @Test
    public void test06237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06237");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        boolean boolean27 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        boolean boolean34 = enhancer0.getUseCache();
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test06238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06238");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(I)I", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.String str7 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        propertyDescriptor12.setShortDescription("J");
        java.lang.Class<?> wildcardClass15 = propertyDescriptor12.getPropertyType();
        java.lang.Class<?> wildcardClass16 = propertyDescriptor12.getClass();
        org.mockito.cglib.core.ClassInfo classInfo17 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.reflect.Method method22 = propertyDescriptor21.getReadMethod();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor21.getPropertyEditorClass();
        propertyDescriptor21.setHidden(false);
        boolean boolean26 = propertyDescriptor21.isHidden();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor21.getPropertyEditorClass();
        boolean boolean28 = classInfo17.equals((java.lang.Object) propertyDescriptor21);
        int int29 = classInfo17.getModifiers();
        org.mockito.asm.Type type30 = classInfo17.getType();
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        java.lang.reflect.Method method35 = propertyDescriptor34.getReadMethod();
        java.lang.Class<?> wildcardClass36 = propertyDescriptor34.getPropertyEditorClass();
        propertyDescriptor34.setHidden(false);
        boolean boolean39 = propertyDescriptor34.isHidden();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor34.getPropertyEditorClass();
        propertyDescriptor34.setName("java/beans/PropertyDescriptor");
        propertyDescriptor34.setName("(I)LI;");
        propertyDescriptor34.setShortDescription("(I)LI;");
        java.lang.reflect.Method method47 = propertyDescriptor34.getReadMethod();
        boolean boolean48 = classInfo17.equals((java.lang.Object) propertyDescriptor34);
        propertyDescriptor34.setConstrained(false);
        propertyDescriptor34.setShortDescription("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.lang.reflect.Method method53 = propertyDescriptor34.getWriteMethod();
        java.lang.String str54 = propertyDescriptor34.getDisplayName();
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", (java.lang.Object) propertyDescriptor34);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(I)I" + "'", str7, "(I)I");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(classInfo17);
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNull(method35);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNull(method47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(method53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(I)LI;" + "'", str54, "(I)LI;");
    }

    @Test
    public void test06239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06239");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        boolean boolean7 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06240");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        propertyDescriptor13.setShortDescription("J");
        java.lang.Class<?> wildcardClass16 = propertyDescriptor13.getPropertyType();
        boolean boolean17 = propertyDescriptor13.isPreferred();
        propertyDescriptor13.setHidden(true);
        java.lang.Class<?> wildcardClass20 = propertyDescriptor13.getPropertyEditorClass();
        java.lang.String str21 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method22 = propertyDescriptor13.getWriteMethod();
        java.beans.PropertyEditor propertyEditor23 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method22);
        java.lang.String str24 = propertyDescriptor3.getName();
        boolean boolean25 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "J" + "'", str21, "J");
        org.junit.Assert.assertNull(method22);
        org.junit.Assert.assertNull(propertyEditor23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test06241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06241");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer24.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy27);
        enhancer15.setNamingPolicy(namingPolicy27);
        java.lang.ClassLoader classLoader30 = enhancer15.getClassLoader();
        java.lang.ClassLoader classLoader31 = enhancer15.getClassLoader();
        enhancer0.setClassLoader(classLoader31);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter35 = null;
        enhancer0.setCallbackFilter(callbackFilter35);
        org.mockito.asm.ClassVisitor classVisitor37 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test06242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06242");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("org/mockito/cglib/proxy/Enhancer", "java.beans.PropertyDescriptor[name=C]");
    }

    @Test
    public void test06243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06243");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        java.lang.String str9 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("[Ljava/lang/reflect/Method;");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test06244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06244");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setConstrained(false);
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        java.lang.String str13 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; preferred]" + "'", str13, "java.beans.PropertyDescriptor[name=hi!; preferred]");
    }

    @Test
    public void test06245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06245");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy7 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer8.setUseFactory(false);
        enhancer8.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.Callback callback22 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray23 = new org.mockito.cglib.proxy.Callback[] { callback22 };
        enhancer16.setCallbacks(callbackArray23);
        enhancer16.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter28 = null;
        enhancer27.setCallbackFilter(callbackFilter28);
        java.lang.Class[] classArray30 = new java.lang.Class[] {};
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray30);
        enhancer27.setInterfaces(classArray30);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        java.lang.ClassLoader classLoader39 = enhancer33.getClassLoader();
        enhancer27.setClassLoader(classLoader39);
        enhancer16.setClassLoader(classLoader39);
        enhancer8.setClassLoader(classLoader39);
        enhancer0.setClassLoader(classLoader39);
        enhancer0.setUseFactory(true);
        boolean boolean46 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        enhancer47.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy50 = null;
        enhancer47.setStrategy(generatorStrategy50);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        java.lang.String[] strArray54 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        enhancer47.setInterfaces(classArray52);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer47.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy57 = enhancer47.getStrategy();
        enhancer0.setStrategy(generatorStrategy57);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertNotNull(namingPolicy7);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(callbackArray23);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertNotNull(generatorStrategy57);
    }

    @Test
    public void test06246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06246");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setExpert(true);
        propertyDescriptor12.setBound(true);
        boolean boolean24 = propertyDescriptor12.isExpert();
        propertyDescriptor12.setShortDescription("java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!]");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test06247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06247");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06248");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test06249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06249");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader9);
    }

    @Test
    public void test06250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06250");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer26.setCallbackFilter(callbackFilter27);
        boolean boolean29 = enhancer26.getAttemptLoad();
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer31.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        boolean boolean46 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setHidden(false);
        boolean boolean49 = generatorStrategy41.equals((java.lang.Object) false);
        enhancer26.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer26.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer0.getNamingPolicy();
        boolean boolean54 = enhancer0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test06251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06251");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("byte", "Lva/beans/FeatureDescriptor;");
    }

    @Test
    public void test06252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06252");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.String str12 = propertyDescriptor3.getName();
        java.lang.String str13 = propertyDescriptor3.getName();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06253");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setDisplayName("Ljava/beans/PropertyDescriptor;");
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setPreferred(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyType();
        java.util.Enumeration<java.lang.String> strEnumeration11 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strEnumeration11);
    }

    @Test
    public void test06254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06254");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer13.getStrategy();
        enhancer13.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer0.setClassLoader(classLoader17);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer19.setCallbackFilter(callbackFilter27);
        enhancer19.setUseCache(false);
        java.lang.ClassLoader classLoader31 = enhancer19.getClassLoader();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        propertyDescriptor35.setShortDescription("J");
        java.lang.Class<?> wildcardClass38 = propertyDescriptor35.getPropertyType();
        java.lang.Class<?> wildcardClass39 = propertyDescriptor35.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        enhancer19.setSuperclass((java.lang.Class) wildcardClass39);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java/beans/PropertyDescriptor" + "'", str41, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test06255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06255");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        org.mockito.asm.Type type20 = classInfo8.getType();
        org.mockito.asm.Type type21 = classInfo8.getSuperType();
        org.mockito.asm.Type type22 = classInfo8.getSuperType();
        org.mockito.asm.Type type23 = classInfo8.getSuperType();
        org.mockito.asm.Type type24 = classInfo8.getSuperType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test06256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06256");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        boolean boolean23 = enhancer13.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        enhancer24.setInterfaces(classArray29);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer24.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = enhancer24.getStrategy();
        enhancer13.setStrategy(generatorStrategy34);
        enhancer0.setStrategy(generatorStrategy34);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter39 = null;
        enhancer0.setCallbackFilter(callbackFilter39);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter41 = null;
        enhancer0.setCallbackFilter(callbackFilter41);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer0.setCallbackFilter(callbackFilter43);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer0.setCallbackFilter(callbackFilter45);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(generatorStrategy34);
    }

    @Test
    public void test06257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06257");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        int int54 = methodInfo53.getModifiers();
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("hi!", method56, method57);
        propertyDescriptor58.setShortDescription("J");
        java.lang.Class<?> wildcardClass61 = propertyDescriptor58.getPropertyType();
        java.lang.Class<?> wildcardClass62 = propertyDescriptor58.getClass();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass62);
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        org.mockito.cglib.core.ClassInfo classInfo66 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass62);
        boolean boolean68 = methodInfo53.equals((java.lang.Object) wildcardClass62);
        java.lang.String str69 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass62);
        org.mockito.cglib.core.ClassInfo classInfo70 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method71 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java/beans/PropertyDescriptor" + "'", str65, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "java/beans/PropertyDescriptor" + "'", str69, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo70);
    }

    @Test
    public void test06258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06258");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj9 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;; expert]");
        java.lang.Object obj10 = null;
        boolean boolean11 = propertyDescriptor3.equals(obj10);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06259");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) 100, (byte) 1 };
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer5.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer5.setCallbackFilter(callbackFilter8);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer5.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        enhancer13.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer13.getNamingPolicy();
        enhancer12.setNamingPolicy(namingPolicy16);
        enhancer11.setNamingPolicy(namingPolicy16);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        enhancer11.setNamingPolicy(namingPolicy24);
        enhancer11.setUseFactory(false);
        enhancer11.setInterceptDuringConstruction(true);
        boolean boolean32 = enhancer11.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter34 = null;
        enhancer33.setCallbackFilter(callbackFilter34);
        boolean boolean36 = enhancer33.getAttemptLoad();
        enhancer33.setAttemptLoad(false);
        boolean boolean39 = enhancer33.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter41 = null;
        enhancer40.setCallbackFilter(callbackFilter41);
        java.lang.Class[] classArray43 = new java.lang.Class[] {};
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray43);
        enhancer40.setInterfaces(classArray43);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer48.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy51);
        enhancer46.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer55.getNamingPolicy();
        enhancer54.setNamingPolicy(namingPolicy58);
        enhancer46.setNamingPolicy(namingPolicy58);
        java.lang.ClassLoader classLoader61 = enhancer46.getClassLoader();
        enhancer40.setClassLoader(classLoader61);
        enhancer33.setClassLoader(classLoader61);
        enhancer11.setClassLoader(classLoader61);
        enhancer5.setClassLoader(classLoader61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class66 = org.mockito.cglib.core.ReflectUtils.defineClass("va/beans/FeatureDescriptor", byteArray4, classLoader61);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 100, 1]");
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(classLoader61);
    }

    @Test
    public void test06260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06260");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer10.setUseFactory(false);
        enhancer10.setInterceptDuringConstruction(true);
        propertyDescriptor3.setValue("(FIDCCJ)I", (java.lang.Object) enhancer10);
        boolean boolean19 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test06261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06261");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 10);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        java.lang.String str52 = methodInfo50.toString();
        int int53 = methodInfo50.getModifiers();
        org.mockito.asm.Type[] typeArray54 = methodInfo50.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo55 = methodInfo50.getClassInfo();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str52, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(classInfo55);
    }

    @Test
    public void test06262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06262");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        java.lang.ClassLoader classLoader30 = enhancer24.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer24.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy31);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader30);
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy33);
    }

    @Test
    public void test06263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06263");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setValue("float", (java.lang.Object) 8);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyEditorClass();
        java.lang.String str24 = propertyDescriptor12.getShortDescription();
        propertyDescriptor12.setHidden(false);
        java.util.Enumeration<java.lang.String> strEnumeration27 = propertyDescriptor12.attributeNames();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        java.lang.reflect.Method method32 = propertyDescriptor31.getReadMethod();
        propertyDescriptor31.setExpert(false);
        java.lang.Object obj36 = propertyDescriptor31.getValue("");
        propertyDescriptor31.setShortDescription("float");
        java.lang.String str39 = propertyDescriptor31.getName();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor31.getPropertyType();
        java.lang.String str41 = propertyDescriptor31.getDisplayName();
        java.lang.reflect.Method method42 = propertyDescriptor31.getWriteMethod();
        java.lang.Object obj44 = propertyDescriptor31.getValue("La.beans.PropertyDescriptor[name=hi!;");
        boolean boolean45 = propertyDescriptor12.equals((java.lang.Object) propertyDescriptor31);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration27);
        org.junit.Assert.assertNull(method32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test06264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06264");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj6 = propertyDescriptor3.getValue("I");
        boolean boolean7 = propertyDescriptor3.isHidden();
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setName("");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test06265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06265");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.toString();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        enhancer6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer6.setCallbackFilter(callbackFilter14);
        enhancer6.setUseCache(false);
        java.lang.ClassLoader classLoader18 = enhancer6.getClassLoader();
        java.lang.reflect.Method method20 = null;
        java.lang.reflect.Method method21 = null;
        java.beans.PropertyDescriptor propertyDescriptor22 = new java.beans.PropertyDescriptor("hi!", method20, method21);
        propertyDescriptor22.setShortDescription("J");
        java.lang.Class<?> wildcardClass25 = propertyDescriptor22.getPropertyType();
        java.lang.Class<?> wildcardClass26 = propertyDescriptor22.getClass();
        org.mockito.cglib.core.ClassInfo classInfo27 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass26);
        enhancer6.setSuperclass((java.lang.Class) wildcardClass26);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass26);
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        java.lang.reflect.Method method32 = null;
        java.lang.reflect.Method method33 = null;
        java.beans.PropertyDescriptor propertyDescriptor34 = new java.beans.PropertyDescriptor("hi!", method32, method33);
        propertyDescriptor34.setShortDescription("J");
        java.lang.Class<?> wildcardClass37 = propertyDescriptor34.getPropertyType();
        java.lang.Class<?> wildcardClass38 = propertyDescriptor34.getClass();
        java.lang.reflect.Method method40 = null;
        java.lang.reflect.Method method41 = null;
        java.beans.PropertyDescriptor propertyDescriptor42 = new java.beans.PropertyDescriptor("hi!", method40, method41);
        propertyDescriptor42.setShortDescription("J");
        java.lang.Class<?> wildcardClass45 = propertyDescriptor42.getPropertyType();
        java.lang.Class<?> wildcardClass46 = propertyDescriptor42.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.lang.Class[] classArray50 = new java.lang.Class[] { wildcardClass38, wildcardClass46 };
        java.lang.String[] strArray51 = org.mockito.cglib.core.ReflectUtils.getNames(classArray50);
        int int52 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray50);
        java.lang.reflect.Constructor constructor53 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass26, classArray50);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor53);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor53);
        org.mockito.cglib.core.MethodInfo methodInfo56 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor53);
        boolean boolean57 = signature2.equals((java.lang.Object) constructor53);
        org.mockito.asm.Type[] typeArray58 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor53);
        org.mockito.cglib.core.Signature signature59 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor53);
        org.mockito.asm.Type type60 = signature59.getReturnType();
        org.mockito.asm.Type type61 = signature59.getReturnType();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str3, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(I)I" + "'", str4, "(I)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str5, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(classLoader18);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(classInfo27);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str30, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(classArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(constructor53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(methodInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(signature59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
    }

    @Test
    public void test06266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06266");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]");
        propertyDescriptor3.setName("char");
        boolean boolean12 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test06267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06267");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.String str12 = propertyDescriptor3.getName();
        java.lang.String str13 = propertyDescriptor3.getName();
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("(I)Lava.beans.PropertyDescriptor[name=hi!;");
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setReadMethod(method21);
        java.lang.reflect.Method method23 = null;
        propertyDescriptor3.setReadMethod(method23);
        java.lang.reflect.Method method25 = null;
        propertyDescriptor3.setWriteMethod(method25);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "J" + "'", str16, "J");
    }

    @Test
    public void test06268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06268");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.reflect.Method method9 = propertyDescriptor3.getReadMethod();
        java.lang.String str10 = propertyDescriptor3.getDisplayName();
        boolean boolean11 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setPreferred(false);
        java.lang.reflect.Method method14 = null;
        propertyDescriptor3.setReadMethod(method14);
        java.lang.Object obj17 = propertyDescriptor3.getValue("(I)I");
        java.lang.Class<?> wildcardClass18 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("init>(Ljava.beans.PropertyDescriptor");
        boolean boolean21 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06269");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "(I)Lava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test06270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06270");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        java.lang.String str51 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) '4');
        java.lang.String str54 = methodInfo53.toString();
        java.lang.String str55 = methodInfo53.toString();
        org.mockito.cglib.core.Signature signature56 = methodInfo53.getSignature();
        java.lang.String str57 = signature56.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str51, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str57, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test06271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06271");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer0.setCallback(callback4);
        enhancer0.setAttemptLoad(false);
        org.junit.Assert.assertNotNull(generatorStrategy1);
    }

    @Test
    public void test06272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06272");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        int int53 = methodInfo52.getModifiers();
        java.lang.String str54 = methodInfo52.toString();
        java.lang.String str55 = methodInfo52.toString();
        int int56 = methodInfo52.getModifiers();
        java.lang.String str57 = methodInfo52.toString();
        org.mockito.asm.Type[] typeArray58 = methodInfo52.getExceptionTypes();
        org.mockito.cglib.core.ClassInfo classInfo59 = methodInfo52.getClassInfo();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str57, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(classInfo59);
    }

    @Test
    public void test06273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06273");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        boolean boolean39 = propertyDescriptor38.isHidden();
        java.lang.reflect.Method method40 = propertyDescriptor38.getWriteMethod();
        java.lang.reflect.Method method41 = propertyDescriptor38.getWriteMethod();
        java.lang.Object obj43 = propertyDescriptor38.getValue("");
        propertyDescriptor38.setHidden(false);
        java.lang.Class<?> wildcardClass46 = propertyDescriptor38.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass46);
        java.lang.String str48 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        org.mockito.cglib.proxy.Callback callback49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass46, callback49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(method40);
        org.junit.Assert.assertNull(method41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java/beans/PropertyDescriptor" + "'", str48, "java/beans/PropertyDescriptor");
    }

    @Test
    public void test06274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06274");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06275");
        byte[] byteArray2 = new byte[] { (byte) 10 };
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer3.setAttemptLoad(false);
        enhancer3.setAttemptLoad(true);
        boolean boolean11 = enhancer3.getAttemptLoad();
        java.lang.reflect.Method method13 = null;
        java.lang.reflect.Method method14 = null;
        java.beans.PropertyDescriptor propertyDescriptor15 = new java.beans.PropertyDescriptor("hi!", method13, method14);
        java.lang.String str16 = propertyDescriptor15.getName();
        boolean boolean17 = propertyDescriptor15.isHidden();
        java.lang.String str18 = propertyDescriptor15.getName();
        propertyDescriptor15.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        enhancer22.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer22.getNamingPolicy();
        enhancer22.setUseFactory(false);
        enhancer22.setInterceptDuringConstruction(true);
        propertyDescriptor15.setValue("(FIDCCJ)I", (java.lang.Object) enhancer22);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer22.setCallbackFilter(callbackFilter31);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy33 = enhancer22.getStrategy();
        java.lang.ClassLoader classLoader34 = enhancer22.getClassLoader();
        enhancer3.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader36 = enhancer3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class37 = org.mockito.cglib.core.ReflectUtils.defineClass("()Ljava.beans.PropertyDescriptor;", byteArray2, classLoader36);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10]");
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(generatorStrategy33);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader36);
    }

    @Test
    public void test06276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06276");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        boolean boolean14 = propertyDescriptor3.isHidden();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setShortDescription("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06277");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.String str16 = propertyDescriptor3.getName();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06278");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        java.lang.String str5 = propertyDescriptor3.getName();
        propertyDescriptor3.setDisplayName("(I)J");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        boolean boolean14 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(I)J" + "'", str13, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06279");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        enhancer6.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer24.setCallbacks(callbackArray31);
        enhancer18.setCallbacks(callbackArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer18.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy34);
        enhancer6.setUseFactory(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter38 = null;
        enhancer6.setCallbackFilter(callbackFilter38);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass47, wildcardClass55 };
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray59);
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        enhancer6.setInterfaces(classArray59);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy64 = enhancer6.getStrategy();
        org.mockito.cglib.proxy.Callback callback65 = null;
        enhancer6.setCallback(callback65);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer6.getNamingPolicy();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(generatorStrategy64);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test06280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06280");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.ClassInfo classInfo25 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        int int26 = classInfo25.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test06281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06281");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray18 = null;
        enhancer0.setInterfaces(classArray18);
        enhancer0.setAttemptLoad(true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test06282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06282");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        java.lang.Class[] classArray3 = new java.lang.Class[] {};
        java.lang.String[] strArray4 = org.mockito.cglib.core.ReflectUtils.getNames(classArray3);
        enhancer0.setInterfaces(classArray3);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        java.lang.ClassLoader classLoader12 = enhancer6.getClassLoader();
        enhancer0.setClassLoader(classLoader12);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer14.setCallbackFilter(callbackFilter15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer14.setInterfaces(classArray17);
        enhancer0.setInterfaces(classArray17);
        enhancer0.setAttemptLoad(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        org.junit.Assert.assertNotNull(classArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
    }

    @Test
    public void test06283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06283");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer0.getNamingPolicy();
        boolean boolean25 = enhancer0.getUseCache();
        enhancer0.setUseCache(false);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        boolean boolean29 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer32.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy35);
        enhancer30.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        enhancer30.setNamingPolicy(namingPolicy42);
        java.lang.ClassLoader classLoader45 = enhancer30.getClassLoader();
        org.mockito.cglib.proxy.Callback callback46 = null;
        enhancer30.setCallback(callback46);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(classLoader45);
        org.junit.Assert.assertNotNull(namingPolicy48);
    }

    @Test
    public void test06284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06284");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J=Ljava/beans/PropertyDescriptor;}]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06285");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("V");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LV;" + "'", str2, "LV;");
    }

    @Test
    public void test06286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06286");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        boolean boolean14 = enhancer0.getAttemptLoad();
        java.lang.Class<?> wildcardClass15 = enhancer0.getClass();
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list17 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass15, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test06287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06287");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 1);
        org.mockito.cglib.core.MethodInfo methodInfo54 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature55 = methodInfo54.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(methodInfo54);
        org.junit.Assert.assertNotNull(signature55);
    }

    @Test
    public void test06288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06288");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        boolean boolean23 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        boolean boolean28 = propertyDescriptor27.isHidden();
        propertyDescriptor27.setHidden(false);
        propertyDescriptor27.setDisplayName("(I)J");
        java.lang.reflect.Method method33 = null;
        propertyDescriptor27.setWriteMethod(method33);
        propertyDescriptor27.setPreferred(false);
        java.lang.Class<?> wildcardClass37 = propertyDescriptor27.getPropertyType();
        propertyDescriptor27.setExpert(true);
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        propertyDescriptor44.setShortDescription("J");
        java.lang.Class<?> wildcardClass47 = propertyDescriptor44.getPropertyType();
        java.lang.Class<?> wildcardClass48 = propertyDescriptor44.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.cglib.core.ClassInfo classInfo50 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass48);
        propertyDescriptor27.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray54 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray54);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.beans.PropertyDescriptor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(classInfo50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test06289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06289");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setName("Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        java.lang.String str7 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method8 = null;
        propertyDescriptor3.setReadMethod(method8);
        boolean boolean10 = propertyDescriptor3.isBound();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]" + "'", str7, "Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test06290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06290");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=B]", "java.beans.PropertyDescriptor[name=hi!; values={float=8}]");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = signature2.toString();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer5.setCallbackFilter(callbackFilter6);
        boolean boolean8 = enhancer5.getAttemptLoad();
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        propertyDescriptor12.setShortDescription("J");
        java.lang.Class<?> wildcardClass15 = propertyDescriptor12.getPropertyType();
        java.lang.Class<?> wildcardClass16 = propertyDescriptor12.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo18 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass16);
        enhancer5.setSuperclass((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass16);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.cglib.core.ClassInfo classInfo24 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass16);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.beans.PropertyDescriptor[] propertyDescriptorArray34 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass32);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type37 = classInfo36.getSuperType();
        java.lang.String str38 = classInfo36.toString();
        boolean boolean39 = classInfo24.equals((java.lang.Object) str38);
        boolean boolean40 = signature2.equals((java.lang.Object) str38);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=B]java.beans.PropertyDescriptor[name=hi!; values={float=8}]" + "'", str4, "java.beans.PropertyDescriptor[name=B]java.beans.PropertyDescriptor[name=hi!; values={float=8}]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(classInfo18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str23, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo24);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(propertyDescriptorArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java/beans/PropertyDescriptor" + "'", str35, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.beans.PropertyDescriptor" + "'", str38, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06291");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("float");
        java.lang.reflect.Method method15 = propertyDescriptor3.getWriteMethod();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method19 = null;
        propertyDescriptor3.setReadMethod(method19);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
    }

    @Test
    public void test06292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06292");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("(I)J");
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setPreferred(false);
        propertyDescriptor3.setDisplayName("int");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str20 = type19.toString();
        boolean boolean22 = type19.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str26 = type25.toString();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type25 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray27);
        org.mockito.cglib.core.Signature signature29 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type19, typeArray27);
        java.lang.String str30 = signature29.toString();
        org.mockito.asm.Type[] typeArray31 = signature29.getArgumentTypes();
        java.lang.Class[] classArray32 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray31);
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor34 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass17, classArray32);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>(org.mockito.asm.Type)");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "J" + "'", str20, "J");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "J" + "'", str24, "J");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "I" + "'", str26, "I");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(I)J" + "'", str28, "(I)J");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str30, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test06293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06293");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        java.util.List list21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list22 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass11, list21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str18, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str20, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test06294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06294");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.Class<?> wildcardClass27 = signature11.getClass();
        boolean boolean28 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str29, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str30, "Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test06295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06295");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        propertyDescriptor3.setShortDescription("(I)LI;");
        java.lang.reflect.Method method16 = null;
        propertyDescriptor3.setReadMethod(method16);
        java.lang.String str18 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(I)LI;" + "'", str18, "(I)LI;");
    }

    @Test
    public void test06296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06296");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = null;
        enhancer1.setStrategy(generatorStrategy4);
        boolean boolean6 = enhancer1.getUseCache();
        enhancer1.setUseFactory(true);
        boolean boolean9 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer10.setCallbackFilter(callbackFilter11);
        java.lang.Class[] classArray13 = new java.lang.Class[] {};
        java.lang.String[] strArray14 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        enhancer10.setInterfaces(classArray13);
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray13);
        enhancer1.setInterfaces(classArray13);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        enhancer18.setUseCache(true);
        java.lang.ClassLoader classLoader23 = enhancer18.getClassLoader();
        enhancer1.setClassLoader(classLoader23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor25 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; displayName=java/beans/PropertyDescriptor; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]", classLoader23);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test06297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06297");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        org.mockito.cglib.core.Signature signature12 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = signature12.equals((java.lang.Object) type13);
        java.lang.Class[] classArray15 = new java.lang.Class[] {};
        java.lang.String[] strArray16 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray15);
        boolean boolean18 = signature12.equals((java.lang.Object) classArray15);
        enhancer0.setInterfaces(classArray15);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = null;
        enhancer20.setStrategy(generatorStrategy23);
        boolean boolean25 = enhancer20.getUseCache();
        enhancer20.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy33);
        enhancer28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer28.setNamingPolicy(namingPolicy40);
        java.lang.ClassLoader classLoader43 = enhancer28.getClassLoader();
        enhancer28.setSerialVersionUID((java.lang.Long) 1L);
        enhancer28.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer48.getStrategy();
        enhancer48.setSerialVersionUID((java.lang.Long) 1L);
        enhancer48.setSerialVersionUID((java.lang.Long) 10L);
        enhancer48.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer63 = new org.mockito.cglib.proxy.Enhancer();
        enhancer63.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy66 = enhancer63.getNamingPolicy();
        enhancer62.setNamingPolicy(namingPolicy66);
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer62.setCallbacks(callbackArray69);
        enhancer56.setCallbacks(callbackArray69);
        enhancer48.setCallbacks(callbackArray69);
        enhancer28.setCallbacks(callbackArray69);
        enhancer20.setCallbacks(callbackArray69);
        enhancer0.setCallbacks(callbackArray69);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(namingPolicy66);
        org.junit.Assert.assertNotNull(callbackArray69);
    }

    @Test
    public void test06298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06298");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.reflect.Method method14 = propertyDescriptor13.getReadMethod();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor13.getPropertyEditorClass();
        propertyDescriptor13.setHidden(false);
        boolean boolean18 = propertyDescriptor13.isHidden();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor13.getPropertyEditorClass();
        boolean boolean20 = classInfo9.equals((java.lang.Object) propertyDescriptor13);
        org.mockito.asm.Type type21 = classInfo9.getType();
        org.mockito.asm.Type type22 = classInfo9.getSuperType();
        int int23 = classInfo9.getModifiers();
        org.mockito.asm.Type type24 = classInfo9.getSuperType();
        org.mockito.asm.Type type25 = type24.getElementType();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor29.setValue("J", (java.lang.Object) "I");
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy38 = null;
        enhancer35.setStrategy(generatorStrategy38);
        boolean boolean40 = enhancer35.getUseCache();
        enhancer35.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy48);
        enhancer43.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer53 = new org.mockito.cglib.proxy.Enhancer();
        enhancer53.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy56 = enhancer53.getNamingPolicy();
        enhancer52.setNamingPolicy(namingPolicy56);
        enhancer51.setNamingPolicy(namingPolicy56);
        enhancer43.setNamingPolicy(namingPolicy56);
        boolean boolean61 = namingPolicy56.equals((java.lang.Object) 0.0d);
        enhancer35.setNamingPolicy(namingPolicy56);
        enhancer35.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer65 = new org.mockito.cglib.proxy.Enhancer();
        enhancer65.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = enhancer65.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy68);
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        enhancer72.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = enhancer72.getNamingPolicy();
        enhancer71.setNamingPolicy(namingPolicy75);
        enhancer70.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter78 = null;
        enhancer70.setCallbackFilter(callbackFilter78);
        enhancer70.setUseCache(false);
        java.lang.ClassLoader classLoader82 = enhancer70.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy83 = enhancer70.getStrategy();
        enhancer35.setStrategy(generatorStrategy83);
        propertyDescriptor29.setValue("(I)F", (java.lang.Object) enhancer35);
        java.lang.ClassLoader classLoader86 = enhancer35.getClassLoader();
        java.lang.ClassLoader classLoader87 = enhancer35.getClassLoader();
        boolean boolean88 = type25.equals((java.lang.Object) classLoader87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor89 = org.mockito.cglib.core.ReflectUtils.findConstructor("java.beans.PropertyDescriptor[name=hi!; shortDescription=; hidden]", classLoader87);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(namingPolicy56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(namingPolicy68);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNotNull(generatorStrategy83);
        org.junit.Assert.assertNotNull(classLoader86);
        org.junit.Assert.assertNotNull(classLoader87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test06299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06299");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        boolean boolean8 = signature2.equals((java.lang.Object) classArray5);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray9);
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test06300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06300");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo19 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        propertyDescriptor23.setShortDescription("J");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor23.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray29 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass27);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.cglib.core.ClassInfo classInfo31 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = classInfo31.getSuperType();
        java.lang.String str33 = classInfo31.toString();
        boolean boolean34 = classInfo19.equals((java.lang.Object) str33);
        int int35 = classInfo19.getModifiers();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str18, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo19);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(propertyDescriptorArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java/beans/PropertyDescriptor" + "'", str30, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "java.beans.PropertyDescriptor" + "'", str33, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test06301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06301");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(false);
        enhancer0.setUseFactory(false);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
    }

    @Test
    public void test06302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06302");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.ClassLoader classLoader13 = null;
        enhancer0.setClassLoader(classLoader13);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = null;
        enhancer21.setStrategy(generatorStrategy24);
        boolean boolean26 = enhancer21.getUseCache();
        enhancer21.setUseFactory(true);
        boolean boolean29 = enhancer21.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer30.setCallbackFilter(callbackFilter31);
        java.lang.Class[] classArray33 = new java.lang.Class[] {};
        java.lang.String[] strArray34 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        enhancer30.setInterfaces(classArray33);
        java.lang.String[] strArray36 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        enhancer21.setInterfaces(classArray33);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray33);
        int int39 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray33);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer43.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy46);
        enhancer41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter49 = null;
        enhancer41.setCallbackFilter(callbackFilter49);
        enhancer41.setUseCache(false);
        java.lang.ClassLoader classLoader53 = enhancer41.getClassLoader();
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        propertyDescriptor57.setShortDescription("J");
        java.lang.Class<?> wildcardClass60 = propertyDescriptor57.getPropertyType();
        java.lang.Class<?> wildcardClass61 = propertyDescriptor57.getClass();
        org.mockito.cglib.core.ClassInfo classInfo62 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        enhancer41.setSuperclass((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray64);
        java.lang.reflect.Method[] methodArray68 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray64, true, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = enhancer0.create(classArray33, (java.lang.Object[]) methodArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(classLoader53);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(classInfo62);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(methodArray68);
    }

    @Test
    public void test06303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06303");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=(I)I; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]");
        boolean boolean11 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06304");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer15.setCallbackFilter(callbackFilter23);
        enhancer15.setUseCache(false);
        java.lang.ClassLoader classLoader27 = enhancer15.getClassLoader();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer29.setNamingPolicy(namingPolicy33);
        enhancer28.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer28.setCallbackFilter(callbackFilter36);
        boolean boolean38 = enhancer28.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        enhancer39.setStrategy(generatorStrategy42);
        java.lang.Class[] classArray44 = new java.lang.Class[] {};
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        java.lang.String[] strArray46 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        enhancer39.setInterfaces(classArray44);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer39.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy49 = enhancer39.getStrategy();
        enhancer28.setStrategy(generatorStrategy49);
        enhancer15.setStrategy(generatorStrategy49);
        enhancer15.setUseFactory(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter54 = null;
        enhancer15.setCallbackFilter(callbackFilter54);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        enhancer56.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer56.setCallbackFilter(callbackFilter64);
        enhancer56.setUseCache(false);
        java.lang.ClassLoader classLoader68 = enhancer56.getClassLoader();
        java.lang.reflect.Method method70 = null;
        java.lang.reflect.Method method71 = null;
        java.beans.PropertyDescriptor propertyDescriptor72 = new java.beans.PropertyDescriptor("hi!", method70, method71);
        propertyDescriptor72.setShortDescription("J");
        java.lang.Class<?> wildcardClass75 = propertyDescriptor72.getPropertyType();
        java.lang.Class<?> wildcardClass76 = propertyDescriptor72.getClass();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        enhancer56.setSuperclass((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str81 = type80.getClassName();
        java.lang.Class<?> wildcardClass82 = type80.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass82);
        enhancer56.setSuperclass((java.lang.Class) wildcardClass82);
        enhancer15.setSuperclass((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray86 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass82);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(generatorStrategy49);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(classLoader68);
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java/beans/PropertyDescriptor" + "'", str78, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "char" + "'", str81, "char");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray86);
    }

    @Test
    public void test06305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06305");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        enhancer0.setUseCache(true);
        java.lang.ClassLoader classLoader5 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy6 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Callback callback7 = null;
        enhancer0.setCallback(callback7);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.junit.Assert.assertNotNull(classLoader5);
        org.junit.Assert.assertNotNull(generatorStrategy6);
    }

    @Test
    public void test06306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06306");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06307");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy4 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        enhancer5.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter13 = null;
        enhancer5.setCallbackFilter(callbackFilter13);
        enhancer5.setUseCache(false);
        java.lang.ClassLoader classLoader17 = enhancer5.getClassLoader();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        propertyDescriptor21.setShortDescription("J");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor21.getPropertyType();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor21.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        enhancer5.setSuperclass((java.lang.Class) wildcardClass25);
        java.beans.PropertyDescriptor[] propertyDescriptorArray28 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass25);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray28);
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        java.lang.reflect.Method[] methodArray33 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray34 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray33);
        java.lang.reflect.Method method36 = null;
        java.lang.reflect.Method method37 = null;
        java.beans.PropertyDescriptor propertyDescriptor38 = new java.beans.PropertyDescriptor("hi!", method36, method37);
        java.lang.String str39 = propertyDescriptor38.getName();
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass47);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass47);
        java.lang.reflect.Method[] methodArray53 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray50, true, true);
        java.beans.PropertyEditor propertyEditor54 = propertyDescriptor38.createPropertyEditor((java.lang.Object) methodArray53);
        java.lang.Class[] classArray55 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray53);
        java.lang.reflect.Method[] methodArray56 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray32, methodArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = enhancer0.create(classArray29, (java.lang.Object[]) methodArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Arguments must be non-null and of equal length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(generatorStrategy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodArray33);
        org.junit.Assert.assertNotNull(methodArray34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(methodArray53);
        org.junit.Assert.assertNull(propertyEditor54);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(methodArray56);
    }

    @Test
    public void test06308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06308");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader4 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        propertyDescriptor9.setShortDescription("J");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        boolean boolean17 = namingPolicy5.equals((java.lang.Object) wildcardClass13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method18 = org.mockito.cglib.core.ReflectUtils.findInterfaceMethod((java.lang.Class) wildcardClass13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNotNull(classLoader4);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06309");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str52 = methodInfo51.toString();
        org.mockito.cglib.core.Signature signature53 = methodInfo51.getSignature();
        org.mockito.asm.Type type54 = signature53.getReturnType();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str52, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(type54);
    }

    @Test
    public void test06310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06310");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 4);
        org.mockito.cglib.core.Signature signature53 = methodInfo52.getSignature();
        org.mockito.cglib.core.ClassInfo classInfo54 = methodInfo52.getClassInfo();
        boolean boolean56 = methodInfo52.equals((java.lang.Object) "(I)F");
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        boolean boolean64 = propertyDescriptor60.isPreferred();
        java.lang.reflect.Method method65 = propertyDescriptor60.getWriteMethod();
        java.lang.String str66 = propertyDescriptor60.getName();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor60.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass68 = propertyDescriptor60.getPropertyType();
        propertyDescriptor60.setDisplayName("float");
        boolean boolean71 = methodInfo52.equals((java.lang.Object) propertyDescriptor60);
        propertyDescriptor60.setExpert(false);
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("hi!", method75, method76);
        propertyDescriptor77.setShortDescription("J");
        boolean boolean80 = propertyDescriptor77.isExpert();
        propertyDescriptor77.setBound(true);
        java.lang.reflect.Method method83 = propertyDescriptor77.getReadMethod();
        propertyDescriptor77.setExpert(true);
        java.lang.reflect.Method method86 = propertyDescriptor77.getReadMethod();
        java.lang.Class<?> wildcardClass87 = propertyDescriptor77.getPropertyType();
        java.lang.String str88 = propertyDescriptor77.getName();
        java.beans.PropertyEditor propertyEditor89 = propertyDescriptor60.createPropertyEditor((java.lang.Object) str88);
        propertyDescriptor60.setExpert(false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(method65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(method83);
        org.junit.Assert.assertNull(method86);
        org.junit.Assert.assertNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
        org.junit.Assert.assertNull(propertyEditor89);
    }

    @Test
    public void test06311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06311");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("float(I)J", method1, method2);
    }

    @Test
    public void test06312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06312");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; values={J=I}]java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06313");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setHidden(false);
        java.lang.Class<?> wildcardClass11 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        java.lang.String str14 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str13, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str14, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test06314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06314");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 10, (byte) 0 };
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer5.getNamingPolicy();
        enhancer5.setUseFactory(false);
        enhancer5.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader13 = enhancer5.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class14 = org.mockito.cglib.core.ReflectUtils.defineClass("F", byteArray4, classLoader13);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 10, 0]");
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(classLoader13);
    }

    @Test
    public void test06315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06315");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setValue("float", (java.lang.Object) 8);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyEditorClass();
        java.lang.String str24 = propertyDescriptor12.getShortDescription();
        propertyDescriptor12.setHidden(false);
        boolean boolean27 = propertyDescriptor12.isHidden();
        java.lang.reflect.Method method28 = null;
        propertyDescriptor12.setWriteMethod(method28);
        boolean boolean30 = propertyDescriptor12.isHidden();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06316");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 100);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        java.lang.reflect.Method method54 = propertyDescriptor53.getReadMethod();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor53.getPropertyEditorClass();
        propertyDescriptor53.setValue("J", (java.lang.Object) 0.0d);
        java.lang.reflect.Method method59 = propertyDescriptor53.getReadMethod();
        java.lang.Class<?> wildcardClass60 = propertyDescriptor53.getPropertyEditorClass();
        propertyDescriptor53.setBound(true);
        java.util.Enumeration<java.lang.String> strEnumeration63 = propertyDescriptor53.attributeNames();
        boolean boolean64 = methodInfo49.equals((java.lang.Object) propertyDescriptor53);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNull(method54);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(strEnumeration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test06317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06317");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.reflect.Method method14 = propertyDescriptor13.getReadMethod();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor13.getPropertyEditorClass();
        propertyDescriptor13.setHidden(false);
        boolean boolean18 = propertyDescriptor13.isHidden();
        java.lang.Class<?> wildcardClass19 = propertyDescriptor13.getPropertyEditorClass();
        boolean boolean20 = classInfo9.equals((java.lang.Object) propertyDescriptor13);
        org.mockito.asm.Type type21 = classInfo9.getType();
        int int22 = type21.getSize();
        java.lang.String str23 = type21.toString();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor27.getClass();
        org.mockito.cglib.core.ClassInfo classInfo32 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type[] typeArray33 = classInfo32.getInterfaces();
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray33);
        int int36 = type21.getOpcode((int) (byte) 100);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str39 = type38.toString();
        boolean boolean41 = type38.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str43 = type42.toString();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str45 = type44.toString();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type44 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray46);
        org.mockito.cglib.core.Signature signature48 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type38, typeArray46);
        java.lang.String str49 = signature48.toString();
        org.mockito.asm.Type[] typeArray50 = signature48.getArgumentTypes();
        java.lang.String str51 = signature48.getName();
        org.mockito.asm.Type[] typeArray52 = signature48.getArgumentTypes();
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray52);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("Ljava/beans/FeatureDescriptor;", type21, typeArray52);
        org.mockito.asm.Type type55 = signature54.getReturnType();
        org.mockito.asm.Type[] typeArray56 = signature54.getArgumentTypes();
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str23, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(classInfo32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str34, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 104 + "'", int36 == 104);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "J" + "'", str39, "J");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "J" + "'", str43, "J");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "I" + "'", str45, "I");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(I)J" + "'", str47, "(I)J");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str49, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str51, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
    }

    @Test
    public void test06318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06318");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setWriteMethod(method7);
        java.lang.String str9 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test06319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06319");
        byte[] byteArray2 = new byte[] { (byte) 1 };
        org.mockito.cglib.proxy.Enhancer enhancer3 = new org.mockito.cglib.proxy.Enhancer();
        enhancer3.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer3.getNamingPolicy();
        enhancer3.setUseFactory(false);
        enhancer3.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Callback callback17 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray18 = new org.mockito.cglib.proxy.Callback[] { callback17 };
        enhancer11.setCallbacks(callbackArray18);
        enhancer11.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer22.setCallbackFilter(callbackFilter23);
        java.lang.Class[] classArray25 = new java.lang.Class[] {};
        java.lang.String[] strArray26 = org.mockito.cglib.core.ReflectUtils.getNames(classArray25);
        enhancer22.setInterfaces(classArray25);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = enhancer28.getClassLoader();
        enhancer22.setClassLoader(classLoader34);
        enhancer11.setClassLoader(classLoader34);
        enhancer3.setClassLoader(classLoader34);
        java.lang.ClassLoader classLoader38 = enhancer3.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class39 = org.mockito.cglib.core.ReflectUtils.defineClass("init>(Ljava.beans.PropertyDescriptor", byteArray2, classLoader38);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(callbackArray18);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(classLoader38);
    }

    @Test
    public void test06320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06320");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 10);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        org.mockito.cglib.core.Signature signature52 = methodInfo50.getSignature();
        org.mockito.asm.Type[] typeArray53 = methodInfo50.getExceptionTypes();
        int int54 = methodInfo50.getModifiers();
        int int55 = methodInfo50.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
    }

    @Test
    public void test06321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06321");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 10 };
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer6.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.Callback callback11 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray12 = new org.mockito.cglib.proxy.Callback[] { callback11 };
        enhancer5.setCallbacks(callbackArray12);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer5.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer5.setCallbackFilter(callbackFilter15);
        boolean boolean17 = enhancer5.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer5.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer19.setCallbackFilter(callbackFilter20);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer19.setCallbackFilter(callbackFilter22);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer19.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        enhancer33.setNamingPolicy(namingPolicy38);
        enhancer25.setNamingPolicy(namingPolicy38);
        enhancer25.setUseFactory(false);
        enhancer25.setInterceptDuringConstruction(true);
        boolean boolean46 = enhancer25.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter48 = null;
        enhancer47.setCallbackFilter(callbackFilter48);
        boolean boolean50 = enhancer47.getAttemptLoad();
        enhancer47.setAttemptLoad(false);
        boolean boolean53 = enhancer47.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter55 = null;
        enhancer54.setCallbackFilter(callbackFilter55);
        java.lang.Class[] classArray57 = new java.lang.Class[] {};
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        enhancer54.setInterfaces(classArray57);
        org.mockito.cglib.proxy.Enhancer enhancer60 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer61 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        enhancer62.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer62.getNamingPolicy();
        enhancer61.setNamingPolicy(namingPolicy65);
        enhancer60.setNamingPolicy(namingPolicy65);
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        enhancer69.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer69.getNamingPolicy();
        enhancer68.setNamingPolicy(namingPolicy72);
        enhancer60.setNamingPolicy(namingPolicy72);
        java.lang.ClassLoader classLoader75 = enhancer60.getClassLoader();
        enhancer54.setClassLoader(classLoader75);
        enhancer47.setClassLoader(classLoader75);
        enhancer25.setClassLoader(classLoader75);
        enhancer19.setClassLoader(classLoader75);
        enhancer5.setClassLoader(classLoader75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class81 = org.mockito.cglib.core.ReflectUtils.defineClass("[Ljava/lang/Class;", byteArray4, classLoader75);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 10]");
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(callbackArray12);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(namingPolicy65);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader75);
    }

    @Test
    public void test06322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06322");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", "java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!]");
        java.lang.String str3 = signature2.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray4 = signature2.getArgumentTypes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str3, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
    }

    @Test
    public void test06323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06323");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = enhancer13.getStrategy();
        enhancer13.setSerialVersionUID((java.lang.Long) 1L);
        java.lang.ClassLoader classLoader17 = enhancer13.getClassLoader();
        enhancer0.setClassLoader(classLoader17);
        boolean boolean19 = enhancer0.getUseCache();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        propertyDescriptor23.setShortDescription("J");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor23.getClass();
        org.mockito.cglib.core.ClassInfo classInfo28 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass27);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        java.lang.reflect.Method method33 = propertyDescriptor32.getReadMethod();
        java.lang.Class<?> wildcardClass34 = propertyDescriptor32.getPropertyEditorClass();
        propertyDescriptor32.setHidden(false);
        boolean boolean37 = propertyDescriptor32.isHidden();
        java.lang.Class<?> wildcardClass38 = propertyDescriptor32.getPropertyEditorClass();
        boolean boolean39 = classInfo28.equals((java.lang.Object) propertyDescriptor32);
        org.mockito.asm.Type type40 = classInfo28.getType();
        int int41 = type40.getSize();
        java.lang.String str42 = type40.getInternalName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getReturnType("J");
        java.lang.String str45 = type44.getDescriptor();
        java.lang.String str46 = type44.getDescriptor();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.toString();
        org.mockito.asm.Type[] typeArray50 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray50);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray50);
        java.lang.String str54 = type40.getDescriptor();
        java.lang.Class<?> wildcardClass55 = type40.getClass();
        org.mockito.cglib.core.ClassInfo classInfo56 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class org.mockito.asm.Type");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(generatorStrategy14);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(classInfo28);
        org.junit.Assert.assertNull(method33);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java/beans/PropertyDescriptor" + "'", str42, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "J" + "'", str45, "J");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "J" + "'", str46, "J");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "I" + "'", str48, "I");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(I)I" + "'", str51, "(I)I");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(I)J" + "'", str52, "(I)J");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(I)Ljava/beans/PropertyDescriptor;" + "'", str53, "(I)Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str54, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classInfo56);
    }

    @Test
    public void test06324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06324");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setUseCache(false);
        enhancer0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader27 = null;
        enhancer0.setClassLoader(classLoader27);
        java.lang.ClassLoader classLoader29 = enhancer0.getClassLoader();
        org.mockito.asm.ClassVisitor classVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test06325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06325");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray49 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method[] methodArray52 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray49, false, false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertNotNull(propertyDescriptorArray49);
        org.junit.Assert.assertNotNull(methodArray52);
    }

    @Test
    public void test06326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06326");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.toString();
        int int16 = type14.getSize();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str19 = type18.toString();
        int int20 = type18.getSize();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.DOUBLE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str24 = type23.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type17, type18, type21, type22, type23, type25 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray26);
        boolean boolean28 = generatorStrategy13.equals((java.lang.Object) typeArray26);
        java.lang.reflect.Method method30 = null;
        java.lang.reflect.Method method31 = null;
        java.beans.PropertyDescriptor propertyDescriptor32 = new java.beans.PropertyDescriptor("hi!", method30, method31);
        boolean boolean33 = generatorStrategy13.equals((java.lang.Object) method31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        org.mockito.cglib.core.Signature signature38 = new org.mockito.cglib.core.Signature("va.beans.PropertyDescriptor", type35, typeArray37);
        boolean boolean39 = generatorStrategy13.equals((java.lang.Object) type35);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        enhancer40.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer50.getNamingPolicy();
        enhancer49.setNamingPolicy(namingPolicy53);
        enhancer48.setNamingPolicy(namingPolicy53);
        enhancer40.setNamingPolicy(namingPolicy53);
        boolean boolean57 = enhancer40.getAttemptLoad();
        boolean boolean58 = enhancer40.getUseCache();
        boolean boolean59 = generatorStrategy13.equals((java.lang.Object) enhancer40);
        boolean boolean60 = enhancer40.getAttemptLoad();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy61 = enhancer40.getStrategy();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "I" + "'", str19, "I");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "char" + "'", str24, "char");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(FIDCCJ)I" + "'", str27, "(FIDCCJ)I");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(generatorStrategy61);
    }

    @Test
    public void test06327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06327");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("");
        java.util.Enumeration<java.lang.String> strEnumeration15 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setConstrained(false);
        boolean boolean18 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setPreferred(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strEnumeration15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06328");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray10 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray9);
        java.lang.reflect.Method[] methodArray13 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray9, false, false);
        java.lang.Class[] classArray14 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray13);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(methodArray13);
        org.junit.Assert.assertNotNull(classArray14);
    }

    @Test
    public void test06329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06329");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        int int12 = classInfo8.getModifiers();
        org.mockito.asm.Type type13 = classInfo8.getSuperType();
        org.mockito.asm.Type type14 = classInfo8.getSuperType();
        java.lang.String str15 = type14.toString();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Ljava/beans/FeatureDescriptor;" + "'", str15, "Ljava/beans/FeatureDescriptor;");
    }

    @Test
    public void test06330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06330");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setBound(false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test06331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06331");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        java.lang.reflect.Method method14 = propertyDescriptor13.getReadMethod();
        java.lang.Class<?> wildcardClass15 = propertyDescriptor13.getPropertyEditorClass();
        propertyDescriptor13.setHidden(false);
        boolean boolean18 = propertyDescriptor13.isHidden();
        propertyDescriptor13.setHidden(false);
        propertyDescriptor13.setDisplayName("");
        boolean boolean23 = propertyDescriptor13.isHidden();
        java.lang.String str24 = propertyDescriptor13.getDisplayName();
        boolean boolean25 = namingPolicy9.equals((java.lang.Object) propertyDescriptor13);
        boolean boolean26 = propertyDescriptor13.isPreferred();
        boolean boolean27 = propertyDescriptor13.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test06332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06332");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        boolean boolean29 = enhancer24.getUseCache();
        enhancer24.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        enhancer40.setNamingPolicy(namingPolicy45);
        enhancer32.setNamingPolicy(namingPolicy45);
        boolean boolean50 = namingPolicy45.equals((java.lang.Object) 0.0d);
        enhancer24.setNamingPolicy(namingPolicy45);
        enhancer0.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = null;
        enhancer56.setStrategy(generatorStrategy59);
        java.lang.Class[] classArray61 = new java.lang.Class[] {};
        java.lang.String[] strArray62 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        java.lang.String[] strArray63 = org.mockito.cglib.core.ReflectUtils.getNames(classArray61);
        enhancer56.setInterfaces(classArray61);
        org.mockito.cglib.core.NamingPolicy namingPolicy65 = enhancer56.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class67 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(namingPolicy65);
    }

    @Test
    public void test06333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06333");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        int int12 = classInfo8.getModifiers();
        org.mockito.asm.Type type13 = classInfo8.getSuperType();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray22 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        boolean boolean23 = type13.equals((java.lang.Object) wildcardClass21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass21);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06334");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.getDescriptor();
        java.lang.String str6 = signature2.getDescriptor();
        org.mockito.asm.Type[] typeArray7 = signature2.getArgumentTypes();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str3, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(I)I" + "'", str4, "(I)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)I" + "'", str5, "(I)I");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(I)I" + "'", str6, "(I)I");
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void test06335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06335");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(false);
        boolean boolean11 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        java.lang.Class<?> wildcardClass20 = namingPolicy17.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray21 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str28 = type27.toString();
        boolean boolean30 = type27.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.toString();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.toString();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type33 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray35);
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type27, typeArray35);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = null;
        enhancer38.setStrategy(generatorStrategy41);
        boolean boolean43 = enhancer38.getUseCache();
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer38.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback49 = null;
        enhancer38.setCallback(callback49);
        boolean boolean51 = signature37.equals((java.lang.Object) enhancer38);
        java.lang.String str52 = signature37.getName();
        java.lang.Class<?> wildcardClass53 = signature37.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.lang.String str55 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass53);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.lang.String str58 = type57.getDescriptor();
        boolean boolean59 = namingPolicy25.equals((java.lang.Object) type57);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getReturnType("I(I)I");
        java.lang.reflect.Method method63 = null;
        java.lang.reflect.Method method64 = null;
        java.beans.PropertyDescriptor propertyDescriptor65 = new java.beans.PropertyDescriptor("hi!", method63, method64);
        propertyDescriptor65.setShortDescription("J");
        java.lang.Class<?> wildcardClass68 = propertyDescriptor65.getPropertyType();
        java.lang.Class<?> wildcardClass69 = propertyDescriptor65.getClass();
        org.mockito.cglib.core.ClassInfo classInfo70 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type[] typeArray71 = classInfo70.getInterfaces();
        org.mockito.asm.Type[] typeArray72 = classInfo70.getInterfaces();
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray72);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(propertyDescriptorArray21);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "J" + "'", str28, "J");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "J" + "'", str32, "J");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "I" + "'", str34, "I");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(I)J" + "'", str36, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str52, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str55, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/cglib/core/Signature" + "'", str56, "org/mockito/cglib/core/Signature");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str58, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(classInfo70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "()I" + "'", str73, "()I");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "()Lorg/mockito/cglib/core/Signature;" + "'", str74, "()Lorg/mockito/cglib/core/Signature;");
    }

    @Test
    public void test06336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06336");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer15.setCallbackFilter(callbackFilter23);
        enhancer15.setUseCache(false);
        java.lang.ClassLoader classLoader27 = enhancer15.getClassLoader();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        propertyDescriptor31.setShortDescription("J");
        java.lang.Class<?> wildcardClass34 = propertyDescriptor31.getPropertyType();
        java.lang.Class<?> wildcardClass35 = propertyDescriptor31.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        enhancer15.setSuperclass((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass47, wildcardClass55 };
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray59);
        java.lang.reflect.Constructor constructor62 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray59);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor62);
        org.mockito.cglib.core.Signature signature64 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor62);
        org.mockito.cglib.core.MethodInfo methodInfo66 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor62, 0);
        org.mockito.cglib.core.Signature signature67 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor62);
        org.mockito.asm.Type type68 = signature67.getReturnType();
        org.mockito.cglib.core.Signature signature71 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = signature71.equals((java.lang.Object) type72);
        java.lang.Class[] classArray74 = new java.lang.Class[] {};
        java.lang.String[] strArray75 = org.mockito.cglib.core.ReflectUtils.getNames(classArray74);
        java.lang.String[] strArray76 = org.mockito.cglib.core.ReflectUtils.getNames(classArray74);
        boolean boolean77 = signature71.equals((java.lang.Object) classArray74);
        java.lang.Class[] classArray78 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray74);
        int int79 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray74);
        boolean boolean80 = signature67.equals((java.lang.Object) classArray74);
        java.lang.String[] strArray81 = org.mockito.cglib.core.ReflectUtils.getNames(classArray74);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter82 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, classArray74, callbackFilter82, callbackArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java/beans/PropertyDescriptor" + "'", str10, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java/beans/PropertyDescriptor" + "'", str13, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str39, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(constructor62);
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertNotNull(signature64);
        org.junit.Assert.assertNotNull(methodInfo66);
        org.junit.Assert.assertNotNull(signature67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(classArray78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test06337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06337");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        int int53 = methodInfo52.getModifiers();
        java.lang.String str54 = methodInfo52.toString();
        boolean boolean56 = methodInfo52.equals((java.lang.Object) "(I)Lava.beans.PropertyDescriptor[name=hi!;");
        org.mockito.cglib.core.ClassInfo classInfo57 = methodInfo52.getClassInfo();
        java.lang.String str58 = methodInfo52.toString();
        org.mockito.cglib.core.Signature signature59 = methodInfo52.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(classInfo57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str58, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature59);
    }

    @Test
    public void test06338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06338");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("hi!");
        propertyDescriptor3.setExpert(false);
        java.lang.String str13 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("Lorg/mockito/cglib/core/AbstractClassGenerator;");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06339");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer11.setCallbackFilter(callbackFilter12);
        java.lang.Class[] classArray14 = new java.lang.Class[] {};
        java.lang.String[] strArray15 = org.mockito.cglib.core.ReflectUtils.getNames(classArray14);
        enhancer11.setInterfaces(classArray14);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer17.getClassLoader();
        enhancer11.setClassLoader(classLoader23);
        enhancer0.setClassLoader(classLoader23);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy26 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer0.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy28 = enhancer0.getStrategy();
        java.lang.ClassLoader classLoader29 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter30 = null;
        enhancer0.setCallbackFilter(callbackFilter30);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer0.setCallbackFilter(callbackFilter32);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
        org.junit.Assert.assertNotNull(generatorStrategy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNotNull(generatorStrategy28);
        org.junit.Assert.assertNotNull(classLoader29);
    }

    @Test
    public void test06340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06340");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", "java.beans.PropertyDescriptor[name=hi!; displayName=(I)J; constrained]");
        java.lang.String str3 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; shortDescription=J]" + "'", str3, "java.beans.PropertyDescriptor[name=hi!; shortDescription=J]");
    }

    @Test
    public void test06341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06341");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        java.lang.String str13 = propertyDescriptor3.getShortDescription();
        java.lang.String str14 = propertyDescriptor3.getName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "J" + "'", str13, "J");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test06342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06342");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java/beans/FeatureDescriptor(I)I");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06343");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy2 = enhancer1.getStrategy();
        enhancer1.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer1.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        enhancer6.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        boolean boolean16 = enhancer11.getUseCache();
        enhancer11.setUseFactory(true);
        enhancer11.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer11.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy21);
        java.lang.ClassLoader classLoader23 = enhancer6.getClassLoader();
        enhancer1.setClassLoader(classLoader23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method25 = org.mockito.cglib.core.ReflectUtils.findMethod("", classLoader23);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(generatorStrategy2);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test06344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06344");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]");
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = null;
        enhancer2.setStrategy(generatorStrategy5);
        boolean boolean7 = enhancer2.getUseCache();
        enhancer2.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer12.getNamingPolicy();
        enhancer11.setNamingPolicy(namingPolicy15);
        enhancer10.setNamingPolicy(namingPolicy15);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        enhancer18.setNamingPolicy(namingPolicy23);
        enhancer10.setNamingPolicy(namingPolicy23);
        boolean boolean28 = namingPolicy23.equals((java.lang.Object) 0.0d);
        enhancer2.setNamingPolicy(namingPolicy23);
        enhancer2.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer32.getNamingPolicy();
        enhancer2.setNamingPolicy(namingPolicy35);
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        boolean boolean41 = propertyDescriptor40.isHidden();
        propertyDescriptor40.setHidden(false);
        propertyDescriptor40.setDisplayName("(I)J");
        java.lang.reflect.Method method46 = null;
        propertyDescriptor40.setWriteMethod(method46);
        propertyDescriptor40.setPreferred(false);
        java.lang.Class<?> wildcardClass50 = propertyDescriptor40.getPropertyType();
        propertyDescriptor40.setExpert(true);
        java.lang.reflect.Method method55 = null;
        java.lang.reflect.Method method56 = null;
        java.beans.PropertyDescriptor propertyDescriptor57 = new java.beans.PropertyDescriptor("hi!", method55, method56);
        propertyDescriptor57.setShortDescription("J");
        java.lang.Class<?> wildcardClass60 = propertyDescriptor57.getPropertyType();
        java.lang.Class<?> wildcardClass61 = propertyDescriptor57.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        org.mockito.cglib.core.ClassInfo classInfo63 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray64 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        propertyDescriptor40.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]", (java.lang.Object) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass61);
        java.beans.PropertyDescriptor[] propertyDescriptorArray68 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass61);
        enhancer2.setSuperclass((java.lang.Class) wildcardClass61);
        boolean boolean70 = type1.equals((java.lang.Object) wildcardClass61);
        java.lang.String str71 = type1.getInternalName();
        org.mockito.asm.Type type72 = type1.getElementType();
        java.lang.Object obj73 = null;
        boolean boolean74 = type1.equals(obj73);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(classInfo63);
        org.junit.Assert.assertNotNull(propertyDescriptorArray64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(propertyDescriptorArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]" + "'", str71, "java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06345");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(I)LI;");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L(I)LI;;" + "'", str2, "L(I)LI;;");
    }

    @Test
    public void test06346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06346");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.Class[] classArray11 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray10);
        int int12 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray11);
        java.lang.Class<?> wildcardClass13 = classArray11.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy19 = null;
        enhancer16.setStrategy(generatorStrategy19);
        boolean boolean21 = enhancer16.getUseCache();
        enhancer16.setUseFactory(true);
        enhancer16.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer16.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = enhancer16.getStrategy();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        propertyDescriptor31.setShortDescription("J");
        java.lang.Class<?> wildcardClass34 = propertyDescriptor31.getPropertyType();
        java.lang.Class<?> wildcardClass35 = propertyDescriptor31.getClass();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray45 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.Class[] classArray47 = new java.lang.Class[] { wildcardClass35, wildcardClass43 };
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray47);
        boolean boolean49 = generatorStrategy27.equals((java.lang.Object) classArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method50 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass13, "()L()V;", classArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ()L()V;");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(generatorStrategy27);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test06347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06347");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06348");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = null;
        propertyDescriptor3.setReadMethod(method12);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setHidden(false);
        java.lang.String str17 = propertyDescriptor3.getDisplayName();
        boolean boolean18 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setConstrained(false);
        java.lang.String str21 = propertyDescriptor3.getShortDescription();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "J" + "'", str21, "J");
    }

    @Test
    public void test06349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06349");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo16 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray17 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass11);
        java.lang.reflect.Method[] methodArray22 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray19, false, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(classInfo16);
        org.junit.Assert.assertNotNull(propertyDescriptorArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str18, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(methodArray22);
    }

    @Test
    public void test06350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06350");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        java.lang.ClassLoader classLoader6 = enhancer0.getClassLoader();
        boolean boolean7 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        java.lang.reflect.Method method11 = null;
        java.lang.reflect.Method method12 = null;
        java.beans.PropertyDescriptor propertyDescriptor13 = new java.beans.PropertyDescriptor("hi!", method11, method12);
        boolean boolean14 = propertyDescriptor13.isHidden();
        propertyDescriptor13.setHidden(false);
        propertyDescriptor13.setDisplayName("(I)J");
        java.lang.reflect.Method method19 = null;
        propertyDescriptor13.setWriteMethod(method19);
        propertyDescriptor13.setPreferred(false);
        java.lang.String str23 = propertyDescriptor13.getShortDescription();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.reflect.Method method28 = propertyDescriptor27.getReadMethod();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor27.getPropertyEditorClass();
        propertyDescriptor27.setHidden(false);
        boolean boolean32 = propertyDescriptor27.isHidden();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor27.getPropertyEditorClass();
        propertyDescriptor27.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass36 = propertyDescriptor27.getPropertyType();
        propertyDescriptor27.setExpert(true);
        propertyDescriptor27.setExpert(true);
        boolean boolean41 = propertyDescriptor27.isExpert();
        propertyDescriptor27.setBound(true);
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.cglib.core.ClassInfo classInfo54 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass52);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray55);
        propertyDescriptor27.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray56);
        java.lang.Class[] classArray58 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray56);
        java.beans.PropertyEditor propertyEditor59 = propertyDescriptor13.createPropertyEditor((java.lang.Object) classArray58);
        int int60 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray58);
        enhancer0.setInterfaces(classArray58);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(classLoader6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(I)J" + "'", str23, "(I)J");
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(classInfo54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(classArray58);
        org.junit.Assert.assertNull(propertyEditor59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test06351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06351");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setName("B");
        boolean boolean9 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setWriteMethod(method10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06352");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 1);
        org.mockito.asm.Type[] typeArray53 = methodInfo52.getExceptionTypes();
        java.lang.String str54 = methodInfo52.toString();
        org.mockito.cglib.core.ClassInfo classInfo55 = methodInfo52.getClassInfo();
        java.lang.String str56 = classInfo55.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.beans.PropertyDescriptor" + "'", str56, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test06353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06353");
        java.lang.reflect.Constructor constructor0 = null;
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor4.getClass();
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type[] typeArray10 = classInfo9.getInterfaces();
        java.lang.String str11 = classInfo9.toString();
        org.mockito.asm.Type[] typeArray12 = classInfo9.getInterfaces();
        int int13 = classInfo9.getModifiers();
        org.mockito.asm.Type type14 = classInfo9.getSuperType();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer15.setCallbackFilter(callbackFilter23);
        enhancer15.setUseCache(false);
        java.lang.ClassLoader classLoader27 = enhancer15.getClassLoader();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        propertyDescriptor31.setShortDescription("J");
        java.lang.Class<?> wildcardClass34 = propertyDescriptor31.getPropertyType();
        java.lang.Class<?> wildcardClass35 = propertyDescriptor31.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        enhancer15.setSuperclass((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass47, wildcardClass55 };
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray59);
        java.lang.reflect.Constructor constructor62 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray59);
        org.mockito.cglib.core.MethodInfo methodInfo63 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor62);
        org.mockito.asm.Type[] typeArray64 = methodInfo63.getExceptionTypes();
        boolean boolean65 = classInfo9.equals((java.lang.Object) typeArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = org.mockito.cglib.core.ReflectUtils.newInstance(constructor0, (java.lang.Object[]) typeArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor" + "'", str11, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str39, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(constructor62);
        org.junit.Assert.assertNotNull(methodInfo63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test06354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06354");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        boolean boolean5 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06355");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.String str12 = propertyDescriptor3.getName();
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = method13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test06356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06356");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        propertyDescriptor12.setValue("float", (java.lang.Object) 8);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setDisplayName("va.beans.PropertyDescriptor");
        java.lang.reflect.Method method26 = propertyDescriptor12.getReadMethod();
        java.lang.reflect.Method method27 = propertyDescriptor12.getWriteMethod();
        java.lang.Class<?> wildcardClass28 = propertyDescriptor12.getPropertyEditorClass();
        java.lang.reflect.Method method29 = propertyDescriptor12.getReadMethod();
        java.lang.String str30 = propertyDescriptor12.getDisplayName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(method27);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(method29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "va.beans.PropertyDescriptor" + "'", str30, "va.beans.PropertyDescriptor");
    }

    @Test
    public void test06357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06357");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer10.setUseFactory(false);
        enhancer10.setInterceptDuringConstruction(true);
        propertyDescriptor3.setValue("(FIDCCJ)I", (java.lang.Object) enhancer10);
        boolean boolean19 = propertyDescriptor3.isExpert();
        boolean boolean20 = propertyDescriptor3.isBound();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06358");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer30.setUseFactory(false);
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer38.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer49.setCallbackFilter(callbackFilter50);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        enhancer49.setInterfaces(classArray52);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = enhancer55.getClassLoader();
        enhancer49.setClassLoader(classLoader61);
        enhancer38.setClassLoader(classLoader61);
        enhancer30.setClassLoader(classLoader61);
        enhancer0.setClassLoader(classLoader61);
        java.lang.reflect.Method method67 = null;
        java.lang.reflect.Method method68 = null;
        java.beans.PropertyDescriptor propertyDescriptor69 = new java.beans.PropertyDescriptor("hi!", method67, method68);
        propertyDescriptor69.setShortDescription("J");
        java.lang.Class<?> wildcardClass72 = propertyDescriptor69.getPropertyType();
        java.lang.Class<?> wildcardClass73 = propertyDescriptor69.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.cglib.core.ClassInfo classInfo75 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray76 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass73);
        java.lang.String str77 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass73);
        java.beans.PropertyDescriptor[] propertyDescriptorArray78 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass73);
        java.lang.ClassLoader classLoader81 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader82 = enhancer0.getClassLoader();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(classInfo75);
        org.junit.Assert.assertNotNull(propertyDescriptorArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java/beans/PropertyDescriptor" + "'", str77, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertNotNull(classLoader82);
    }

    @Test
    public void test06359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06359");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        int int51 = methodInfo50.getModifiers();
        org.mockito.asm.Type[] typeArray52 = methodInfo50.getExceptionTypes();
        java.lang.reflect.Method method54 = null;
        java.lang.reflect.Method method55 = null;
        java.beans.PropertyDescriptor propertyDescriptor56 = new java.beans.PropertyDescriptor("hi!", method54, method55);
        java.lang.reflect.Method method57 = propertyDescriptor56.getReadMethod();
        java.lang.Class<?> wildcardClass58 = propertyDescriptor56.getPropertyEditorClass();
        propertyDescriptor56.setHidden(false);
        boolean boolean61 = propertyDescriptor56.isHidden();
        propertyDescriptor56.setName("(FIDCCJ)I");
        boolean boolean64 = methodInfo50.equals((java.lang.Object) propertyDescriptor56);
        java.lang.reflect.Method method65 = null;
        propertyDescriptor56.setReadMethod(method65);
        java.lang.String str67 = propertyDescriptor56.getShortDescription();
        propertyDescriptor56.setName("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor[name=hi!]; values={(I)F=java.beans.PropertyDescriptor}]");
        propertyDescriptor56.setName(".beans.FeatureDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNull(method57);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(FIDCCJ)I" + "'", str67, "(FIDCCJ)I");
    }

    @Test
    public void test06360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06360");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (byte) 1);
        org.mockito.cglib.core.Signature signature54 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("hi!", method56, method57);
        java.lang.reflect.Method method59 = propertyDescriptor58.getReadMethod();
        java.lang.reflect.Method method60 = propertyDescriptor58.getWriteMethod();
        boolean boolean61 = propertyDescriptor58.isExpert();
        java.lang.Class<?> wildcardClass62 = propertyDescriptor58.getPropertyEditorClass();
        propertyDescriptor58.setShortDescription("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; displayName=java/beans/PropertyDescriptor; constrained]");
        boolean boolean65 = signature54.equals((java.lang.Object) "java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; displayName=java/beans/PropertyDescriptor; constrained]");
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertNull(method59);
        org.junit.Assert.assertNull(method60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test06361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06361");
        byte[] byteArray1 = new byte[] {};
        java.lang.reflect.Method method3 = null;
        java.lang.reflect.Method method4 = null;
        java.beans.PropertyDescriptor propertyDescriptor5 = new java.beans.PropertyDescriptor("hi!", method3, method4);
        java.lang.reflect.Method method6 = propertyDescriptor5.getReadMethod();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor5.getPropertyEditorClass();
        propertyDescriptor5.setHidden(false);
        java.lang.reflect.Method method10 = propertyDescriptor5.getReadMethod();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str13 = type12.toString();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.toString();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type14 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray16);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = null;
        enhancer18.setStrategy(generatorStrategy21);
        boolean boolean23 = enhancer18.getUseCache();
        org.mockito.cglib.proxy.Callback callback24 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray25 = new org.mockito.cglib.proxy.Callback[] { callback24 };
        enhancer18.setCallbacks(callbackArray25);
        boolean boolean27 = type12.equals((java.lang.Object) enhancer18);
        propertyDescriptor5.setValue("float", (java.lang.Object) enhancer18);
        enhancer18.setInterceptDuringConstruction(true);
        java.lang.ClassLoader classLoader31 = enhancer18.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class32 = org.mockito.cglib.core.ReflectUtils.defineClass("Lva/beans/FeatureDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", byteArray1, classLoader31);
            org.junit.Assert.fail("Expected exception of type java.lang.reflect.InvocationTargetException; message: null");
        } catch (java.lang.reflect.InvocationTargetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(method10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "J" + "'", str13, "J");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(I)J" + "'", str17, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(callbackArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(classLoader31);
    }

    @Test
    public void test06362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06362");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer30.setUseFactory(false);
        enhancer30.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer38.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter50 = null;
        enhancer49.setCallbackFilter(callbackFilter50);
        java.lang.Class[] classArray52 = new java.lang.Class[] {};
        java.lang.String[] strArray53 = org.mockito.cglib.core.ReflectUtils.getNames(classArray52);
        enhancer49.setInterfaces(classArray52);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        java.lang.ClassLoader classLoader61 = enhancer55.getClassLoader();
        enhancer49.setClassLoader(classLoader61);
        enhancer38.setClassLoader(classLoader61);
        enhancer30.setClassLoader(classLoader61);
        enhancer0.setClassLoader(classLoader61);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy66 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy68 = null;
        enhancer0.setNamingPolicy(namingPolicy68);
        org.mockito.asm.ClassVisitor classVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
        org.junit.Assert.assertNotNull(classArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertNotNull(generatorStrategy66);
        org.junit.Assert.assertNotNull(namingPolicy67);
    }

    @Test
    public void test06363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06363");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("org/mockito/cglib/core/ReflectUtils$3", method1, method2);
        boolean boolean4 = propertyDescriptor3.isExpert();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06364");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;", "java.beans.PropertyDescriptor[name=float; values={=false}]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06365");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setUseFactory(false);
        enhancer0.setUseFactory(false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
    }

    @Test
    public void test06366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06366");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; bound; propertyEditorClass=class java.beans.PropertyDescriptor]", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass4);
    }

    @Test
    public void test06367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06367");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        java.lang.reflect.Method method31 = null;
        java.lang.reflect.Method method32 = null;
        java.beans.PropertyDescriptor propertyDescriptor33 = new java.beans.PropertyDescriptor("hi!", method31, method32);
        propertyDescriptor33.setShortDescription("J");
        java.lang.Class<?> wildcardClass36 = propertyDescriptor33.getPropertyType();
        java.lang.Class<?> wildcardClass37 = propertyDescriptor33.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass37);
        java.beans.PropertyDescriptor[] propertyDescriptorArray39 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass37);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass37);
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer42.setCallbackFilter(callbackFilter43);
        boolean boolean45 = enhancer42.getAttemptLoad();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        propertyDescriptor49.setShortDescription("J");
        java.lang.Class<?> wildcardClass52 = propertyDescriptor49.getPropertyType();
        java.lang.Class<?> wildcardClass53 = propertyDescriptor49.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        org.mockito.cglib.core.ClassInfo classInfo55 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray56 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass53);
        enhancer42.setSuperclass((java.lang.Class) wildcardClass53);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer42.getNamingPolicy();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer42.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy61);
        boolean boolean63 = enhancer0.getUseCache();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertNotNull(propertyDescriptorArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java/beans/PropertyDescriptor" + "'", str40, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(classInfo55);
        org.junit.Assert.assertNotNull(propertyDescriptorArray56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test06368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06368");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        boolean boolean11 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method13 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class java.beans.PropertyDescriptor is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str9, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
    }

    @Test
    public void test06369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06369");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.reflect.Method method28 = propertyDescriptor27.getReadMethod();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor27.getPropertyEditorClass();
        propertyDescriptor27.setValue("J", (java.lang.Object) 0.0d);
        boolean boolean33 = generatorStrategy23.equals((java.lang.Object) 0.0d);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        enhancer36.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer36.getNamingPolicy();
        enhancer35.setNamingPolicy(namingPolicy39);
        enhancer34.setNamingPolicy(namingPolicy39);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter42 = null;
        enhancer34.setCallbackFilter(callbackFilter42);
        enhancer34.setUseCache(false);
        java.lang.ClassLoader classLoader46 = enhancer34.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy47 = enhancer34.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer50.getNamingPolicy();
        enhancer49.setNamingPolicy(namingPolicy53);
        enhancer48.setNamingPolicy(namingPolicy53);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter56 = null;
        enhancer48.setCallbackFilter(callbackFilter56);
        enhancer48.setUseCache(false);
        java.lang.ClassLoader classLoader60 = enhancer48.getClassLoader();
        enhancer34.setClassLoader(classLoader60);
        boolean boolean62 = enhancer34.getUseCache();
        org.mockito.cglib.proxy.Callback callback63 = null;
        enhancer34.setCallback(callback63);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer34.setCallbackFilter(callbackFilter65);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray67 = generatorStrategy23.generate((org.mockito.cglib.core.ClassGenerator) enhancer34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertNotNull(generatorStrategy47);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06370");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("java.beans.PropertyDescriptor[name=hi!]");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str3, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test06371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06371");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("hi!", "F");
        org.mockito.asm.Type type3 = signature2.getReturnType();
        java.lang.String str4 = type3.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F" + "'", str4, "F");
    }

    @Test
    public void test06372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06372");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0}]");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06373");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray50 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        java.lang.String str51 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) ' ');
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str58 = type57.toString();
        boolean boolean60 = type57.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str62 = type61.toString();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str64 = type63.toString();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type63 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray65);
        org.mockito.cglib.core.Signature signature67 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type57, typeArray65);
        java.lang.String str68 = signature67.toString();
        org.mockito.asm.Type[] typeArray69 = signature67.getArgumentTypes();
        org.mockito.asm.Type type70 = signature67.getReturnType();
        org.mockito.asm.Type[] typeArray71 = signature67.getArgumentTypes();
        java.lang.Class<?> wildcardClass72 = typeArray71.getClass();
        boolean boolean73 = methodInfo55.equals((java.lang.Object) typeArray71);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str51, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "J" + "'", str58, "J");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "J" + "'", str62, "J");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "I" + "'", str64, "I");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(I)J" + "'", str66, "(I)J");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J" + "'", str68, "java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test06374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06374");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 57);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str53 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray54 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        java.lang.String str55 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        java.lang.String str56 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str56, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test06375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06375");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        boolean boolean8 = signature2.equals((java.lang.Object) classArray5);
        java.lang.String[] strArray9 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter11 = null;
        enhancer10.setCallbackFilter(callbackFilter11);
        boolean boolean13 = enhancer10.getAttemptLoad();
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo23 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray24 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass21);
        enhancer10.setSuperclass((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        java.beans.PropertyDescriptor[] propertyDescriptorArray27 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass21);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo29 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.cglib.core.ClassInfo classInfo30 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass21);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer31.setCallbackFilter(callbackFilter32);
        java.lang.Class[] classArray34 = new java.lang.Class[] {};
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray34);
        enhancer31.setInterfaces(classArray34);
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        enhancer38.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy41 = enhancer38.getNamingPolicy();
        enhancer37.setNamingPolicy(namingPolicy41);
        java.lang.ClassLoader classLoader43 = enhancer37.getClassLoader();
        enhancer31.setClassLoader(classLoader43);
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer45.setCallbackFilter(callbackFilter46);
        java.lang.Class[] classArray48 = new java.lang.Class[] {};
        java.lang.String[] strArray49 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        enhancer45.setInterfaces(classArray48);
        enhancer31.setInterfaces(classArray48);
        java.lang.String[] strArray52 = org.mockito.cglib.core.ReflectUtils.getNames(classArray48);
        java.lang.Class[] classArray53 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) strArray52);
        boolean boolean54 = classInfo30.equals((java.lang.Object) classArray53);
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray53);
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("hi!", method57, method58);
        propertyDescriptor59.setShortDescription("J");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor59.getPropertyType();
        java.lang.Class<?> wildcardClass63 = propertyDescriptor59.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.cglib.core.ClassInfo classInfo65 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass63);
        org.mockito.cglib.core.ClassInfo classInfo67 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass63);
        boolean boolean68 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray69 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass63);
        java.lang.reflect.Method[] methodArray72 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray69, true, true);
        java.lang.reflect.Method[] methodArray73 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray55, methodArray72);
        java.lang.reflect.Method[] methodArray74 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray9, methodArray72);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(classInfo23);
        org.junit.Assert.assertNotNull(propertyDescriptorArray24);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(propertyDescriptorArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str28, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNotNull(classInfo29);
        org.junit.Assert.assertNotNull(classInfo30);
        org.junit.Assert.assertNotNull(classArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(namingPolicy41);
        org.junit.Assert.assertNotNull(classLoader43);
        org.junit.Assert.assertNotNull(classArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(classInfo65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(classInfo67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(propertyDescriptorArray69);
        org.junit.Assert.assertNotNull(methodArray72);
        org.junit.Assert.assertNotNull(methodArray73);
        org.junit.Assert.assertNotNull(methodArray74);
    }

    @Test
    public void test06376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06376");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str1 = type0.getClassName();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer6.getNamingPolicy();
        enhancer5.setNamingPolicy(namingPolicy9);
        enhancer4.setNamingPolicy(namingPolicy9);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter12 = null;
        enhancer4.setCallbackFilter(callbackFilter12);
        enhancer4.setUseCache(false);
        java.lang.ClassLoader classLoader16 = enhancer4.getClassLoader();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("hi!", method18, method19);
        propertyDescriptor20.setShortDescription("J");
        java.lang.Class<?> wildcardClass23 = propertyDescriptor20.getPropertyType();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        enhancer4.setSuperclass((java.lang.Class) wildcardClass24);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy32 = enhancer29.getNamingPolicy();
        enhancer28.setNamingPolicy(namingPolicy32);
        java.lang.ClassLoader classLoader34 = enhancer28.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer28.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy35);
        boolean boolean37 = enhancer4.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        enhancer38.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer48.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy51);
        enhancer46.setNamingPolicy(namingPolicy51);
        enhancer38.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        enhancer56.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy59 = enhancer56.getNamingPolicy();
        enhancer55.setNamingPolicy(namingPolicy59);
        org.mockito.cglib.proxy.Callback callback61 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray62 = new org.mockito.cglib.proxy.Callback[] { callback61 };
        enhancer55.setCallbacks(callbackArray62);
        enhancer38.setCallbacks(callbackArray62);
        enhancer4.setCallbacks(callbackArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.proxy.Enhancer.registerCallbacks((java.lang.Class) wildcardClass2, callbackArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class org.mockito.asm.Type is not an enhanced class");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "char" + "'", str1, "char");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java/beans/PropertyDescriptor" + "'", str26, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy32);
        org.junit.Assert.assertNotNull(classLoader34);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy59);
        org.junit.Assert.assertNotNull(callbackArray62);
    }

    @Test
    public void test06377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06377");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setUseFactory(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test06378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06378");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("hi!");
        propertyDescriptor3.setExpert(false);
        java.lang.String str13 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean15 = propertyDescriptor3.isPreferred();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden; expert]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06379");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test06380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06380");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.reflect.Method method26 = propertyDescriptor25.getReadMethod();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setHidden(false);
        boolean boolean30 = propertyDescriptor25.isHidden();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setName("java/beans/PropertyDescriptor");
        propertyDescriptor25.setName("(I)LI;");
        propertyDescriptor25.setShortDescription("(I)LI;");
        java.lang.reflect.Method method38 = propertyDescriptor25.getReadMethod();
        boolean boolean39 = classInfo8.equals((java.lang.Object) propertyDescriptor25);
        propertyDescriptor25.setConstrained(false);
        java.lang.reflect.Method method42 = propertyDescriptor25.getReadMethod();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor25.getPropertyType();
        java.lang.Object obj45 = propertyDescriptor25.getValue("java.beans.PropertyDescriptor[name=hi!; displayName=(I)J; preferred]");
        java.lang.reflect.Method method46 = null;
        propertyDescriptor25.setWriteMethod(method46);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(method42);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test06381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06381");
        java.lang.reflect.Method method2 = null;
        java.lang.reflect.Method method3 = null;
        java.beans.PropertyDescriptor propertyDescriptor4 = new java.beans.PropertyDescriptor("hi!", method2, method3);
        propertyDescriptor4.setShortDescription("J");
        java.lang.Class<?> wildcardClass7 = propertyDescriptor4.getPropertyType();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor4.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray11 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        enhancer17.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer17.getNamingPolicy();
        enhancer16.setNamingPolicy(namingPolicy20);
        enhancer15.setNamingPolicy(namingPolicy20);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter23 = null;
        enhancer15.setCallbackFilter(callbackFilter23);
        enhancer15.setUseCache(false);
        java.lang.ClassLoader classLoader27 = enhancer15.getClassLoader();
        java.lang.reflect.Method method29 = null;
        java.lang.reflect.Method method30 = null;
        java.beans.PropertyDescriptor propertyDescriptor31 = new java.beans.PropertyDescriptor("hi!", method29, method30);
        propertyDescriptor31.setShortDescription("J");
        java.lang.Class<?> wildcardClass34 = propertyDescriptor31.getPropertyType();
        java.lang.Class<?> wildcardClass35 = propertyDescriptor31.getClass();
        org.mockito.cglib.core.ClassInfo classInfo36 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass35);
        enhancer15.setSuperclass((java.lang.Class) wildcardClass35);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass35);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.reflect.Method method41 = null;
        java.lang.reflect.Method method42 = null;
        java.beans.PropertyDescriptor propertyDescriptor43 = new java.beans.PropertyDescriptor("hi!", method41, method42);
        propertyDescriptor43.setShortDescription("J");
        java.lang.Class<?> wildcardClass46 = propertyDescriptor43.getPropertyType();
        java.lang.Class<?> wildcardClass47 = propertyDescriptor43.getClass();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.beans.PropertyDescriptor[] propertyDescriptorArray57 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.Class[] classArray59 = new java.lang.Class[] { wildcardClass47, wildcardClass55 };
        java.lang.String[] strArray60 = org.mockito.cglib.core.ReflectUtils.getNames(classArray59);
        int int61 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray59);
        java.lang.reflect.Constructor constructor62 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass35, classArray59);
        java.lang.String str63 = org.mockito.asm.Type.getConstructorDescriptor(constructor62);
        org.mockito.cglib.core.MethodInfo methodInfo64 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor62);
        java.lang.String str65 = org.mockito.asm.Type.getConstructorDescriptor(constructor62);
        java.lang.String str66 = org.mockito.asm.Type.getConstructorDescriptor(constructor62);
        org.mockito.asm.Type[] typeArray67 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor62);
        org.mockito.cglib.core.Signature signature68 = new org.mockito.cglib.core.Signature("Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", type14, typeArray67);
        java.lang.String str69 = signature68.getDescriptor();
        java.lang.String str70 = signature68.getName();
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertNotNull(propertyDescriptorArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java/beans/PropertyDescriptor" + "'", str12, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(classInfo36);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str39, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(propertyDescriptorArray57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(constructor62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str63, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str65, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str66, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "()Ljava/beans/PropertyDescriptor;" + "'", str69, "()Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]" + "'", str70, "Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]");
    }

    @Test
    public void test06382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06382");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=Ljava/beans/PropertyDescriptor;java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]]", method1, method2);
        java.util.Enumeration<java.lang.String> strEnumeration4 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNotNull(strEnumeration4);
    }

    @Test
    public void test06383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06383");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader11 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
    }

    @Test
    public void test06384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06384");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("B", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getWriteMethod();
        boolean boolean5 = propertyDescriptor3.isHidden();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06385");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        java.lang.String str22 = propertyDescriptor21.getName();
        boolean boolean23 = propertyDescriptor21.isHidden();
        java.lang.String str24 = propertyDescriptor21.getName();
        propertyDescriptor21.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        enhancer28.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy31 = enhancer28.getNamingPolicy();
        enhancer28.setUseFactory(false);
        enhancer28.setInterceptDuringConstruction(true);
        propertyDescriptor21.setValue("(FIDCCJ)I", (java.lang.Object) enhancer28);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer28.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer45 = new org.mockito.cglib.proxy.Enhancer();
        enhancer45.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy48 = enhancer45.getNamingPolicy();
        enhancer44.setNamingPolicy(namingPolicy48);
        org.mockito.cglib.proxy.Callback callback50 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray51 = new org.mockito.cglib.proxy.Callback[] { callback50 };
        enhancer44.setCallbacks(callbackArray51);
        enhancer38.setCallbacks(callbackArray51);
        enhancer28.setCallbacks(callbackArray51);
        enhancer0.setCallbacks(callbackArray51);
        enhancer0.setUseFactory(true);
        java.lang.ClassLoader classLoader58 = enhancer0.getClassLoader();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy31);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(namingPolicy48);
        org.junit.Assert.assertNotNull(callbackArray51);
        org.junit.Assert.assertNotNull(classLoader58);
    }

    @Test
    public void test06386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06386");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Linit>(Ljava/beans/PropertyDescriptor;");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Linit>(Ljava/beans/PropertyDescriptor;" + "'", str2, "Linit>(Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test06387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06387");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor]", method1, method2);
        java.lang.reflect.Method method4 = null;
        propertyDescriptor3.setWriteMethod(method4);
        java.lang.String str6 = propertyDescriptor3.getShortDescription();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound](I)Lva/beans/PropertyDescriptor;");
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0}; propertyEditorClass=class java.beans.PropertyDescriptor]");
        java.lang.String str13 = type12.toString();
        java.lang.String str14 = type12.getClassName();
        org.mockito.asm.Type type15 = type12.getElementType();
        int int17 = type12.getOpcode(39);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("()Ljava/beans/FeatureDescriptor;");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray19);
        propertyDescriptor3.setValue("java/beans/FeatureDescriptor(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)Ljava/beans/FeatureDescriptor;", (java.lang.Object) str20);
        propertyDescriptor3.setConstrained(true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor]" + "'", str6, "java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor]");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lava.beans.PropertyDescriptor[name=hi!;" + "'", str13, "Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ava.beans.PropertyDescriptor[name=hi!" + "'", str14, "ava.beans.PropertyDescriptor[name=hi!");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 43 + "'", int17 == 43);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "()Lava.beans.PropertyDescriptor[name=hi!;" + "'", str20, "()Lava.beans.PropertyDescriptor[name=hi!;");
    }

    @Test
    public void test06388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06388");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]");
        java.lang.String str3 = signature2.getDescriptor();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]" + "'", str3, "java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]");
    }

    @Test
    public void test06389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06389");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        propertyDescriptor19.setShortDescription("J");
        java.lang.Class<?> wildcardClass22 = propertyDescriptor19.getPropertyType();
        java.lang.Class<?> wildcardClass23 = propertyDescriptor19.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.beans.PropertyDescriptor[] propertyDescriptorArray25 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass23);
        java.lang.reflect.Method[] methodArray28 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray25, true, true);
        java.lang.Class[] classArray29 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray28);
        int int30 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer33.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy42 = enhancer39.getNamingPolicy();
        enhancer38.setNamingPolicy(namingPolicy42);
        org.mockito.cglib.proxy.Callback callback44 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray45 = new org.mockito.cglib.proxy.Callback[] { callback44 };
        enhancer38.setCallbacks(callbackArray45);
        enhancer32.setCallbacks(callbackArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, classArray29, callbackFilter31, callbackArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java/beans/PropertyDescriptor" + "'", str15, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(propertyDescriptorArray25);
        org.junit.Assert.assertNotNull(methodArray28);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy42);
        org.junit.Assert.assertNotNull(callbackArray45);
    }

    @Test
    public void test06390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06390");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj6 = propertyDescriptor3.getValue("I");
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method9 = null;
        propertyDescriptor3.setWriteMethod(method9);
        propertyDescriptor3.setBound(false);
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(method13);
    }

    @Test
    public void test06391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06391");
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter2 = null;
        enhancer1.setCallbackFilter(callbackFilter2);
        boolean boolean4 = enhancer1.getAttemptLoad();
        enhancer1.setAttemptLoad(false);
        boolean boolean7 = enhancer1.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter9 = null;
        enhancer8.setCallbackFilter(callbackFilter9);
        java.lang.Class[] classArray11 = new java.lang.Class[] {};
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray11);
        enhancer8.setInterfaces(classArray11);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        enhancer23.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer23.getNamingPolicy();
        enhancer22.setNamingPolicy(namingPolicy26);
        enhancer14.setNamingPolicy(namingPolicy26);
        java.lang.ClassLoader classLoader29 = enhancer14.getClassLoader();
        enhancer8.setClassLoader(classLoader29);
        enhancer1.setClassLoader(classLoader29);
        enhancer1.setInterceptDuringConstruction(false);
        boolean boolean34 = enhancer1.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer36 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer37 = new org.mockito.cglib.proxy.Enhancer();
        enhancer37.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer37.getNamingPolicy();
        enhancer36.setNamingPolicy(namingPolicy40);
        enhancer35.setNamingPolicy(namingPolicy40);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer35.setCallbackFilter(callbackFilter43);
        enhancer35.setUseCache(false);
        java.lang.ClassLoader classLoader47 = enhancer35.getClassLoader();
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        org.mockito.cglib.core.ClassInfo classInfo56 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass55);
        enhancer35.setSuperclass((java.lang.Class) wildcardClass55);
        java.lang.ClassLoader classLoader58 = enhancer35.getClassLoader();
        boolean boolean59 = enhancer35.getUseCache();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        propertyDescriptor63.setShortDescription("J");
        java.lang.Class<?> wildcardClass66 = propertyDescriptor63.getPropertyType();
        java.lang.Class<?> wildcardClass67 = propertyDescriptor63.getClass();
        java.lang.reflect.Method method69 = null;
        java.lang.reflect.Method method70 = null;
        java.beans.PropertyDescriptor propertyDescriptor71 = new java.beans.PropertyDescriptor("hi!", method69, method70);
        propertyDescriptor71.setShortDescription("J");
        java.lang.Class<?> wildcardClass74 = propertyDescriptor71.getPropertyType();
        java.lang.Class<?> wildcardClass75 = propertyDescriptor71.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.beans.PropertyDescriptor[] propertyDescriptorArray77 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.Class[] classArray79 = new java.lang.Class[] { wildcardClass67, wildcardClass75 };
        java.lang.String[] strArray80 = org.mockito.cglib.core.ReflectUtils.getNames(classArray79);
        enhancer35.setInterfaces(classArray79);
        enhancer1.setInterfaces(classArray79);
        java.lang.ClassLoader classLoader83 = enhancer1.getClassLoader();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method84 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; expert]", classLoader83);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(classArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertNotNull(classLoader29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(classLoader47);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(classInfo56);
        org.junit.Assert.assertNotNull(classLoader58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(propertyDescriptorArray77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(classLoader83);
    }

    @Test
    public void test06392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06392");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("()L()V;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06393");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        java.lang.ClassLoader classLoader13 = null;
        enhancer0.setClassLoader(classLoader13);
        enhancer0.setUseCache(false);
        enhancer0.setUseCache(true);
        boolean boolean19 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter20 = null;
        enhancer0.setCallbackFilter(callbackFilter20);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter25 = null;
        enhancer24.setCallbackFilter(callbackFilter25);
        java.lang.Class[] classArray27 = new java.lang.Class[] {};
        java.lang.String[] strArray28 = org.mockito.cglib.core.ReflectUtils.getNames(classArray27);
        enhancer24.setInterfaces(classArray27);
        org.mockito.cglib.proxy.Callback callback30 = null;
        enhancer24.setCallback(callback30);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        enhancer32.setStrategy(generatorStrategy35);
        boolean boolean37 = enhancer32.getUseCache();
        enhancer32.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        enhancer42.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy45 = enhancer42.getNamingPolicy();
        enhancer41.setNamingPolicy(namingPolicy45);
        enhancer40.setNamingPolicy(namingPolicy45);
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer50.getNamingPolicy();
        enhancer49.setNamingPolicy(namingPolicy53);
        enhancer48.setNamingPolicy(namingPolicy53);
        enhancer40.setNamingPolicy(namingPolicy53);
        boolean boolean58 = namingPolicy53.equals((java.lang.Object) 0.0d);
        enhancer32.setNamingPolicy(namingPolicy53);
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("float()Ljava/beans/PropertyDescriptor;", method61, method62);
        propertyDescriptor63.setConstrained(true);
        boolean boolean66 = namingPolicy53.equals((java.lang.Object) true);
        enhancer24.setNamingPolicy(namingPolicy53);
        enhancer0.setNamingPolicy(namingPolicy53);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(namingPolicy45);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06394");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        boolean boolean20 = type17.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type17, typeArray25);
        java.lang.String str28 = type17.getClassName();
        propertyDescriptor3.setValue("va.beans.PropertyDescriptor", (java.lang.Object) type17);
        propertyDescriptor3.setName("Z");
        java.lang.String str32 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setExpert(true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "J" + "'", str22, "J");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)J" + "'", str26, "(I)J");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "long" + "'", str28, "long");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06395");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean6 = propertyDescriptor3.isHidden();
        boolean boolean7 = propertyDescriptor3.isExpert();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test06396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06396");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        boolean boolean10 = enhancer5.getUseCache();
        enhancer5.setUseFactory(true);
        enhancer5.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer5.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy15);
        java.lang.ClassLoader classLoader17 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter18 = null;
        enhancer0.setCallbackFilter(callbackFilter18);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer0.getNamingPolicy();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(classLoader17);
        org.junit.Assert.assertNotNull(namingPolicy20);
    }

    @Test
    public void test06397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06397");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        java.lang.String str16 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method17 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "J" + "'", str16, "J");
        org.junit.Assert.assertNull(method17);
    }

    @Test
    public void test06398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06398");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) type1);
        java.lang.String str3 = type1.getClassName();
        java.lang.String str4 = type1.toString();
        int int6 = type1.getOpcode(10);
        java.lang.String str7 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "C" + "'", str7, "C");
    }

    @Test
    public void test06399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06399");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str1 = type0.getClassName();
        java.lang.Class<?> wildcardClass2 = type0.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray3 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo4 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        java.beans.PropertyDescriptor[] propertyDescriptorArray5 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass2);
        org.mockito.cglib.core.ClassInfo classInfo6 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = org.mockito.cglib.core.ReflectUtils.newInstance((java.lang.Class) wildcardClass2);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->org.mockito.asm.Type.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "char" + "'", str1, "char");
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(propertyDescriptorArray3);
        org.junit.Assert.assertNotNull(classInfo4);
        org.junit.Assert.assertNotNull(propertyDescriptorArray5);
        org.junit.Assert.assertNotNull(classInfo6);
    }

    @Test
    public void test06400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06400");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        enhancer12.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = null;
        enhancer12.setStrategy(generatorStrategy15);
        boolean boolean17 = enhancer12.getUseCache();
        org.mockito.cglib.proxy.Callback callback18 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray19 = new org.mockito.cglib.proxy.Callback[] { callback18 };
        enhancer12.setCallbacks(callbackArray19);
        enhancer12.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer12.setCallback(callback23);
        boolean boolean25 = signature11.equals((java.lang.Object) enhancer12);
        java.lang.String str26 = signature11.getName();
        java.lang.Class<?> wildcardClass27 = signature11.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.beans.PropertyDescriptor[] propertyDescriptorArray30 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer32.setCallbackFilter(callbackFilter40);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader44 = enhancer32.getClassLoader();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        org.mockito.cglib.core.ClassInfo classInfo53 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass52);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass52);
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        java.lang.reflect.Method method66 = null;
        java.lang.reflect.Method method67 = null;
        java.beans.PropertyDescriptor propertyDescriptor68 = new java.beans.PropertyDescriptor("hi!", method66, method67);
        propertyDescriptor68.setShortDescription("J");
        java.lang.Class<?> wildcardClass71 = propertyDescriptor68.getPropertyType();
        java.lang.Class<?> wildcardClass72 = propertyDescriptor68.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.beans.PropertyDescriptor[] propertyDescriptorArray74 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.Class[] classArray76 = new java.lang.Class[] { wildcardClass64, wildcardClass72 };
        java.lang.String[] strArray77 = org.mockito.cglib.core.ReflectUtils.getNames(classArray76);
        int int78 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray76);
        java.lang.reflect.Constructor constructor79 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass52, classArray76);
        java.beans.PropertyDescriptor[] propertyDescriptorArray80 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass52);
        java.beans.PropertyDescriptor[] propertyDescriptorArray81 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass52);
        java.lang.Class[] classArray82 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method83 = org.mockito.cglib.core.ReflectUtils.findDeclaredMethod((java.lang.Class) wildcardClass27, "", classArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NoSuchMethodException; message: ");
        } catch (java.lang.NoSuchMethodException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(callbackArray19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str26, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/cglib/core/Signature;" + "'", str29, "Lorg/mockito/cglib/core/Signature;");
        org.junit.Assert.assertNotNull(propertyDescriptorArray30);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(classInfo53);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str56, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(propertyDescriptorArray74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(classArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(constructor79);
        org.junit.Assert.assertNotNull(propertyDescriptorArray80);
        org.junit.Assert.assertNotNull(propertyDescriptorArray81);
        org.junit.Assert.assertNotNull(classArray82);
    }

    @Test
    public void test06401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06401");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.reflect.Method method6 = null;
        propertyDescriptor3.setReadMethod(method6);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden]");
        propertyDescriptor3.setName("char");
        boolean boolean12 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06402");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!; shortDescription=hi!]", method1, method2);
        propertyDescriptor3.setBound(true);
    }

    @Test
    public void test06403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06403");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setBound(false);
        java.lang.String str17 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method18 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(method18);
    }

    @Test
    public void test06404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06404");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.reflect.Method method16 = null;
        java.lang.reflect.Method method17 = null;
        java.beans.PropertyDescriptor propertyDescriptor18 = new java.beans.PropertyDescriptor("hi!", method16, method17);
        java.lang.reflect.Method method19 = propertyDescriptor18.getReadMethod();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor18.getPropertyEditorClass();
        propertyDescriptor18.setHidden(false);
        boolean boolean23 = propertyDescriptor18.isHidden();
        java.lang.Class<?> wildcardClass24 = propertyDescriptor18.getPropertyEditorClass();
        propertyDescriptor18.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass27 = propertyDescriptor18.getPropertyType();
        propertyDescriptor18.setExpert(true);
        propertyDescriptor18.setExpert(true);
        boolean boolean32 = propertyDescriptor18.isExpert();
        propertyDescriptor18.setBound(true);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass43);
        java.lang.Class[] classArray47 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray46);
        propertyDescriptor18.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; expert; bound]", (java.lang.Object) classArray47);
        java.beans.PropertyEditor propertyEditor49 = propertyDescriptor3.createPropertyEditor((java.lang.Object) propertyDescriptor18);
        java.lang.Object obj51 = propertyDescriptor3.getValue("Lorg/mockito/cglib/proxy/Enhancer;");
        java.lang.reflect.Method method52 = null;
        propertyDescriptor3.setWriteMethod(method52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("()Lava.beans.PropertyDescriptor[name=hi!;");
        boolean boolean56 = propertyDescriptor3.equals((java.lang.Object) "()Lava.beans.PropertyDescriptor[name=hi!;");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(method19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertNotNull(classArray47);
        org.junit.Assert.assertNull(propertyEditor49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test06405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06405");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        boolean boolean9 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(false);
        propertyDescriptor3.setShortDescription("(I)I");
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06406");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        java.lang.String str48 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 57);
        org.mockito.cglib.core.Signature signature52 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        java.lang.String str54 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray55 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo56 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        java.lang.Class class58 = null;
        enhancer57.setSuperclass(class58);
        boolean boolean60 = enhancer57.getAttemptLoad();
        java.lang.ClassLoader classLoader61 = enhancer57.getClassLoader();
        boolean boolean62 = methodInfo56.equals((java.lang.Object) classLoader61);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str48, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(methodInfo56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(classLoader61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06407");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=(I)I; propertyEditorClass=class org.mockito.cglib.core.DefaultNamingPolicy]");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lava.beans.PropertyDescriptor[name=(I)I;" + "'", str2, "Lava.beans.PropertyDescriptor[name=(I)I;");
    }

    @Test
    public void test06408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06408");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        enhancer0.setInterceptDuringConstruction(false);
        enhancer0.setSerialVersionUID((java.lang.Long) 100L);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.asm.ClassVisitor classVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
    }

    @Test
    public void test06409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06409");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        propertyDescriptor3.setPreferred(true);
        java.lang.Object obj12 = propertyDescriptor3.getValue("<init>()V");
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        java.beans.PropertyEditor propertyEditor15 = propertyDescriptor3.createPropertyEditor((java.lang.Object) type14);
        int int17 = type14.getOpcode(106);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNull(propertyEditor15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 110 + "'", int17 == 110);
    }

    @Test
    public void test06410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06410");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.core.NamingPolicy namingPolicy6 = enhancer0.getNamingPolicy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setAttemptLoad(true);
        enhancer0.setAttemptLoad(false);
        boolean boolean13 = enhancer0.getUseCache();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Callback callback16 = null;
        enhancer0.setCallback(callback16);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test06411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06411");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method13 = propertyDescriptor3.getWriteMethod();
        boolean boolean14 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06412");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        boolean boolean5 = enhancer0.getUseCache();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        enhancer16.setNamingPolicy(namingPolicy21);
        enhancer8.setNamingPolicy(namingPolicy21);
        boolean boolean26 = namingPolicy21.equals((java.lang.Object) 0.0d);
        enhancer0.setNamingPolicy(namingPolicy21);
        enhancer0.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        enhancer30.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy33 = enhancer30.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy33);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback36 = null;
        enhancer0.setCallback(callback36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter39 = null;
        enhancer38.setCallbackFilter(callbackFilter39);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer38.getStrategy();
        enhancer38.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter45 = null;
        enhancer44.setCallbackFilter(callbackFilter45);
        boolean boolean47 = enhancer44.getAttemptLoad();
        boolean boolean48 = enhancer44.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        enhancer49.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy52 = null;
        enhancer49.setStrategy(generatorStrategy52);
        java.lang.Class[] classArray54 = new java.lang.Class[] {};
        java.lang.String[] strArray55 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray54);
        enhancer49.setInterfaces(classArray54);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer49.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy59 = enhancer49.getStrategy();
        java.lang.reflect.Method method61 = null;
        java.lang.reflect.Method method62 = null;
        java.beans.PropertyDescriptor propertyDescriptor63 = new java.beans.PropertyDescriptor("hi!", method61, method62);
        boolean boolean64 = propertyDescriptor63.isHidden();
        propertyDescriptor63.setHidden(false);
        boolean boolean67 = generatorStrategy59.equals((java.lang.Object) false);
        enhancer44.setStrategy(generatorStrategy59);
        org.mockito.cglib.core.NamingPolicy namingPolicy69 = enhancer44.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer71 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer72 = new org.mockito.cglib.proxy.Enhancer();
        enhancer72.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy75 = enhancer72.getNamingPolicy();
        enhancer71.setNamingPolicy(namingPolicy75);
        enhancer70.setNamingPolicy(namingPolicy75);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter78 = null;
        enhancer70.setCallbackFilter(callbackFilter78);
        enhancer70.setUseCache(false);
        java.lang.ClassLoader classLoader82 = enhancer70.getClassLoader();
        java.lang.reflect.Method method84 = null;
        java.lang.reflect.Method method85 = null;
        java.beans.PropertyDescriptor propertyDescriptor86 = new java.beans.PropertyDescriptor("hi!", method84, method85);
        propertyDescriptor86.setShortDescription("J");
        java.lang.Class<?> wildcardClass89 = propertyDescriptor86.getPropertyType();
        java.lang.Class<?> wildcardClass90 = propertyDescriptor86.getClass();
        org.mockito.cglib.core.ClassInfo classInfo91 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass90);
        enhancer70.setSuperclass((java.lang.Class) wildcardClass90);
        java.beans.PropertyDescriptor[] propertyDescriptorArray93 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass90);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass90);
        java.beans.PropertyDescriptor[] propertyDescriptorArray95 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass90);
        enhancer44.setSuperclass((java.lang.Class) wildcardClass90);
        enhancer38.setSuperclass((java.lang.Class) wildcardClass90);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass90);
        org.mockito.asm.Type type99 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(namingPolicy33);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(classArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(generatorStrategy59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(namingPolicy69);
        org.junit.Assert.assertNotNull(namingPolicy75);
        org.junit.Assert.assertNotNull(classLoader82);
        org.junit.Assert.assertNull(wildcardClass89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(classInfo91);
        org.junit.Assert.assertNotNull(propertyDescriptorArray93);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertNotNull(propertyDescriptorArray95);
        org.junit.Assert.assertNotNull(type99);
    }

    @Test
    public void test06413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06413");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06414");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter22 = null;
        enhancer14.setCallbackFilter(callbackFilter22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer24.setCallbackFilter(callbackFilter32);
        enhancer24.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer24.getClassLoader();
        enhancer14.setClassLoader(classLoader36);
        org.mockito.cglib.proxy.Enhancer enhancer38 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        enhancer38.setNamingPolicy(namingPolicy43);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter46 = null;
        enhancer38.setCallbackFilter(callbackFilter46);
        enhancer38.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = signature52.equals((java.lang.Object) type53);
        java.lang.Class[] classArray55 = new java.lang.Class[] {};
        java.lang.String[] strArray56 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        java.lang.String[] strArray57 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        boolean boolean58 = signature52.equals((java.lang.Object) classArray55);
        java.lang.String[] strArray59 = org.mockito.cglib.core.ReflectUtils.getNames(classArray55);
        enhancer38.setInterfaces(classArray55);
        enhancer14.setInterfaces(classArray55);
        enhancer0.setInterfaces(classArray55);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy63 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer64 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer64.setCallbackFilter(callbackFilter65);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy67 = enhancer64.getStrategy();
        enhancer64.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback70 = null;
        enhancer64.setCallback(callback70);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray72 = generatorStrategy63.generate((org.mockito.cglib.core.ClassGenerator) enhancer64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(classArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(generatorStrategy63);
        org.junit.Assert.assertNotNull(generatorStrategy67);
    }

    @Test
    public void test06415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06415");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("()J");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06416");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) (short) 100);
        org.mockito.cglib.core.ClassInfo classInfo51 = methodInfo50.getClassInfo();
        org.mockito.cglib.core.Signature signature52 = methodInfo50.getSignature();
        org.mockito.cglib.core.Signature signature53 = methodInfo50.getSignature();
        org.mockito.asm.Type type54 = signature53.getReturnType();
        java.lang.String str55 = type54.getDescriptor();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("hi!", method57, method58);
        propertyDescriptor59.setShortDescription("J");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor59.getPropertyType();
        java.lang.Class<?> wildcardClass63 = propertyDescriptor59.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass63);
        boolean boolean67 = type54.equals((java.lang.Object) propertyDescriptorArray66);
        java.lang.reflect.Method[] methodArray70 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray66, false, false);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertNotNull(signature53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java/beans/PropertyDescriptor" + "'", str65, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(methodArray70);
    }

    @Test
    public void test06417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06417");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Ljava/beans/PropertyDescriptor;");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test06418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06418");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo9 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list15 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass7, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(classInfo9);
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test06419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06419");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("java.beans.PropertyDescriptor[name=float; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test06420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06420");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.Signature signature48 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo50 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray52 = methodInfo51.getExceptionTypes();
        org.mockito.cglib.core.Signature signature53 = methodInfo51.getSignature();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(signature48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo50);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(signature53);
    }

    @Test
    public void test06421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06421");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        enhancer6.setUseFactory(false);
        boolean boolean18 = enhancer6.getUseCache();
        enhancer6.setSerialVersionUID((java.lang.Long) 1L);
        enhancer6.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer23.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer23.setCallbackFilter(callbackFilter31);
        enhancer23.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature37 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = signature37.equals((java.lang.Object) type38);
        java.lang.Class[] classArray40 = new java.lang.Class[] {};
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        java.lang.String[] strArray42 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        boolean boolean43 = signature37.equals((java.lang.Object) classArray40);
        java.lang.String[] strArray44 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        enhancer23.setInterfaces(classArray40);
        java.lang.Class[] classArray46 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray40);
        int int47 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray46);
        // The following exception was thrown during execution in test generation
        try {
            enhancer6.setCallbackTypes(classArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test06422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06422");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V", method1, method2);
        java.lang.String str4 = propertyDescriptor3.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.beans.PropertyDescriptor[name=(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V]" + "'", str4, "java.beans.PropertyDescriptor[name=(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V]");
    }

    @Test
    public void test06423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06423");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.String str12 = propertyDescriptor3.getName();
        java.lang.String str13 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("ava.beans.PropertyDescriptor[name=hi!");
        propertyDescriptor3.setDisplayName("F");
        java.lang.String str18 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("byte");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test06424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06424");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer10.setUseFactory(false);
        enhancer10.setInterceptDuringConstruction(true);
        propertyDescriptor3.setValue("(FIDCCJ)I", (java.lang.Object) enhancer10);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter19 = null;
        enhancer10.setCallbackFilter(callbackFilter19);
        enhancer10.setAttemptLoad(false);
        enhancer10.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer27 = new org.mockito.cglib.proxy.Enhancer();
        enhancer27.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy30 = enhancer27.getNamingPolicy();
        enhancer26.setNamingPolicy(namingPolicy30);
        enhancer25.setNamingPolicy(namingPolicy30);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter33 = null;
        enhancer25.setCallbackFilter(callbackFilter33);
        enhancer25.setUseCache(false);
        java.lang.ClassLoader classLoader37 = enhancer25.getClassLoader();
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        propertyDescriptor41.setShortDescription("J");
        java.lang.Class<?> wildcardClass44 = propertyDescriptor41.getPropertyType();
        java.lang.Class<?> wildcardClass45 = propertyDescriptor41.getClass();
        org.mockito.cglib.core.ClassInfo classInfo46 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass45);
        enhancer25.setSuperclass((java.lang.Class) wildcardClass45);
        java.beans.PropertyDescriptor[] propertyDescriptorArray48 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass45);
        java.lang.String str49 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        propertyDescriptor53.setShortDescription("J");
        java.lang.Class<?> wildcardClass56 = propertyDescriptor53.getPropertyType();
        java.lang.Class<?> wildcardClass57 = propertyDescriptor53.getClass();
        java.lang.reflect.Method method59 = null;
        java.lang.reflect.Method method60 = null;
        java.beans.PropertyDescriptor propertyDescriptor61 = new java.beans.PropertyDescriptor("hi!", method59, method60);
        propertyDescriptor61.setShortDescription("J");
        java.lang.Class<?> wildcardClass64 = propertyDescriptor61.getPropertyType();
        java.lang.Class<?> wildcardClass65 = propertyDescriptor61.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.beans.PropertyDescriptor[] propertyDescriptorArray67 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.Class[] classArray69 = new java.lang.Class[] { wildcardClass57, wildcardClass65 };
        java.lang.String[] strArray70 = org.mockito.cglib.core.ReflectUtils.getNames(classArray69);
        int int71 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray69);
        java.lang.reflect.Constructor constructor72 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass45, classArray69);
        org.mockito.cglib.core.MethodInfo methodInfo73 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor72);
        org.mockito.cglib.core.MethodInfo methodInfo74 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor72);
        org.mockito.cglib.core.MethodInfo methodInfo76 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor72, (-1));
        org.mockito.cglib.core.MethodInfo methodInfo77 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor72);
        org.mockito.asm.Type[] typeArray78 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor72);
        java.lang.Class[] classArray79 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray78);
        java.lang.String[] strArray80 = org.mockito.cglib.core.ReflectUtils.getNames(classArray79);
        int int81 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray79);
        int int82 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray79);
        // The following exception was thrown during execution in test generation
        try {
            enhancer10.setCallbackTypes(classArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy30);
        org.junit.Assert.assertNotNull(classLoader37);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(classInfo46);
        org.junit.Assert.assertNotNull(propertyDescriptorArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str49, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(propertyDescriptorArray67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(constructor72);
        org.junit.Assert.assertNotNull(methodInfo73);
        org.junit.Assert.assertNotNull(methodInfo74);
        org.junit.Assert.assertNotNull(methodInfo76);
        org.junit.Assert.assertNotNull(methodInfo77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test06425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06425");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method1 = org.mockito.cglib.core.ReflectUtils.findMethod("java.beans.PropertyDescriptor[name=hi!]Ljava/beans/PropertyDescriptor;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06426");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        java.lang.ClassLoader classLoader16 = enhancer0.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.Class[] classArray18 = null;
        enhancer0.setInterfaces(classArray18);
        java.lang.ClassLoader classLoader20 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer0.getStrategy();
        enhancer0.setUseFactory(true);
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer0.setCallbackFilter(callbackFilter26);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType("java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.toString();
        int int36 = type34.getSize();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str39 = type38.toString();
        int int40 = type38.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str44 = type43.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type37, type38, type41, type42, type43, type45 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.toString();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.toString();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type34, type48, type49, type51 };
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("char", type33, typeArray53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("I");
        org.mockito.asm.Type[] typeArray58 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray58);
        org.mockito.cglib.core.Signature signature60 = new org.mockito.cglib.core.Signature("hi!", type33, typeArray58);
        java.lang.Class[] classArray61 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) typeArray58);
        java.lang.Class[] classArray62 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray61);
        int int63 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray62);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.lang.Class");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertNotNull(classLoader16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(classLoader20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "I" + "'", str35, "I");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "I" + "'", str39, "I");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(FIDCCJ)I" + "'", str47, "(FIDCCJ)I");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "I" + "'", str50, "I");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "I" + "'", str52, "I");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(I)LI;" + "'", str59, "(I)LI;");
        org.junit.Assert.assertNotNull(classArray61);
        org.junit.Assert.assertNotNull(classArray62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test06427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06427");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        boolean boolean6 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setBound(true);
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.lang.String str10 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method11 = null;
        propertyDescriptor3.setWriteMethod(method11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "J" + "'", str10, "J");
    }

    @Test
    public void test06428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06428");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        java.lang.String str10 = classInfo8.toString();
        org.mockito.asm.Type[] typeArray11 = classInfo8.getInterfaces();
        int int12 = classInfo8.getModifiers();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        propertyDescriptor16.setShortDescription("va.beans.PropertyDescriptor");
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        enhancer23.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter31 = null;
        enhancer23.setCallbackFilter(callbackFilter31);
        enhancer23.setUseCache(false);
        java.lang.ClassLoader classLoader35 = enhancer23.getClassLoader();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        java.lang.Class<?> wildcardClass43 = propertyDescriptor39.getClass();
        org.mockito.cglib.core.ClassInfo classInfo44 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass43);
        enhancer23.setSuperclass((java.lang.Class) wildcardClass43);
        java.beans.PropertyDescriptor[] propertyDescriptorArray46 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass43);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        java.lang.reflect.Method method49 = null;
        java.lang.reflect.Method method50 = null;
        java.beans.PropertyDescriptor propertyDescriptor51 = new java.beans.PropertyDescriptor("hi!", method49, method50);
        propertyDescriptor51.setShortDescription("J");
        java.lang.Class<?> wildcardClass54 = propertyDescriptor51.getPropertyType();
        java.lang.Class<?> wildcardClass55 = propertyDescriptor51.getClass();
        java.lang.reflect.Method method57 = null;
        java.lang.reflect.Method method58 = null;
        java.beans.PropertyDescriptor propertyDescriptor59 = new java.beans.PropertyDescriptor("hi!", method57, method58);
        propertyDescriptor59.setShortDescription("J");
        java.lang.Class<?> wildcardClass62 = propertyDescriptor59.getPropertyType();
        java.lang.Class<?> wildcardClass63 = propertyDescriptor59.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.beans.PropertyDescriptor[] propertyDescriptorArray65 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.Class[] classArray67 = new java.lang.Class[] { wildcardClass55, wildcardClass63 };
        java.lang.String[] strArray68 = org.mockito.cglib.core.ReflectUtils.getNames(classArray67);
        int int69 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray67);
        java.lang.reflect.Constructor constructor70 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass43, classArray67);
        org.mockito.cglib.core.MethodInfo methodInfo71 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor70);
        org.mockito.cglib.core.Signature signature72 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor70);
        propertyDescriptor16.setValue("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; preferred]", (java.lang.Object) constructor70);
        boolean boolean74 = classInfo8.equals((java.lang.Object) propertyDescriptor16);
        java.lang.Class<?> wildcardClass75 = propertyDescriptor16.getPropertyEditorClass();
        java.util.Enumeration<java.lang.String> strEnumeration76 = propertyDescriptor16.attributeNames();
        java.lang.reflect.Method method77 = propertyDescriptor16.getWriteMethod();
        propertyDescriptor16.setShortDescription("java.beans.PropertyDescriptor[name=hi!; shortDescription=float]");
        boolean boolean80 = propertyDescriptor16.isConstrained();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.beans.PropertyDescriptor" + "'", str10, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(classInfo44);
        org.junit.Assert.assertNotNull(propertyDescriptorArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str47, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(propertyDescriptorArray65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(classArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(constructor70);
        org.junit.Assert.assertNotNull(methodInfo71);
        org.junit.Assert.assertNotNull(signature72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNotNull(strEnumeration76);
        org.junit.Assert.assertNull(method77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test06429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06429");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        boolean boolean4 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        java.lang.String str6 = propertyDescriptor3.getDisplayName();
        boolean boolean7 = propertyDescriptor3.isHidden();
        boolean boolean8 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method9);
    }

    @Test
    public void test06430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06430");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        enhancer7.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy10 = enhancer7.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        enhancer0.setCallbacks(callbackArray13);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method18 = null;
        java.lang.reflect.Method method19 = null;
        java.beans.PropertyDescriptor propertyDescriptor20 = new java.beans.PropertyDescriptor("(I)I", method18, method19);
        boolean boolean21 = namingPolicy16.equals((java.lang.Object) propertyDescriptor20);
        propertyDescriptor20.setConstrained(false);
        java.lang.Class<?> wildcardClass24 = propertyDescriptor20.getPropertyEditorClass();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor20.getPropertyEditorClass();
        propertyDescriptor20.setName("(FIDCCJ)Lva/beans/FeatureDescriptor;");
        java.lang.reflect.Method method28 = propertyDescriptor20.getReadMethod();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor20.getPropertyEditorClass();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(namingPolicy10);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test06431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06431");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        enhancer0.setUseCache(true);
        org.mockito.cglib.proxy.Callback callback11 = null;
        enhancer0.setCallback(callback11);
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        propertyDescriptor29.setShortDescription("J");
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyType();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor29.getClass();
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        enhancer13.setSuperclass((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        java.lang.reflect.Method method39 = null;
        java.lang.reflect.Method method40 = null;
        java.beans.PropertyDescriptor propertyDescriptor41 = new java.beans.PropertyDescriptor("hi!", method39, method40);
        propertyDescriptor41.setShortDescription("J");
        java.lang.Class<?> wildcardClass44 = propertyDescriptor41.getPropertyType();
        java.lang.Class<?> wildcardClass45 = propertyDescriptor41.getClass();
        java.lang.reflect.Method method47 = null;
        java.lang.reflect.Method method48 = null;
        java.beans.PropertyDescriptor propertyDescriptor49 = new java.beans.PropertyDescriptor("hi!", method47, method48);
        propertyDescriptor49.setShortDescription("J");
        java.lang.Class<?> wildcardClass52 = propertyDescriptor49.getPropertyType();
        java.lang.Class<?> wildcardClass53 = propertyDescriptor49.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.beans.PropertyDescriptor[] propertyDescriptorArray55 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        java.lang.Class[] classArray57 = new java.lang.Class[] { wildcardClass45, wildcardClass53 };
        java.lang.String[] strArray58 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        int int59 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray57);
        java.lang.reflect.Constructor constructor60 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass33, classArray57);
        java.lang.String[] strArray61 = org.mockito.cglib.core.ReflectUtils.getNames(classArray57);
        enhancer0.setInterfaces(classArray57);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        enhancer0.setInterceptDuringConstruction(false);
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str37, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(propertyDescriptorArray55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(constructor60);
        org.junit.Assert.assertNotNull(strArray61);
    }

    @Test
    public void test06432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06432");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        java.lang.reflect.Method method9 = propertyDescriptor8.getReadMethod();
        propertyDescriptor8.setExpert(false);
        java.util.Enumeration<java.lang.String> strEnumeration12 = propertyDescriptor8.attributeNames();
        java.lang.reflect.Method method13 = propertyDescriptor8.getWriteMethod();
        java.beans.PropertyEditor propertyEditor14 = propertyDescriptor3.createPropertyEditor((java.lang.Object) method13);
        propertyDescriptor3.setName("C");
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden; propertyEditorClass=class java.beans.PropertyDescriptor]");
        propertyDescriptor3.setExpert(false);
        java.lang.Class<?> wildcardClass23 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str24 = propertyDescriptor3.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(strEnumeration12);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(propertyEditor14);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.beans.PropertyDescriptor[name=C; displayName=java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden; propertyEditorClass=class java.beans.PropertyDescriptor]]" + "'", str24, "java.beans.PropertyDescriptor[name=C; displayName=java.beans.PropertyDescriptor[name=hi!; shortDescription=J; hidden; propertyEditorClass=class java.beans.PropertyDescriptor]]");
    }

    @Test
    public void test06433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06433");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        enhancer0.setAttemptLoad(true);
        boolean boolean17 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06434");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=hi!; displayName=D]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06435");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = signature2.equals((java.lang.Object) type3);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        propertyDescriptor8.setShortDescription("J");
        java.lang.Class<?> wildcardClass11 = propertyDescriptor8.getPropertyType();
        boolean boolean12 = type3.equals((java.lang.Object) wildcardClass11);
        int int13 = type3.getSize();
        boolean boolean15 = type3.equals((java.lang.Object) "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.mockito.asm.Type[] typeArray16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06436");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.proxy.Callback callback12 = null;
        enhancer0.setCallback(callback12);
        boolean boolean14 = enhancer0.getAttemptLoad();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        enhancer0.setSerialVersionUID((java.lang.Long) 10L);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer19.setNamingPolicy(namingPolicy24);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer19.setCallbackFilter(callbackFilter27);
        enhancer19.setUseCache(false);
        java.lang.ClassLoader classLoader31 = enhancer19.getClassLoader();
        java.lang.reflect.Method method33 = null;
        java.lang.reflect.Method method34 = null;
        java.beans.PropertyDescriptor propertyDescriptor35 = new java.beans.PropertyDescriptor("hi!", method33, method34);
        propertyDescriptor35.setShortDescription("J");
        java.lang.Class<?> wildcardClass38 = propertyDescriptor35.getPropertyType();
        java.lang.Class<?> wildcardClass39 = propertyDescriptor35.getClass();
        org.mockito.cglib.core.ClassInfo classInfo40 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass39);
        enhancer19.setSuperclass((java.lang.Class) wildcardClass39);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass39);
        java.lang.Class[] classArray43 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray42);
        enhancer0.setInterfaces(classArray43);
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader31);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(classInfo40);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(classArray43);
    }

    @Test
    public void test06437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06437");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setName("I");
        java.lang.reflect.Method method10 = null;
        propertyDescriptor3.setReadMethod(method10);
        boolean boolean12 = propertyDescriptor3.isPreferred();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06438");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getDisplayName();
        java.lang.String str5 = propertyDescriptor3.getName();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer7.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter15 = null;
        enhancer7.setCallbackFilter(callbackFilter15);
        enhancer7.setUseCache(false);
        java.lang.ClassLoader classLoader19 = enhancer7.getClassLoader();
        java.lang.reflect.Method method21 = null;
        java.lang.reflect.Method method22 = null;
        java.beans.PropertyDescriptor propertyDescriptor23 = new java.beans.PropertyDescriptor("hi!", method21, method22);
        propertyDescriptor23.setShortDescription("J");
        java.lang.Class<?> wildcardClass26 = propertyDescriptor23.getPropertyType();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor23.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        enhancer7.setSuperclass((java.lang.Class) wildcardClass27);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        int int40 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray36);
        enhancer7.setInterfaces(classArray36);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        int int43 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray42);
        java.lang.Class[] classArray44 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray42);
        enhancer7.setInterfaces(classArray42);
        propertyDescriptor3.setValue("org.mockito.cglib.core.DefaultNamingPolicy", (java.lang.Object) classArray42);
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.String[] strArray48 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.Class<?> wildcardClass49 = classArray42.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass49);
        java.util.List list51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list52 = org.mockito.cglib.core.ReflectUtils.addAllMethods((java.lang.Class) wildcardClass49, list51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader19);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java/beans/PropertyDescriptor" + "'", str29, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
    }

    @Test
    public void test06439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06439");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("java.beans.PropertyDescriptor[name=B; displayName=java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor]]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06440");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        java.lang.ClassLoader classLoader15 = enhancer0.getClassLoader();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        enhancer0.setAttemptLoad(false);
        boolean boolean20 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callbacks are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(classLoader15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test06441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06441");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer0.setCallback(callback13);
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        enhancer17.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer17.setNamingPolicy(namingPolicy29);
        java.lang.ClassLoader classLoader32 = enhancer17.getClassLoader();
        java.lang.ClassLoader classLoader33 = enhancer17.getClassLoader();
        enhancer0.setClassLoader(classLoader33);
        boolean boolean35 = enhancer0.getAttemptLoad();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class36 = enhancer0.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: createClass does not accept callbacks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader32);
        org.junit.Assert.assertNotNull(classLoader33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06442");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Ljava/lang/Object;");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06443");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setSerialVersionUID((java.lang.Long) (-1L));
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy24 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter26 = null;
        enhancer25.setCallbackFilter(callbackFilter26);
        java.lang.Class[] classArray28 = new java.lang.Class[] {};
        java.lang.String[] strArray29 = org.mockito.cglib.core.ReflectUtils.getNames(classArray28);
        enhancer25.setInterfaces(classArray28);
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        enhancer33.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy36 = enhancer33.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy36);
        enhancer31.setNamingPolicy(namingPolicy36);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer40 = new org.mockito.cglib.proxy.Enhancer();
        enhancer40.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy43 = enhancer40.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy43);
        enhancer31.setNamingPolicy(namingPolicy43);
        java.lang.ClassLoader classLoader46 = enhancer31.getClassLoader();
        enhancer25.setClassLoader(classLoader46);
        boolean boolean48 = enhancer25.getAttemptLoad();
        enhancer25.setSerialVersionUID((java.lang.Long) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray51 = generatorStrategy24.generate((org.mockito.cglib.core.ClassGenerator) enhancer25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(generatorStrategy24);
        org.junit.Assert.assertNotNull(classArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(namingPolicy36);
        org.junit.Assert.assertNotNull(namingPolicy43);
        org.junit.Assert.assertNotNull(classLoader46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06444");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor1 = org.mockito.cglib.core.ReflectUtils.findConstructor("Ljava.beans.PropertyDescriptor[name=hi!; hidden; values={J=I}];");
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06445");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type2 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray4);
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        enhancer6.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = null;
        enhancer6.setStrategy(generatorStrategy9);
        boolean boolean11 = enhancer6.getUseCache();
        org.mockito.cglib.proxy.Callback callback12 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray13 = new org.mockito.cglib.proxy.Callback[] { callback12 };
        enhancer6.setCallbacks(callbackArray13);
        boolean boolean15 = type0.equals((java.lang.Object) enhancer6);
        enhancer6.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy22 = enhancer19.getNamingPolicy();
        enhancer18.setNamingPolicy(namingPolicy22);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        enhancer25.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy28 = enhancer25.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy28);
        org.mockito.cglib.proxy.Callback callback30 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray31 = new org.mockito.cglib.proxy.Callback[] { callback30 };
        enhancer24.setCallbacks(callbackArray31);
        enhancer18.setCallbacks(callbackArray31);
        org.mockito.cglib.core.NamingPolicy namingPolicy34 = enhancer18.getNamingPolicy();
        enhancer6.setNamingPolicy(namingPolicy34);
        org.mockito.asm.ClassVisitor classVisitor36 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer6.generateClass(classVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(I)J" + "'", str5, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(callbackArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(namingPolicy22);
        org.junit.Assert.assertNotNull(namingPolicy28);
        org.junit.Assert.assertNotNull(callbackArray31);
        org.junit.Assert.assertNotNull(namingPolicy34);
    }

    @Test
    public void test06446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06446");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj6 = propertyDescriptor3.getValue("I");
        java.lang.reflect.Method method7 = null;
        propertyDescriptor3.setReadMethod(method7);
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test06447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06447");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        java.lang.String str8 = propertyDescriptor3.getName();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(true);
        boolean boolean12 = propertyDescriptor3.isHidden();
        java.lang.reflect.Method method13 = null;
        propertyDescriptor3.setWriteMethod(method13);
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test06448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06448");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy1 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Callback callback4 = null;
        enhancer0.setCallback(callback4);
        java.lang.reflect.Method method7 = null;
        java.lang.reflect.Method method8 = null;
        java.beans.PropertyDescriptor propertyDescriptor9 = new java.beans.PropertyDescriptor("hi!", method7, method8);
        propertyDescriptor9.setShortDescription("J");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor9.getPropertyType();
        java.lang.Class<?> wildcardClass13 = propertyDescriptor9.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo15 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray16 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass13);
        java.lang.String str17 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray18 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        java.beans.PropertyDescriptor[] propertyDescriptorArray19 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass13);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass13);
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type[] typeArray22 = classInfo21.getInterfaces();
        java.lang.String str23 = classInfo21.toString();
        org.junit.Assert.assertNotNull(generatorStrategy1);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(classInfo15);
        org.junit.Assert.assertNotNull(propertyDescriptorArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java/beans/PropertyDescriptor" + "'", str17, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray18);
        org.junit.Assert.assertNotNull(propertyDescriptorArray19);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.beans.PropertyDescriptor" + "'", str23, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test06449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06449");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("java.beans.PropertyDescriptor[name=hi!]", method1, method2);
        boolean boolean4 = propertyDescriptor3.isPreferred();
        java.lang.String str5 = propertyDescriptor3.getName();
        java.lang.reflect.Method method6 = propertyDescriptor3.getReadMethod();
        boolean boolean7 = propertyDescriptor3.isHidden();
        boolean boolean8 = propertyDescriptor3.isExpert();
        java.lang.reflect.Method method9 = propertyDescriptor3.getWriteMethod();
        java.util.Enumeration<java.lang.String> strEnumeration10 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str5, "java.beans.PropertyDescriptor[name=hi!]");
        org.junit.Assert.assertNull(method6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(method9);
        org.junit.Assert.assertNotNull(strEnumeration10);
    }

    @Test
    public void test06450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06450");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter3 = null;
        enhancer0.setCallbackFilter(callbackFilter3);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy5 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer6 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer7 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        enhancer8.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy11 = enhancer8.getNamingPolicy();
        enhancer7.setNamingPolicy(namingPolicy11);
        enhancer6.setNamingPolicy(namingPolicy11);
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer16 = new org.mockito.cglib.proxy.Enhancer();
        enhancer16.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy19 = enhancer16.getNamingPolicy();
        enhancer15.setNamingPolicy(namingPolicy19);
        enhancer14.setNamingPolicy(namingPolicy19);
        enhancer6.setNamingPolicy(namingPolicy19);
        enhancer6.setUseFactory(false);
        enhancer6.setInterceptDuringConstruction(true);
        boolean boolean27 = enhancer6.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer28.setCallbackFilter(callbackFilter29);
        boolean boolean31 = enhancer28.getAttemptLoad();
        enhancer28.setAttemptLoad(false);
        boolean boolean34 = enhancer28.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter36 = null;
        enhancer35.setCallbackFilter(callbackFilter36);
        java.lang.Class[] classArray38 = new java.lang.Class[] {};
        java.lang.String[] strArray39 = org.mockito.cglib.core.ReflectUtils.getNames(classArray38);
        enhancer35.setInterfaces(classArray38);
        org.mockito.cglib.proxy.Enhancer enhancer41 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer42 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer43 = new org.mockito.cglib.proxy.Enhancer();
        enhancer43.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy46 = enhancer43.getNamingPolicy();
        enhancer42.setNamingPolicy(namingPolicy46);
        enhancer41.setNamingPolicy(namingPolicy46);
        org.mockito.cglib.proxy.Enhancer enhancer49 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer50 = new org.mockito.cglib.proxy.Enhancer();
        enhancer50.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer50.getNamingPolicy();
        enhancer49.setNamingPolicy(namingPolicy53);
        enhancer41.setNamingPolicy(namingPolicy53);
        java.lang.ClassLoader classLoader56 = enhancer41.getClassLoader();
        enhancer35.setClassLoader(classLoader56);
        enhancer28.setClassLoader(classLoader56);
        enhancer6.setClassLoader(classLoader56);
        enhancer0.setClassLoader(classLoader56);
        enhancer0.setUseCache(false);
        org.junit.Assert.assertNotNull(generatorStrategy5);
        org.junit.Assert.assertNotNull(namingPolicy11);
        org.junit.Assert.assertNotNull(namingPolicy19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(namingPolicy46);
        org.junit.Assert.assertNotNull(namingPolicy53);
        org.junit.Assert.assertNotNull(classLoader56);
    }

    @Test
    public void test06451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06451");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 10);
        org.mockito.cglib.core.Signature signature54 = methodInfo53.getSignature();
        java.lang.String str55 = methodInfo53.toString();
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        enhancer56.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter64 = null;
        enhancer56.setCallbackFilter(callbackFilter64);
        boolean boolean66 = enhancer56.getUseCache();
        enhancer56.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter69 = null;
        enhancer56.setCallbackFilter(callbackFilter69);
        boolean boolean71 = methodInfo53.equals((java.lang.Object) enhancer56);
        java.lang.String str72 = methodInfo53.toString();
        org.mockito.cglib.core.Signature signature73 = methodInfo53.getSignature();
        org.mockito.asm.Type[] typeArray74 = methodInfo53.getExceptionTypes();
        java.lang.String str75 = methodInfo53.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertNotNull(signature54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str72, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str75, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test06452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06452");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        boolean boolean12 = enhancer0.getAttemptLoad();
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        enhancer14.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        enhancer19.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy22 = null;
        enhancer19.setStrategy(generatorStrategy22);
        boolean boolean24 = enhancer19.getUseCache();
        enhancer19.setUseFactory(true);
        enhancer19.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer19.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy29);
        enhancer14.setUseFactory(true);
        enhancer14.setUseCache(true);
        java.lang.ClassLoader classLoader35 = enhancer14.getClassLoader();
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        java.lang.String str40 = propertyDescriptor39.getName();
        java.lang.reflect.Method method42 = null;
        java.lang.reflect.Method method43 = null;
        java.beans.PropertyDescriptor propertyDescriptor44 = new java.beans.PropertyDescriptor("hi!", method42, method43);
        propertyDescriptor44.setShortDescription("J");
        java.lang.Class<?> wildcardClass47 = propertyDescriptor44.getPropertyType();
        java.lang.Class<?> wildcardClass48 = propertyDescriptor44.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray50 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass48);
        java.beans.PropertyDescriptor[] propertyDescriptorArray51 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass48);
        java.lang.reflect.Method[] methodArray54 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray51, true, true);
        java.beans.PropertyEditor propertyEditor55 = propertyDescriptor39.createPropertyEditor((java.lang.Object) methodArray54);
        java.lang.Class[] classArray56 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray54);
        enhancer14.setInterfaces(classArray56);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.lang.reflect.Method");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader35);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(propertyDescriptorArray50);
        org.junit.Assert.assertNotNull(propertyDescriptorArray51);
        org.junit.Assert.assertNotNull(methodArray54);
        org.junit.Assert.assertNull(propertyEditor55);
        org.junit.Assert.assertNotNull(classArray56);
    }

    @Test
    public void test06453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06453");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        int int11 = classInfo10.getModifiers();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(type12);
    }

    @Test
    public void test06454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06454");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        java.lang.reflect.Method method23 = null;
        java.lang.reflect.Method method24 = null;
        java.beans.PropertyDescriptor propertyDescriptor25 = new java.beans.PropertyDescriptor("hi!", method23, method24);
        java.lang.reflect.Method method26 = propertyDescriptor25.getReadMethod();
        java.lang.Class<?> wildcardClass27 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setHidden(false);
        boolean boolean30 = propertyDescriptor25.isHidden();
        java.lang.Class<?> wildcardClass31 = propertyDescriptor25.getPropertyEditorClass();
        propertyDescriptor25.setName("java/beans/PropertyDescriptor");
        propertyDescriptor25.setName("(I)LI;");
        propertyDescriptor25.setShortDescription("(I)LI;");
        java.lang.reflect.Method method38 = propertyDescriptor25.getReadMethod();
        boolean boolean39 = classInfo8.equals((java.lang.Object) propertyDescriptor25);
        java.lang.reflect.Method method40 = propertyDescriptor25.getWriteMethod();
        java.lang.String str41 = propertyDescriptor25.toString();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(method26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(method38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(method40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]" + "'", str41, "java.beans.PropertyDescriptor[name=(I)LI;; shortDescription=(I)LI;]");
    }

    @Test
    public void test06455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06455");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        boolean boolean12 = enhancer0.getAttemptLoad();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer19 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        enhancer20.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer20.getNamingPolicy();
        enhancer19.setNamingPolicy(namingPolicy23);
        org.mockito.cglib.proxy.Callback callback25 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray26 = new org.mockito.cglib.proxy.Callback[] { callback25 };
        enhancer19.setCallbacks(callbackArray26);
        boolean boolean28 = namingPolicy18.equals((java.lang.Object) callbackArray26);
        enhancer0.setCallbacks(callbackArray26);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer32.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy35);
        enhancer30.setNamingPolicy(namingPolicy35);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter38 = null;
        enhancer30.setCallbackFilter(callbackFilter38);
        enhancer30.setUseCache(false);
        java.lang.ClassLoader classLoader42 = enhancer30.getClassLoader();
        java.lang.reflect.Method method44 = null;
        java.lang.reflect.Method method45 = null;
        java.beans.PropertyDescriptor propertyDescriptor46 = new java.beans.PropertyDescriptor("hi!", method44, method45);
        propertyDescriptor46.setShortDescription("J");
        java.lang.Class<?> wildcardClass49 = propertyDescriptor46.getPropertyType();
        java.lang.Class<?> wildcardClass50 = propertyDescriptor46.getClass();
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass50);
        enhancer30.setSuperclass((java.lang.Class) wildcardClass50);
        java.beans.PropertyDescriptor[] propertyDescriptorArray53 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass50);
        java.lang.String str54 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        java.lang.reflect.Method method56 = null;
        java.lang.reflect.Method method57 = null;
        java.beans.PropertyDescriptor propertyDescriptor58 = new java.beans.PropertyDescriptor("hi!", method56, method57);
        propertyDescriptor58.setShortDescription("J");
        java.lang.Class<?> wildcardClass61 = propertyDescriptor58.getPropertyType();
        java.lang.Class<?> wildcardClass62 = propertyDescriptor58.getClass();
        java.lang.reflect.Method method64 = null;
        java.lang.reflect.Method method65 = null;
        java.beans.PropertyDescriptor propertyDescriptor66 = new java.beans.PropertyDescriptor("hi!", method64, method65);
        propertyDescriptor66.setShortDescription("J");
        java.lang.Class<?> wildcardClass69 = propertyDescriptor66.getPropertyType();
        java.lang.Class<?> wildcardClass70 = propertyDescriptor66.getClass();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        java.beans.PropertyDescriptor[] propertyDescriptorArray72 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        java.lang.Class[] classArray74 = new java.lang.Class[] { wildcardClass62, wildcardClass70 };
        java.lang.String[] strArray75 = org.mockito.cglib.core.ReflectUtils.getNames(classArray74);
        int int76 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray74);
        java.lang.reflect.Constructor constructor77 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass50, classArray74);
        org.mockito.cglib.core.MethodInfo methodInfo78 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor77);
        org.mockito.cglib.core.Signature signature79 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor77);
        org.mockito.cglib.core.MethodInfo methodInfo81 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor77, 0);
        java.lang.reflect.Method method83 = null;
        java.lang.reflect.Method method84 = null;
        java.beans.PropertyDescriptor propertyDescriptor85 = new java.beans.PropertyDescriptor("hi!", method83, method84);
        java.lang.reflect.Method method86 = propertyDescriptor85.getReadMethod();
        java.lang.Object obj88 = propertyDescriptor85.getValue("I");
        propertyDescriptor85.setHidden(true);
        java.lang.reflect.Method method91 = null;
        propertyDescriptor85.setWriteMethod(method91);
        propertyDescriptor85.setBound(false);
        boolean boolean95 = methodInfo81.equals((java.lang.Object) false);
        java.lang.Class<?> wildcardClass96 = methodInfo81.getClass();
        enhancer0.setSuperclass((java.lang.Class) wildcardClass96);
        org.mockito.cglib.proxy.Callback callback98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass96, callback98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(callbackArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertNotNull(classLoader42);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertNotNull(propertyDescriptorArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str54, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(propertyDescriptorArray72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(classArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(constructor77);
        org.junit.Assert.assertNotNull(methodInfo78);
        org.junit.Assert.assertNotNull(signature79);
        org.junit.Assert.assertNotNull(methodInfo81);
        org.junit.Assert.assertNull(method86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test06456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06456");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!]", "java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0}]");
        java.lang.String str3 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.beans.PropertyDescriptor[name=hi!]" + "'", str3, "java.beans.PropertyDescriptor[name=hi!]");
    }

    @Test
    public void test06457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06457");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setShortDescription("(I)Lava.beans.PropertyDescriptor[name=hi!;");
        propertyDescriptor3.setName("()J");
        boolean boolean11 = propertyDescriptor3.isPreferred();
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(method12);
    }

    @Test
    public void test06458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06458");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        propertyDescriptor3.setExpert(false);
        propertyDescriptor3.setPreferred(true);
        boolean boolean9 = propertyDescriptor3.isPreferred();
        boolean boolean10 = propertyDescriptor3.isHidden();
        java.lang.String str11 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setDisplayName("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; displayName=java/beans/PropertyDescriptor; values={float(I)J=1}; constrained]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06459");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org/mockito/asm/Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06460");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray10 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.cglib.core.ClassInfo classInfo12 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.cglib.proxy.Callback callback13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass7, callback13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java/beans/PropertyDescriptor" + "'", str9, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(classInfo12);
    }

    @Test
    public void test06461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06461");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.Class<?> wildcardClass4 = propertyDescriptor3.getPropertyType();
        boolean boolean5 = propertyDescriptor3.isExpert();
        java.lang.Object obj7 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=(FIDCCJ)I; preferred]");
        java.util.Enumeration<java.lang.String> strEnumeration8 = propertyDescriptor3.attributeNames();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setShortDescription("Lorg/mockito/cglib/proxy/Enhancer;");
        java.lang.reflect.Method method13 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyEditorClass();
        boolean boolean15 = propertyDescriptor3.isExpert();
        propertyDescriptor3.setDisplayName("Z");
        propertyDescriptor3.setPreferred(true);
        propertyDescriptor3.setBound(true);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(strEnumeration8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test06462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06462");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Callback callback25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = org.mockito.cglib.proxy.Enhancer.create((java.lang.Class) wildcardClass20, callback25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
    }

    @Test
    public void test06463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06463");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy3 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer4 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy8 = enhancer5.getNamingPolicy();
        enhancer4.setNamingPolicy(namingPolicy8);
        org.mockito.cglib.proxy.Callback callback10 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray11 = new org.mockito.cglib.proxy.Callback[] { callback10 };
        enhancer4.setCallbacks(callbackArray11);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer4.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter14 = null;
        enhancer4.setCallbackFilter(callbackFilter14);
        org.mockito.cglib.core.Signature signature18 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = signature18.equals((java.lang.Object) type19);
        java.lang.Class[] classArray21 = new java.lang.Class[] {};
        java.lang.String[] strArray22 = org.mockito.cglib.core.ReflectUtils.getNames(classArray21);
        java.lang.String[] strArray23 = org.mockito.cglib.core.ReflectUtils.getNames(classArray21);
        boolean boolean24 = signature18.equals((java.lang.Object) classArray21);
        java.lang.Class[] classArray25 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray21);
        enhancer4.setInterfaces(classArray25);
        enhancer0.setInterfaces(classArray25);
        boolean boolean28 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer0.setCallbackFilter(callbackFilter29);
        enhancer0.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str34 = type33.toString();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str36 = type35.toString();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type35 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray37);
        org.mockito.cglib.proxy.Enhancer enhancer39 = new org.mockito.cglib.proxy.Enhancer();
        enhancer39.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy42 = null;
        enhancer39.setStrategy(generatorStrategy42);
        boolean boolean44 = enhancer39.getUseCache();
        org.mockito.cglib.proxy.Callback callback45 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray46 = new org.mockito.cglib.proxy.Callback[] { callback45 };
        enhancer39.setCallbacks(callbackArray46);
        boolean boolean48 = type33.equals((java.lang.Object) enhancer39);
        enhancer39.setUseFactory(false);
        org.mockito.cglib.proxy.Enhancer enhancer51 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer52 = new org.mockito.cglib.proxy.Enhancer();
        enhancer52.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy55 = enhancer52.getNamingPolicy();
        enhancer51.setNamingPolicy(namingPolicy55);
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        enhancer58.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer58.getNamingPolicy();
        enhancer57.setNamingPolicy(namingPolicy61);
        org.mockito.cglib.proxy.Callback callback63 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray64 = new org.mockito.cglib.proxy.Callback[] { callback63 };
        enhancer57.setCallbacks(callbackArray64);
        enhancer51.setCallbacks(callbackArray64);
        org.mockito.cglib.core.NamingPolicy namingPolicy67 = enhancer51.getNamingPolicy();
        enhancer39.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer70 = new org.mockito.cglib.proxy.Enhancer();
        enhancer70.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy73 = enhancer70.getNamingPolicy();
        enhancer69.setNamingPolicy(namingPolicy73);
        org.mockito.cglib.proxy.Callback callback75 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray76 = new org.mockito.cglib.proxy.Callback[] { callback75 };
        enhancer69.setCallbacks(callbackArray76);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy78 = enhancer69.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter79 = null;
        enhancer69.setCallbackFilter(callbackFilter79);
        java.lang.ClassLoader classLoader81 = enhancer69.getClassLoader();
        enhancer69.setInterceptDuringConstruction(false);
        boolean boolean84 = namingPolicy67.equals((java.lang.Object) false);
        enhancer0.setNamingPolicy(namingPolicy67);
        org.mockito.cglib.proxy.Enhancer enhancer86 = new org.mockito.cglib.proxy.Enhancer();
        enhancer86.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy89 = null;
        enhancer86.setStrategy(generatorStrategy89);
        java.lang.Class[] classArray91 = new java.lang.Class[] {};
        java.lang.String[] strArray92 = org.mockito.cglib.core.ReflectUtils.getNames(classArray91);
        java.lang.String[] strArray93 = org.mockito.cglib.core.ReflectUtils.getNames(classArray91);
        enhancer86.setInterfaces(classArray91);
        java.lang.Class[] classArray95 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray91);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy3);
        org.junit.Assert.assertNotNull(namingPolicy8);
        org.junit.Assert.assertNotNull(callbackArray11);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "J" + "'", str34, "J");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "I" + "'", str36, "I");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(I)J" + "'", str38, "(I)J");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(callbackArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(namingPolicy55);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertNotNull(callbackArray64);
        org.junit.Assert.assertNotNull(namingPolicy67);
        org.junit.Assert.assertNotNull(namingPolicy73);
        org.junit.Assert.assertNotNull(callbackArray76);
        org.junit.Assert.assertNotNull(generatorStrategy78);
        org.junit.Assert.assertNotNull(classLoader81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(classArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(classArray95);
    }

    @Test
    public void test06464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06464");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getName();
        boolean boolean5 = propertyDescriptor3.isHidden();
        java.lang.String str6 = propertyDescriptor3.getName();
        propertyDescriptor3.setConstrained(true);
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer10.setUseFactory(false);
        enhancer10.setInterceptDuringConstruction(true);
        propertyDescriptor3.setValue("(FIDCCJ)I", (java.lang.Object) enhancer10);
        java.lang.Object obj20 = propertyDescriptor3.getValue("(I)I");
        java.lang.reflect.Method method21 = null;
        propertyDescriptor3.setReadMethod(method21);
        boolean boolean23 = propertyDescriptor3.isConstrained();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test06465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06465");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.toString();
        boolean boolean4 = type1.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str6 = type5.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str8 = type7.toString();
        org.mockito.asm.Type[] typeArray9 = new org.mockito.asm.Type[] { type7 };
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        org.mockito.cglib.core.Signature signature11 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type1, typeArray9);
        java.lang.String str12 = signature11.getName();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer15 = new org.mockito.cglib.proxy.Enhancer();
        enhancer15.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy18 = enhancer15.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy18);
        enhancer13.setNamingPolicy(namingPolicy18);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter21 = null;
        enhancer13.setCallbackFilter(callbackFilter21);
        enhancer13.setUseCache(false);
        java.lang.ClassLoader classLoader25 = enhancer13.getClassLoader();
        java.lang.reflect.Method method27 = null;
        java.lang.reflect.Method method28 = null;
        java.beans.PropertyDescriptor propertyDescriptor29 = new java.beans.PropertyDescriptor("hi!", method27, method28);
        propertyDescriptor29.setShortDescription("J");
        java.lang.Class<?> wildcardClass32 = propertyDescriptor29.getPropertyType();
        java.lang.Class<?> wildcardClass33 = propertyDescriptor29.getClass();
        org.mockito.cglib.core.ClassInfo classInfo34 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        enhancer13.setSuperclass((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray36 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass33);
        org.mockito.cglib.core.ClassInfo classInfo37 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass33);
        java.beans.PropertyDescriptor[] propertyDescriptorArray38 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass33);
        boolean boolean39 = signature11.equals((java.lang.Object) propertyDescriptorArray38);
        java.lang.Class[] classArray40 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) propertyDescriptorArray38);
        java.lang.String[] strArray41 = org.mockito.cglib.core.ReflectUtils.getNames(classArray40);
        java.lang.Class[] classArray42 = new java.lang.Class[] {};
        java.lang.String[] strArray43 = org.mockito.cglib.core.ReflectUtils.getNames(classArray42);
        java.lang.reflect.Method[] methodArray44 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray45 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray44);
        java.lang.Class[] classArray46 = new java.lang.Class[] {};
        java.lang.String[] strArray47 = org.mockito.cglib.core.ReflectUtils.getNames(classArray46);
        java.lang.reflect.Method[] methodArray48 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray49 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray47, methodArray48);
        java.lang.reflect.Method[] methodArray50 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray49);
        java.lang.reflect.Method method52 = null;
        java.lang.reflect.Method method53 = null;
        java.beans.PropertyDescriptor propertyDescriptor54 = new java.beans.PropertyDescriptor("hi!", method52, method53);
        propertyDescriptor54.setShortDescription("J");
        java.lang.Class<?> wildcardClass57 = propertyDescriptor54.getPropertyType();
        java.lang.Class<?> wildcardClass58 = propertyDescriptor54.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        org.mockito.cglib.core.ClassInfo classInfo60 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass58);
        java.beans.PropertyDescriptor[] propertyDescriptorArray61 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass58);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray61, false, true);
        java.lang.reflect.Method[] methodArray65 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray64);
        java.lang.Class[] classArray66 = new java.lang.Class[] {};
        java.lang.String[] strArray67 = org.mockito.cglib.core.ReflectUtils.getNames(classArray66);
        java.lang.reflect.Method[] methodArray68 = new java.lang.reflect.Method[] {};
        java.lang.reflect.Method[] methodArray69 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray67, methodArray68);
        java.lang.reflect.Method method71 = null;
        java.lang.reflect.Method method72 = null;
        java.beans.PropertyDescriptor propertyDescriptor73 = new java.beans.PropertyDescriptor("hi!", method71, method72);
        java.lang.String str74 = propertyDescriptor73.getName();
        java.lang.reflect.Method method76 = null;
        java.lang.reflect.Method method77 = null;
        java.beans.PropertyDescriptor propertyDescriptor78 = new java.beans.PropertyDescriptor("hi!", method76, method77);
        propertyDescriptor78.setShortDescription("J");
        java.lang.Class<?> wildcardClass81 = propertyDescriptor78.getPropertyType();
        java.lang.Class<?> wildcardClass82 = propertyDescriptor78.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass82);
        java.beans.PropertyDescriptor[] propertyDescriptorArray85 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass82);
        java.lang.reflect.Method[] methodArray88 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray85, true, true);
        java.beans.PropertyEditor propertyEditor89 = propertyDescriptor73.createPropertyEditor((java.lang.Object) methodArray88);
        java.lang.Class[] classArray90 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray88);
        java.lang.reflect.Method[] methodArray91 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray67, methodArray88);
        java.lang.reflect.Method[] methodArray92 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray43, methodArray91);
        java.lang.reflect.Method[] methodArray93 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray41, methodArray91);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "J" + "'", str2, "J");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "J" + "'", str6, "J");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "I" + "'", str8, "I");
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(I)J" + "'", str10, "(I)J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.beans.PropertyDescriptor[name=hi!; values={J=I}]" + "'", str12, "java.beans.PropertyDescriptor[name=hi!; values={J=I}]");
        org.junit.Assert.assertNotNull(namingPolicy18);
        org.junit.Assert.assertNotNull(classLoader25);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(classInfo34);
        org.junit.Assert.assertNotNull(propertyDescriptorArray36);
        org.junit.Assert.assertNotNull(classInfo37);
        org.junit.Assert.assertNotNull(propertyDescriptorArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(classArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(methodArray44);
        org.junit.Assert.assertNotNull(methodArray45);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(methodArray48);
        org.junit.Assert.assertNotNull(methodArray49);
        org.junit.Assert.assertNotNull(methodArray50);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(classInfo60);
        org.junit.Assert.assertNotNull(propertyDescriptorArray61);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(methodArray65);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodArray68);
        org.junit.Assert.assertNotNull(methodArray69);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNull(wildcardClass81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(propertyDescriptorArray85);
        org.junit.Assert.assertNotNull(methodArray88);
        org.junit.Assert.assertNull(propertyEditor89);
        org.junit.Assert.assertNotNull(classArray90);
        org.junit.Assert.assertNotNull(methodArray91);
        org.junit.Assert.assertNotNull(methodArray92);
        org.junit.Assert.assertNotNull(methodArray93);
    }

    @Test
    public void test06466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06466");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        java.lang.reflect.Method method5 = null;
        java.lang.reflect.Method method6 = null;
        java.beans.PropertyDescriptor propertyDescriptor7 = new java.beans.PropertyDescriptor("hi!", method5, method6);
        propertyDescriptor7.setShortDescription("J");
        java.lang.Class<?> wildcardClass10 = propertyDescriptor7.getPropertyType();
        java.lang.Class<?> wildcardClass11 = propertyDescriptor7.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.ClassInfo classInfo13 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass11);
        java.beans.PropertyDescriptor[] propertyDescriptorArray14 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass11);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass11);
        org.mockito.cglib.core.NamingPolicy namingPolicy16 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer0.getNamingPolicy();
        java.lang.reflect.Method method19 = null;
        java.lang.reflect.Method method20 = null;
        java.beans.PropertyDescriptor propertyDescriptor21 = new java.beans.PropertyDescriptor("hi!", method19, method20);
        propertyDescriptor21.setShortDescription("J");
        java.lang.Class<?> wildcardClass24 = propertyDescriptor21.getPropertyType();
        java.lang.Class<?> wildcardClass25 = propertyDescriptor21.getClass();
        org.mockito.cglib.core.ClassInfo classInfo26 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type[] typeArray27 = classInfo26.getInterfaces();
        org.mockito.asm.Type type28 = classInfo26.getType();
        java.lang.String str29 = type28.getInternalName();
        boolean boolean30 = namingPolicy17.equals((java.lang.Object) type28);
        org.mockito.asm.Type type31 = type28.getElementType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(classInfo13);
        org.junit.Assert.assertNotNull(propertyDescriptorArray14);
        org.junit.Assert.assertNotNull(namingPolicy16);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(classInfo26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java/beans/PropertyDescriptor" + "'", str29, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
    }

    @Test
    public void test06467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06467");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setHidden(false);
        java.lang.reflect.Method method12 = propertyDescriptor3.getReadMethod();
        java.lang.String str13 = propertyDescriptor3.getDisplayName();
        java.lang.reflect.Method method14 = propertyDescriptor3.getWriteMethod();
        java.lang.Object obj16 = propertyDescriptor3.getValue("(I)LI;");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(method12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(method14);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test06468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06468");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        int int13 = type11.getOpcode(15);
        java.lang.reflect.Method method15 = null;
        java.lang.reflect.Method method16 = null;
        java.beans.PropertyDescriptor propertyDescriptor17 = new java.beans.PropertyDescriptor("hi!", method15, method16);
        propertyDescriptor17.setShortDescription("J");
        java.lang.Class<?> wildcardClass20 = propertyDescriptor17.getPropertyType();
        java.lang.Class<?> wildcardClass21 = propertyDescriptor17.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        boolean boolean23 = type11.equals((java.lang.Object) wildcardClass21);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter32 = null;
        enhancer24.setCallbackFilter(callbackFilter32);
        enhancer24.setUseCache(false);
        java.lang.ClassLoader classLoader36 = enhancer24.getClassLoader();
        java.lang.reflect.Method method38 = null;
        java.lang.reflect.Method method39 = null;
        java.beans.PropertyDescriptor propertyDescriptor40 = new java.beans.PropertyDescriptor("hi!", method38, method39);
        propertyDescriptor40.setShortDescription("J");
        java.lang.Class<?> wildcardClass43 = propertyDescriptor40.getPropertyType();
        java.lang.Class<?> wildcardClass44 = propertyDescriptor40.getClass();
        org.mockito.cglib.core.ClassInfo classInfo45 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass44);
        enhancer24.setSuperclass((java.lang.Class) wildcardClass44);
        java.beans.PropertyDescriptor[] propertyDescriptorArray47 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass44);
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass44);
        java.lang.reflect.Method method50 = null;
        java.lang.reflect.Method method51 = null;
        java.beans.PropertyDescriptor propertyDescriptor52 = new java.beans.PropertyDescriptor("hi!", method50, method51);
        propertyDescriptor52.setShortDescription("J");
        java.lang.Class<?> wildcardClass55 = propertyDescriptor52.getPropertyType();
        java.lang.Class<?> wildcardClass56 = propertyDescriptor52.getClass();
        java.lang.reflect.Method method58 = null;
        java.lang.reflect.Method method59 = null;
        java.beans.PropertyDescriptor propertyDescriptor60 = new java.beans.PropertyDescriptor("hi!", method58, method59);
        propertyDescriptor60.setShortDescription("J");
        java.lang.Class<?> wildcardClass63 = propertyDescriptor60.getPropertyType();
        java.lang.Class<?> wildcardClass64 = propertyDescriptor60.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.beans.PropertyDescriptor[] propertyDescriptorArray66 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.Class[] classArray68 = new java.lang.Class[] { wildcardClass56, wildcardClass64 };
        java.lang.String[] strArray69 = org.mockito.cglib.core.ReflectUtils.getNames(classArray68);
        int int70 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        java.lang.reflect.Constructor constructor71 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass44, classArray68);
        java.lang.String[] strArray72 = org.mockito.cglib.core.ReflectUtils.getNames(classArray68);
        int int73 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray68);
        java.lang.reflect.Constructor constructor74 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray68);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        java.lang.Class[] classArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Constructor constructor78 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass21, classArray77);
            org.junit.Assert.fail("Expected exception of type org.mockito.cglib.core.CodeGenerationException; message: java.lang.NoSuchMethodException-->java.beans.PropertyDescriptor.<init>()");
        } catch (org.mockito.cglib.core.CodeGenerationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(classLoader36);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(classInfo45);
        org.junit.Assert.assertNotNull(propertyDescriptorArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str48, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(propertyDescriptorArray66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(classArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(constructor71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(constructor74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
    }

    @Test
    public void test06469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06469");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo49 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = methodInfo49.toString();
        int int51 = methodInfo49.getModifiers();
        org.mockito.cglib.core.Signature signature52 = methodInfo49.getSignature();
        java.lang.String str53 = methodInfo49.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(methodInfo49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(signature52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str53, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test06470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06470");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        propertyDescriptor3.setName("(I)LI;");
        java.util.Enumeration<java.lang.String> strEnumeration14 = propertyDescriptor3.attributeNames();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strEnumeration14);
    }

    @Test
    public void test06471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06471");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("()C", "()F");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Name '()C' is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06472");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        boolean boolean4 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer5 = new org.mockito.cglib.proxy.Enhancer();
        enhancer5.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy8 = null;
        enhancer5.setStrategy(generatorStrategy8);
        java.lang.Class[] classArray10 = new java.lang.Class[] {};
        java.lang.String[] strArray11 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        java.lang.String[] strArray12 = org.mockito.cglib.core.ReflectUtils.getNames(classArray10);
        enhancer5.setInterfaces(classArray10);
        org.mockito.cglib.core.NamingPolicy namingPolicy14 = enhancer5.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy15 = enhancer5.getStrategy();
        java.lang.reflect.Method method17 = null;
        java.lang.reflect.Method method18 = null;
        java.beans.PropertyDescriptor propertyDescriptor19 = new java.beans.PropertyDescriptor("hi!", method17, method18);
        boolean boolean20 = propertyDescriptor19.isHidden();
        propertyDescriptor19.setHidden(false);
        boolean boolean23 = generatorStrategy15.equals((java.lang.Object) false);
        enhancer0.setStrategy(generatorStrategy15);
        org.mockito.cglib.core.NamingPolicy namingPolicy25 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter27 = null;
        enhancer26.setCallbackFilter(callbackFilter27);
        boolean boolean29 = enhancer26.getAttemptLoad();
        boolean boolean30 = enhancer26.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        enhancer31.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy34 = null;
        enhancer31.setStrategy(generatorStrategy34);
        java.lang.Class[] classArray36 = new java.lang.Class[] {};
        java.lang.String[] strArray37 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        java.lang.String[] strArray38 = org.mockito.cglib.core.ReflectUtils.getNames(classArray36);
        enhancer31.setInterfaces(classArray36);
        org.mockito.cglib.core.NamingPolicy namingPolicy40 = enhancer31.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy41 = enhancer31.getStrategy();
        java.lang.reflect.Method method43 = null;
        java.lang.reflect.Method method44 = null;
        java.beans.PropertyDescriptor propertyDescriptor45 = new java.beans.PropertyDescriptor("hi!", method43, method44);
        boolean boolean46 = propertyDescriptor45.isHidden();
        propertyDescriptor45.setHidden(false);
        boolean boolean49 = generatorStrategy41.equals((java.lang.Object) false);
        enhancer26.setStrategy(generatorStrategy41);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer26.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.core.NamingPolicy namingPolicy53 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Callback callback54 = null;
        enhancer0.setCallback(callback54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = enhancer0.create();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback is null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(namingPolicy14);
        org.junit.Assert.assertNotNull(generatorStrategy15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(namingPolicy25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(classArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(namingPolicy40);
        org.junit.Assert.assertNotNull(generatorStrategy41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy53);
    }

    @Test
    public void test06473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06473");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray8 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass7);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray12 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass7);
        java.beans.PropertyDescriptor[] propertyDescriptorArray13 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass7);
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List list15 = org.mockito.cglib.core.ReflectUtils.addAllInterfaces((java.lang.Class) wildcardClass7, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(propertyDescriptorArray8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str10, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java/beans/PropertyDescriptor" + "'", str11, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(propertyDescriptorArray12);
        org.junit.Assert.assertNotNull(propertyDescriptorArray13);
    }

    @Test
    public void test06474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06474");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy3 = null;
        enhancer0.setStrategy(generatorStrategy3);
        java.lang.Class[] classArray5 = new java.lang.Class[] {};
        java.lang.String[] strArray6 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        java.lang.String[] strArray7 = org.mockito.cglib.core.ReflectUtils.getNames(classArray5);
        enhancer0.setInterfaces(classArray5);
        org.mockito.cglib.core.NamingPolicy namingPolicy9 = enhancer0.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy10 = enhancer0.getStrategy();
        enhancer0.setSerialVersionUID((java.lang.Long) 0L);
        org.mockito.cglib.proxy.Callback callback13 = null;
        enhancer0.setCallback(callback13);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.proxy.Enhancer enhancer17 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer18 = new org.mockito.cglib.proxy.Enhancer();
        enhancer18.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy21 = enhancer18.getNamingPolicy();
        enhancer17.setNamingPolicy(namingPolicy21);
        org.mockito.cglib.proxy.Callback callback23 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray24 = new org.mockito.cglib.proxy.Callback[] { callback23 };
        enhancer17.setCallbacks(callbackArray24);
        enhancer17.setSerialVersionUID((java.lang.Long) 1L);
        org.mockito.cglib.proxy.Enhancer enhancer28 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter29 = null;
        enhancer28.setCallbackFilter(callbackFilter29);
        java.lang.Class[] classArray31 = new java.lang.Class[] {};
        java.lang.String[] strArray32 = org.mockito.cglib.core.ReflectUtils.getNames(classArray31);
        enhancer28.setInterfaces(classArray31);
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer35 = new org.mockito.cglib.proxy.Enhancer();
        enhancer35.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy38 = enhancer35.getNamingPolicy();
        enhancer34.setNamingPolicy(namingPolicy38);
        java.lang.ClassLoader classLoader40 = enhancer34.getClassLoader();
        enhancer28.setClassLoader(classLoader40);
        enhancer17.setClassLoader(classLoader40);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy43 = enhancer17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy44 = enhancer17.getStrategy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy45 = enhancer17.getStrategy();
        org.mockito.cglib.proxy.Enhancer enhancer46 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer47 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer48 = new org.mockito.cglib.proxy.Enhancer();
        enhancer48.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy51 = enhancer48.getNamingPolicy();
        enhancer47.setNamingPolicy(namingPolicy51);
        enhancer46.setNamingPolicy(namingPolicy51);
        org.mockito.cglib.proxy.Enhancer enhancer54 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer55 = new org.mockito.cglib.proxy.Enhancer();
        enhancer55.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy58 = enhancer55.getNamingPolicy();
        enhancer54.setNamingPolicy(namingPolicy58);
        enhancer46.setNamingPolicy(namingPolicy58);
        org.mockito.cglib.core.NamingPolicy namingPolicy61 = enhancer46.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer62 = new org.mockito.cglib.proxy.Enhancer();
        enhancer62.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy65 = null;
        enhancer62.setStrategy(generatorStrategy65);
        boolean boolean67 = enhancer62.getUseCache();
        org.mockito.cglib.proxy.Callback callback68 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray69 = new org.mockito.cglib.proxy.Callback[] { callback68 };
        enhancer62.setCallbacks(callbackArray69);
        enhancer46.setCallbacks(callbackArray69);
        enhancer17.setCallbacks(callbackArray69);
        enhancer0.setCallbacks(callbackArray69);
        java.lang.reflect.Method method75 = null;
        java.lang.reflect.Method method76 = null;
        java.beans.PropertyDescriptor propertyDescriptor77 = new java.beans.PropertyDescriptor("hi!", method75, method76);
        propertyDescriptor77.setShortDescription("J");
        java.lang.Class<?> wildcardClass80 = propertyDescriptor77.getPropertyType();
        java.lang.Class<?> wildcardClass81 = propertyDescriptor77.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray83 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass81);
        java.beans.PropertyDescriptor[] propertyDescriptorArray84 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass81);
        org.mockito.cglib.core.ClassInfo classInfo85 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass81);
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackType((java.lang.Class) wildcardClass81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Unknown callback type class java.beans.PropertyDescriptor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(namingPolicy9);
        org.junit.Assert.assertNotNull(generatorStrategy10);
        org.junit.Assert.assertNotNull(namingPolicy21);
        org.junit.Assert.assertNotNull(callbackArray24);
        org.junit.Assert.assertNotNull(classArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(namingPolicy38);
        org.junit.Assert.assertNotNull(classLoader40);
        org.junit.Assert.assertNotNull(generatorStrategy43);
        org.junit.Assert.assertNotNull(generatorStrategy44);
        org.junit.Assert.assertNotNull(generatorStrategy45);
        org.junit.Assert.assertNotNull(namingPolicy51);
        org.junit.Assert.assertNotNull(namingPolicy58);
        org.junit.Assert.assertNotNull(namingPolicy61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(callbackArray69);
        org.junit.Assert.assertNull(wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(propertyDescriptorArray83);
        org.junit.Assert.assertNotNull(propertyDescriptorArray84);
        org.junit.Assert.assertNotNull(classInfo85);
    }

    @Test
    public void test06475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06475");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setHidden(false);
        propertyDescriptor3.setDisplayName("");
        propertyDescriptor3.setBound(true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str18 = type17.toString();
        boolean boolean20 = type17.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str22 = type21.toString();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type23 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray25);
        org.mockito.cglib.core.Signature signature27 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type17, typeArray25);
        java.lang.String str28 = type17.getClassName();
        propertyDescriptor3.setValue("va.beans.PropertyDescriptor", (java.lang.Object) type17);
        propertyDescriptor3.setHidden(false);
        java.lang.Object obj33 = propertyDescriptor3.getValue("java.beans.PropertyDescriptor[name=hi!; preferred; values={J=0.0; java/beans/FeatureDescriptor(I)I=Lva/beans/PropertyDescriptor;}; propertyEditorClass=class java.beans.PropertyDescriptor]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "J" + "'", str22, "J");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(I)J" + "'", str26, "(I)J");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "long" + "'", str28, "long");
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test06476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06476");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        enhancer0.setUseCache(false);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.asm.ClassVisitor classVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertNotNull(namingPolicy23);
    }

    @Test
    public void test06477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06477");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.core.NamingPolicy namingPolicy23 = enhancer0.getNamingPolicy();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer25 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer26 = new org.mockito.cglib.proxy.Enhancer();
        enhancer26.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer26.getNamingPolicy();
        enhancer25.setNamingPolicy(namingPolicy29);
        enhancer24.setNamingPolicy(namingPolicy29);
        java.lang.Class<?> wildcardClass32 = namingPolicy29.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray33 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass32);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass32);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy35 = null;
        enhancer0.setStrategy(generatorStrategy35);
        boolean boolean37 = enhancer0.getUseCache();
        java.lang.Class[] classArray38 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.setCallbackTypes(classArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(namingPolicy23);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(propertyDescriptorArray33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06478");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy27 = null;
        enhancer24.setStrategy(generatorStrategy27);
        java.lang.Class[] classArray29 = new java.lang.Class[] {};
        java.lang.String[] strArray30 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.String[] strArray31 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        enhancer24.setInterfaces(classArray29);
        int int33 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray29);
        enhancer0.setInterfaces(classArray29);
        java.lang.String[] strArray35 = org.mockito.cglib.core.ReflectUtils.getNames(classArray29);
        java.lang.reflect.Method method37 = null;
        java.lang.reflect.Method method38 = null;
        java.beans.PropertyDescriptor propertyDescriptor39 = new java.beans.PropertyDescriptor("hi!", method37, method38);
        propertyDescriptor39.setShortDescription("J");
        java.lang.Class<?> wildcardClass42 = propertyDescriptor39.getPropertyType();
        boolean boolean43 = propertyDescriptor39.isPreferred();
        propertyDescriptor39.setHidden(true);
        propertyDescriptor39.setHidden(false);
        java.lang.reflect.Method method48 = null;
        propertyDescriptor39.setReadMethod(method48);
        java.lang.reflect.Method method51 = null;
        java.lang.reflect.Method method52 = null;
        java.beans.PropertyDescriptor propertyDescriptor53 = new java.beans.PropertyDescriptor("hi!", method51, method52);
        java.lang.reflect.Method method54 = propertyDescriptor53.getReadMethod();
        propertyDescriptor53.setExpert(true);
        propertyDescriptor53.setExpert(true);
        java.lang.String str59 = propertyDescriptor53.getDisplayName();
        java.beans.PropertyDescriptor[] propertyDescriptorArray60 = new java.beans.PropertyDescriptor[] { propertyDescriptor39, propertyDescriptor53 };
        java.lang.reflect.Method[] methodArray63 = org.mockito.cglib.core.ReflectUtils.getPropertyMethods(propertyDescriptorArray60, false, true);
        java.lang.reflect.Method[] methodArray64 = org.mockito.cglib.core.ReflectUtils.findMethods(strArray35, methodArray63);
        java.lang.Class[] classArray65 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) methodArray64);
        java.lang.Class<?> wildcardClass66 = classArray65.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Method method67 = org.mockito.cglib.core.ReflectUtils.findNewInstance((java.lang.Class) wildcardClass66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: class [Ljava.lang.Class; is not an interface");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java/beans/PropertyDescriptor" + "'", str22, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(method54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(propertyDescriptorArray60);
        org.junit.Assert.assertNotNull(methodArray63);
        org.junit.Assert.assertNotNull(methodArray64);
        org.junit.Assert.assertNotNull(classArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test06479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06479");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        enhancer9.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy12 = enhancer9.getNamingPolicy();
        enhancer8.setNamingPolicy(namingPolicy12);
        enhancer0.setNamingPolicy(namingPolicy12);
        org.mockito.cglib.core.NamingPolicy namingPolicy15 = enhancer0.getNamingPolicy();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.cglib.core.Signature signature21 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = signature21.equals((java.lang.Object) type22);
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        propertyDescriptor27.setShortDescription("J");
        java.lang.Class<?> wildcardClass30 = propertyDescriptor27.getPropertyType();
        boolean boolean31 = type22.equals((java.lang.Object) wildcardClass30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str35 = type34.toString();
        boolean boolean37 = type34.equals((java.lang.Object) 100.0f);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str39 = type38.toString();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.toString();
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type40 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray42);
        org.mockito.cglib.core.Signature signature44 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; values={J=I}]", type34, typeArray42);
        org.mockito.asm.Type type45 = signature44.getReturnType();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str47 = type46.toString();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.toString();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type48 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray50);
        org.mockito.cglib.core.Signature signature52 = new org.mockito.cglib.core.Signature("float", type45, typeArray50);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray50);
        org.mockito.cglib.core.Signature signature54 = new org.mockito.cglib.core.Signature("java.beans.PropertyDescriptor[name=hi!; shortDescription=J]", type18, typeArray50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.toString();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("I");
        org.mockito.asm.Type[] typeArray60 = org.mockito.asm.Type.getArgumentTypes("(I)J");
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray60);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray60);
        org.mockito.cglib.core.Signature signature63 = new org.mockito.cglib.core.Signature("I", type18, typeArray60);
        boolean boolean64 = namingPolicy15.equals((java.lang.Object) signature63);
        java.lang.String str65 = signature63.getDescriptor();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy12);
        org.junit.Assert.assertNotNull(namingPolicy15);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "J" + "'", str35, "J");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "J" + "'", str39, "J");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "I" + "'", str41, "I");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(I)J" + "'", str43, "(I)J");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "J" + "'", str47, "J");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "I" + "'", str49, "I");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(I)J" + "'", str51, "(I)J");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(I)F" + "'", str53, "(I)F");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "I" + "'", str56, "I");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(I)LI;" + "'", str61, "(I)LI;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(I)I" + "'", str62, "(I)I");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(I)I" + "'", str65, "(I)I");
    }

    @Test
    public void test06480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06480");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("I");
        propertyDescriptor3.setValue("J", (java.lang.Object) "I");
        propertyDescriptor3.setHidden(true);
        propertyDescriptor3.setBound(true);
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass14 = propertyDescriptor3.getPropertyType();
        java.lang.String str15 = propertyDescriptor3.getDisplayName();
        propertyDescriptor3.setExpert(false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test06481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06481");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(FIDCCJ)I", method1, method2);
        java.lang.String str4 = propertyDescriptor3.getShortDescription();
        java.lang.reflect.Method method5 = propertyDescriptor3.getWriteMethod();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(FIDCCJ)I" + "'", str4, "(FIDCCJ)I");
        org.junit.Assert.assertNull(method5);
    }

    @Test
    public void test06482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06482");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray52 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.asm.Type[] typeArray53 = org.mockito.cglib.core.ReflectUtils.getExceptionTypes((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo55 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, (int) ' ');
        int int56 = methodInfo55.getModifiers();
        int int57 = methodInfo55.getModifiers();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(methodInfo55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 32 + "'", int56 == 32);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 32 + "'", int57 == 32);
    }

    @Test
    public void test06483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06483");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        propertyDescriptor3.setExpert(false);
        java.lang.Object obj8 = propertyDescriptor3.getValue("");
        propertyDescriptor3.setExpert(false);
        java.lang.reflect.Method method11 = propertyDescriptor3.getReadMethod();
        java.lang.Object obj13 = propertyDescriptor3.getValue("Ljava/beans/PropertyDescriptor;(I)J");
        propertyDescriptor3.setExpert(true);
        boolean boolean16 = propertyDescriptor3.isBound();
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(method11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06484");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        enhancer1.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy4 = enhancer1.getNamingPolicy();
        enhancer0.setNamingPolicy(namingPolicy4);
        org.mockito.cglib.proxy.Callback callback6 = null;
        org.mockito.cglib.proxy.Callback[] callbackArray7 = new org.mockito.cglib.proxy.Callback[] { callback6 };
        enhancer0.setCallbacks(callbackArray7);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy9 = enhancer0.getStrategy();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter10 = null;
        enhancer0.setCallbackFilter(callbackFilter10);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.Class[] classArray21 = org.mockito.cglib.core.ReflectUtils.getClasses((java.lang.Object[]) classArray17);
        enhancer0.setInterfaces(classArray21);
        java.lang.Class class23 = null;
        enhancer0.setSuperclass(class23);
        boolean boolean25 = enhancer0.getAttemptLoad();
        org.junit.Assert.assertNotNull(namingPolicy4);
        org.junit.Assert.assertNotNull(callbackArray7);
        org.junit.Assert.assertNotNull(generatorStrategy9);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(classArray21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06485");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        java.lang.Class<?> wildcardClass8 = propertyDescriptor3.getClass();
        java.beans.PropertyDescriptor[] propertyDescriptorArray9 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass8);
        org.mockito.cglib.core.ClassInfo classInfo10 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass8);
        java.lang.String str11 = classInfo10.toString();
        org.mockito.asm.Type type12 = classInfo10.getSuperType();
        int int13 = classInfo10.getModifiers();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(propertyDescriptorArray9);
        org.junit.Assert.assertNotNull(classInfo10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.beans.PropertyDescriptor" + "'", str11, "java.beans.PropertyDescriptor");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test06486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06486");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.lang.String str12 = propertyDescriptor3.getName();
        propertyDescriptor3.setShortDescription("");
        propertyDescriptor3.setPreferred(true);
        java.lang.reflect.Method method17 = null;
        propertyDescriptor3.setWriteMethod(method17);
        propertyDescriptor3.setConstrained(false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06487");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.CallbackFilter callbackFilter1 = null;
        enhancer0.setCallbackFilter(callbackFilter1);
        boolean boolean3 = enhancer0.getAttemptLoad();
        enhancer0.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter6 = null;
        enhancer0.setCallbackFilter(callbackFilter6);
        boolean boolean8 = enhancer0.getAttemptLoad();
        java.lang.ClassLoader classLoader9 = enhancer0.getClassLoader();
        enhancer0.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer12 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer13 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy17 = enhancer14.getNamingPolicy();
        enhancer13.setNamingPolicy(namingPolicy17);
        enhancer12.setNamingPolicy(namingPolicy17);
        org.mockito.cglib.proxy.Enhancer enhancer20 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer21 = new org.mockito.cglib.proxy.Enhancer();
        enhancer21.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer21.getNamingPolicy();
        enhancer20.setNamingPolicy(namingPolicy24);
        enhancer12.setNamingPolicy(namingPolicy24);
        java.lang.ClassLoader classLoader27 = enhancer12.getClassLoader();
        java.lang.ClassLoader classLoader28 = enhancer12.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy29 = enhancer12.getNamingPolicy();
        enhancer12.setInterceptDuringConstruction(false);
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer33 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer34 = new org.mockito.cglib.proxy.Enhancer();
        enhancer34.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy37 = enhancer34.getNamingPolicy();
        enhancer33.setNamingPolicy(namingPolicy37);
        enhancer32.setNamingPolicy(namingPolicy37);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter40 = null;
        enhancer32.setCallbackFilter(callbackFilter40);
        enhancer32.setUseCache(false);
        java.lang.ClassLoader classLoader44 = enhancer32.getClassLoader();
        java.lang.reflect.Method method46 = null;
        java.lang.reflect.Method method47 = null;
        java.beans.PropertyDescriptor propertyDescriptor48 = new java.beans.PropertyDescriptor("hi!", method46, method47);
        propertyDescriptor48.setShortDescription("J");
        java.lang.Class<?> wildcardClass51 = propertyDescriptor48.getPropertyType();
        java.lang.Class<?> wildcardClass52 = propertyDescriptor48.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str54 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        enhancer32.setSuperclass((java.lang.Class) wildcardClass52);
        org.mockito.cglib.proxy.Enhancer enhancer56 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        enhancer57.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy60 = enhancer57.getNamingPolicy();
        enhancer56.setNamingPolicy(namingPolicy60);
        java.lang.ClassLoader classLoader62 = enhancer56.getClassLoader();
        org.mockito.cglib.core.NamingPolicy namingPolicy63 = enhancer56.getNamingPolicy();
        enhancer32.setNamingPolicy(namingPolicy63);
        enhancer12.setNamingPolicy(namingPolicy63);
        enhancer0.setNamingPolicy(namingPolicy63);
        java.lang.ClassLoader classLoader67 = enhancer0.getClassLoader();
        enhancer0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader70 = enhancer0.getClassLoader();
        org.mockito.cglib.proxy.Callback[] callbackArray71 = null;
        enhancer0.setCallbacks(callbackArray71);
        org.mockito.asm.ClassVisitor classVisitor73 = null;
        // The following exception was thrown during execution in test generation
        try {
            enhancer0.generateClass(classVisitor73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(classLoader9);
        org.junit.Assert.assertNotNull(namingPolicy17);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertNotNull(classLoader27);
        org.junit.Assert.assertNotNull(classLoader28);
        org.junit.Assert.assertNotNull(namingPolicy29);
        org.junit.Assert.assertNotNull(namingPolicy37);
        org.junit.Assert.assertNotNull(classLoader44);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java/beans/PropertyDescriptor" + "'", str54, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertNotNull(namingPolicy60);
        org.junit.Assert.assertNotNull(classLoader62);
        org.junit.Assert.assertNotNull(namingPolicy63);
        org.junit.Assert.assertNotNull(classLoader67);
        org.junit.Assert.assertNotNull(classLoader70);
    }

    @Test
    public void test06488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06488");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setInterceptDuringConstruction(true);
        org.mockito.cglib.core.Signature signature14 = new org.mockito.cglib.core.Signature("", "");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = signature14.equals((java.lang.Object) type15);
        java.lang.Class[] classArray17 = new java.lang.Class[] {};
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        java.lang.String[] strArray19 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        boolean boolean20 = signature14.equals((java.lang.Object) classArray17);
        java.lang.String[] strArray21 = org.mockito.cglib.core.ReflectUtils.getNames(classArray17);
        enhancer0.setInterfaces(classArray17);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        org.mockito.cglib.core.NamingPolicy namingPolicy24 = enhancer0.getNamingPolicy();
        boolean boolean25 = enhancer0.getUseCache();
        org.mockito.cglib.core.NamingPolicy namingPolicy26 = enhancer0.getNamingPolicy();
        enhancer0.setUseFactory(false);
        boolean boolean29 = enhancer0.getUseCache();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.ClassLoader classLoader30 = enhancer0.getClassLoader();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNotNull(namingPolicy24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(namingPolicy26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06489");
        org.mockito.cglib.core.Signature signature2 = new org.mockito.cglib.core.Signature("java/beans/FeatureDescriptor", "(I)I");
        java.lang.String str3 = signature2.toString();
        java.lang.String str4 = signature2.getDescriptor();
        java.lang.String str5 = signature2.getName();
        java.lang.String str6 = signature2.getName();
        org.mockito.asm.Type[] typeArray7 = signature2.getArgumentTypes();
        java.lang.String str8 = signature2.getName();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java/beans/FeatureDescriptor(I)I" + "'", str3, "java/beans/FeatureDescriptor(I)I");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(I)I" + "'", str4, "(I)I");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java/beans/FeatureDescriptor" + "'", str5, "java/beans/FeatureDescriptor");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java/beans/FeatureDescriptor" + "'", str6, "java/beans/FeatureDescriptor");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java/beans/FeatureDescriptor" + "'", str8, "java/beans/FeatureDescriptor");
    }

    @Test
    public void test06490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06490");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("(I)LI;", method1, method2);
        java.lang.reflect.Method method6 = null;
        java.lang.reflect.Method method7 = null;
        java.beans.PropertyDescriptor propertyDescriptor8 = new java.beans.PropertyDescriptor("hi!", method6, method7);
        propertyDescriptor8.setShortDescription("J");
        java.lang.Class<?> wildcardClass11 = propertyDescriptor8.getPropertyType();
        java.lang.Class<?> wildcardClass12 = propertyDescriptor8.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.cglib.core.ClassInfo classInfo14 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass12);
        propertyDescriptor3.setValue("java.beans.PropertyDescriptor[name=java/beans/PropertyDescriptor; hidden; expert]", (java.lang.Object) wildcardClass12);
        boolean boolean16 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=hi!; values={java.beans.PropertyDescriptor[name=hi!; values={J=I}](I)J=Ljava/beans/PropertyDescriptor;}]");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(classInfo14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06491");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.Enhancer enhancer8 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer9 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer10 = new org.mockito.cglib.proxy.Enhancer();
        enhancer10.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy13 = enhancer10.getNamingPolicy();
        enhancer9.setNamingPolicy(namingPolicy13);
        enhancer8.setNamingPolicy(namingPolicy13);
        enhancer0.setNamingPolicy(namingPolicy13);
        enhancer0.setUseFactory(false);
        enhancer0.setInterceptDuringConstruction(true);
        enhancer0.setAttemptLoad(true);
        boolean boolean23 = enhancer0.getAttemptLoad();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        enhancer24.setAttemptLoad(false);
        org.mockito.cglib.proxy.Enhancer enhancer29 = new org.mockito.cglib.proxy.Enhancer();
        enhancer29.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy32 = null;
        enhancer29.setStrategy(generatorStrategy32);
        boolean boolean34 = enhancer29.getUseCache();
        enhancer29.setUseFactory(true);
        enhancer29.setAttemptLoad(false);
        org.mockito.cglib.core.NamingPolicy namingPolicy39 = enhancer29.getNamingPolicy();
        enhancer24.setNamingPolicy(namingPolicy39);
        java.lang.ClassLoader classLoader41 = enhancer24.getClassLoader();
        enhancer0.setClassLoader(classLoader41);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter43 = null;
        enhancer0.setCallbackFilter(callbackFilter43);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(namingPolicy13);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(namingPolicy39);
        org.junit.Assert.assertNotNull(classLoader41);
    }

    @Test
    public void test06492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06492");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        boolean boolean10 = enhancer0.getUseCache();
        org.mockito.cglib.proxy.Enhancer enhancer11 = new org.mockito.cglib.proxy.Enhancer();
        enhancer11.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy14 = null;
        enhancer11.setStrategy(generatorStrategy14);
        java.lang.Class[] classArray16 = new java.lang.Class[] {};
        java.lang.String[] strArray17 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        java.lang.String[] strArray18 = org.mockito.cglib.core.ReflectUtils.getNames(classArray16);
        enhancer11.setInterfaces(classArray16);
        org.mockito.cglib.core.NamingPolicy namingPolicy20 = enhancer11.getNamingPolicy();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy21 = enhancer11.getStrategy();
        enhancer0.setStrategy(generatorStrategy21);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy23 = enhancer0.getStrategy();
        java.lang.reflect.Method method25 = null;
        java.lang.reflect.Method method26 = null;
        java.beans.PropertyDescriptor propertyDescriptor27 = new java.beans.PropertyDescriptor("hi!", method25, method26);
        java.lang.reflect.Method method28 = propertyDescriptor27.getReadMethod();
        java.lang.Class<?> wildcardClass29 = propertyDescriptor27.getPropertyEditorClass();
        propertyDescriptor27.setValue("J", (java.lang.Object) 0.0d);
        boolean boolean33 = generatorStrategy23.equals((java.lang.Object) 0.0d);
        java.lang.reflect.Method method35 = null;
        java.lang.reflect.Method method36 = null;
        java.beans.PropertyDescriptor propertyDescriptor37 = new java.beans.PropertyDescriptor("hi!", method35, method36);
        propertyDescriptor37.setShortDescription("J");
        java.lang.Class<?> wildcardClass40 = propertyDescriptor37.getPropertyType();
        java.lang.Class<?> wildcardClass41 = propertyDescriptor37.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo43 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        java.beans.PropertyDescriptor[] propertyDescriptorArray44 = org.mockito.cglib.core.ReflectUtils.getBeanSetters((java.lang.Class) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass41);
        boolean boolean47 = generatorStrategy23.equals((java.lang.Object) wildcardClass41);
        boolean boolean48 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass41);
        boolean boolean49 = org.mockito.cglib.proxy.Enhancer.isEnhanced((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.cglib.core.ClassInfo classInfo51 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass41);
        java.lang.String str52 = classInfo51.toString();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(namingPolicy20);
        org.junit.Assert.assertNotNull(generatorStrategy21);
        org.junit.Assert.assertNotNull(generatorStrategy23);
        org.junit.Assert.assertNull(method28);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(classInfo43);
        org.junit.Assert.assertNotNull(propertyDescriptorArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java/beans/PropertyDescriptor" + "'", str45, "java/beans/PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str46, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(classInfo51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "java.beans.PropertyDescriptor" + "'", str52, "java.beans.PropertyDescriptor");
    }

    @Test
    public void test06493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06493");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type[] typeArray9 = classInfo8.getInterfaces();
        org.mockito.asm.Type[] typeArray10 = classInfo8.getInterfaces();
        java.lang.Object obj11 = null;
        boolean boolean12 = classInfo8.equals(obj11);
        org.mockito.asm.Type type13 = classInfo8.getType();
        org.mockito.cglib.proxy.Enhancer enhancer14 = new org.mockito.cglib.proxy.Enhancer();
        enhancer14.setAttemptLoad(true);
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy17 = null;
        enhancer14.setStrategy(generatorStrategy17);
        boolean boolean19 = enhancer14.getUseCache();
        enhancer14.setUseFactory(true);
        org.mockito.cglib.proxy.Enhancer enhancer22 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer23 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer24 = new org.mockito.cglib.proxy.Enhancer();
        enhancer24.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy27 = enhancer24.getNamingPolicy();
        enhancer23.setNamingPolicy(namingPolicy27);
        enhancer22.setNamingPolicy(namingPolicy27);
        org.mockito.cglib.proxy.Enhancer enhancer30 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer31 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer32 = new org.mockito.cglib.proxy.Enhancer();
        enhancer32.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy35 = enhancer32.getNamingPolicy();
        enhancer31.setNamingPolicy(namingPolicy35);
        enhancer30.setNamingPolicy(namingPolicy35);
        enhancer22.setNamingPolicy(namingPolicy35);
        boolean boolean40 = namingPolicy35.equals((java.lang.Object) 0.0d);
        enhancer14.setNamingPolicy(namingPolicy35);
        enhancer14.setUseCache(false);
        org.mockito.cglib.proxy.Enhancer enhancer44 = new org.mockito.cglib.proxy.Enhancer();
        enhancer44.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy47 = enhancer44.getNamingPolicy();
        enhancer14.setNamingPolicy(namingPolicy47);
        org.mockito.cglib.core.NamingPolicy namingPolicy49 = enhancer14.getNamingPolicy();
        boolean boolean50 = type13.equals((java.lang.Object) enhancer14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class class51 = enhancer14.createClass();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Callback types are required");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(namingPolicy27);
        org.junit.Assert.assertNotNull(namingPolicy35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(namingPolicy47);
        org.junit.Assert.assertNotNull(namingPolicy49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test06494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06494");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        boolean boolean7 = propertyDescriptor3.isPreferred();
        propertyDescriptor3.setHidden(true);
        java.lang.Class<?> wildcardClass10 = propertyDescriptor3.getPropertyEditorClass();
        java.lang.String str11 = propertyDescriptor3.getShortDescription();
        java.beans.PropertyEditor propertyEditor13 = propertyDescriptor3.createPropertyEditor((java.lang.Object) "(I)B");
        propertyDescriptor3.setConstrained(true);
        java.lang.String str16 = propertyDescriptor3.getDisplayName();
        java.lang.Class<?> wildcardClass17 = propertyDescriptor3.getPropertyType();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "J" + "'", str11, "J");
        org.junit.Assert.assertNull(propertyEditor13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test06495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06495");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 0);
        org.mockito.cglib.core.MethodInfo methodInfo53 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47, 1);
        java.lang.String str54 = methodInfo53.toString();
        java.lang.String str55 = methodInfo53.toString();
        org.mockito.cglib.core.Signature signature56 = methodInfo53.getSignature();
        org.mockito.cglib.proxy.Enhancer enhancer57 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer58 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer59 = new org.mockito.cglib.proxy.Enhancer();
        enhancer59.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy62 = enhancer59.getNamingPolicy();
        enhancer58.setNamingPolicy(namingPolicy62);
        enhancer57.setNamingPolicy(namingPolicy62);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter65 = null;
        enhancer57.setCallbackFilter(callbackFilter65);
        org.mockito.cglib.proxy.Enhancer enhancer67 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer68 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer69 = new org.mockito.cglib.proxy.Enhancer();
        enhancer69.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy72 = enhancer69.getNamingPolicy();
        enhancer68.setNamingPolicy(namingPolicy72);
        enhancer67.setNamingPolicy(namingPolicy72);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter75 = null;
        enhancer67.setCallbackFilter(callbackFilter75);
        enhancer67.setUseCache(false);
        java.lang.ClassLoader classLoader79 = enhancer67.getClassLoader();
        enhancer57.setClassLoader(classLoader79);
        enhancer57.setUseFactory(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy83 = enhancer57.getNamingPolicy();
        boolean boolean84 = signature56.equals((java.lang.Object) namingPolicy83);
        org.mockito.asm.Type type85 = signature56.getReturnType();
        java.lang.String str86 = signature56.getDescriptor();
        java.lang.String str87 = signature56.getName();
        java.lang.String str88 = signature56.getDescriptor();
        org.mockito.asm.Type[] typeArray89 = signature56.getArgumentTypes();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature56);
        org.junit.Assert.assertNotNull(namingPolicy62);
        org.junit.Assert.assertNotNull(namingPolicy72);
        org.junit.Assert.assertNotNull(classLoader79);
        org.junit.Assert.assertNotNull(namingPolicy83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str86, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "<init>" + "'", str87, "<init>");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str88, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(typeArray89);
    }

    @Test
    public void test06496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06496");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        propertyDescriptor3.setShortDescription("J");
        java.lang.Class<?> wildcardClass6 = propertyDescriptor3.getPropertyType();
        java.lang.Class<?> wildcardClass7 = propertyDescriptor3.getClass();
        org.mockito.cglib.core.ClassInfo classInfo8 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass7);
        java.lang.reflect.Method method10 = null;
        java.lang.reflect.Method method11 = null;
        java.beans.PropertyDescriptor propertyDescriptor12 = new java.beans.PropertyDescriptor("hi!", method10, method11);
        java.lang.reflect.Method method13 = propertyDescriptor12.getReadMethod();
        java.lang.Class<?> wildcardClass14 = propertyDescriptor12.getPropertyEditorClass();
        propertyDescriptor12.setHidden(false);
        boolean boolean17 = propertyDescriptor12.isHidden();
        java.lang.Class<?> wildcardClass18 = propertyDescriptor12.getPropertyEditorClass();
        boolean boolean19 = classInfo8.equals((java.lang.Object) propertyDescriptor12);
        int int20 = classInfo8.getModifiers();
        org.mockito.asm.Type type21 = classInfo8.getType();
        org.mockito.asm.Type type22 = type21.getElementType();
        java.lang.String str23 = type22.getClassName();
        java.lang.String str24 = type22.getClassName();
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(classInfo8);
        org.junit.Assert.assertNull(method13);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "va.beans.PropertyDescriptor" + "'", str23, "va.beans.PropertyDescriptor");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "va.beans.PropertyDescriptor" + "'", str24, "va.beans.PropertyDescriptor");
    }

    @Test
    public void test06497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06497");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        org.mockito.cglib.proxy.Callback callback23 = null;
        enhancer0.setCallback(callback23);
        enhancer0.setInterceptDuringConstruction(false);
        java.lang.Class class27 = null;
        enhancer0.setSuperclass(class27);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
    }

    @Test
    public void test06498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06498");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        java.lang.reflect.Method method14 = null;
        java.lang.reflect.Method method15 = null;
        java.beans.PropertyDescriptor propertyDescriptor16 = new java.beans.PropertyDescriptor("hi!", method14, method15);
        propertyDescriptor16.setShortDescription("J");
        java.lang.Class<?> wildcardClass19 = propertyDescriptor16.getPropertyType();
        java.lang.Class<?> wildcardClass20 = propertyDescriptor16.getClass();
        org.mockito.cglib.core.ClassInfo classInfo21 = org.mockito.cglib.core.ReflectUtils.getClassInfo((java.lang.Class) wildcardClass20);
        enhancer0.setSuperclass((java.lang.Class) wildcardClass20);
        java.beans.PropertyDescriptor[] propertyDescriptorArray23 = org.mockito.cglib.core.ReflectUtils.getBeanProperties((java.lang.Class) wildcardClass20);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass20);
        java.lang.reflect.Method method26 = null;
        java.lang.reflect.Method method27 = null;
        java.beans.PropertyDescriptor propertyDescriptor28 = new java.beans.PropertyDescriptor("hi!", method26, method27);
        propertyDescriptor28.setShortDescription("J");
        java.lang.Class<?> wildcardClass31 = propertyDescriptor28.getPropertyType();
        java.lang.Class<?> wildcardClass32 = propertyDescriptor28.getClass();
        java.lang.reflect.Method method34 = null;
        java.lang.reflect.Method method35 = null;
        java.beans.PropertyDescriptor propertyDescriptor36 = new java.beans.PropertyDescriptor("hi!", method34, method35);
        propertyDescriptor36.setShortDescription("J");
        java.lang.Class<?> wildcardClass39 = propertyDescriptor36.getPropertyType();
        java.lang.Class<?> wildcardClass40 = propertyDescriptor36.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.beans.PropertyDescriptor[] propertyDescriptorArray42 = org.mockito.cglib.core.ReflectUtils.getBeanGetters((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.Class[] classArray44 = new java.lang.Class[] { wildcardClass32, wildcardClass40 };
        java.lang.String[] strArray45 = org.mockito.cglib.core.ReflectUtils.getNames(classArray44);
        int int46 = org.mockito.cglib.core.ReflectUtils.findPackageProtected(classArray44);
        java.lang.reflect.Constructor constructor47 = org.mockito.cglib.core.ReflectUtils.getConstructor((java.lang.Class) wildcardClass20, classArray44);
        org.mockito.cglib.core.MethodInfo methodInfo48 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.Signature signature49 = org.mockito.cglib.core.ReflectUtils.getSignature((java.lang.reflect.Member) constructor47);
        java.lang.String str50 = org.mockito.asm.Type.getConstructorDescriptor(constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo51 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        org.mockito.cglib.core.MethodInfo methodInfo52 = org.mockito.cglib.core.ReflectUtils.getMethodInfo((java.lang.reflect.Member) constructor47);
        int int53 = methodInfo52.getModifiers();
        java.lang.String str54 = methodInfo52.toString();
        java.lang.String str55 = methodInfo52.toString();
        org.mockito.cglib.core.Signature signature56 = methodInfo52.getSignature();
        java.lang.String str57 = signature56.getDescriptor();
        java.lang.String str58 = signature56.getDescriptor();
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(classInfo21);
        org.junit.Assert.assertNotNull(propertyDescriptorArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Ljava/beans/PropertyDescriptor;" + "'", str24, "Ljava/beans/PropertyDescriptor;");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(propertyDescriptorArray42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(constructor47);
        org.junit.Assert.assertNotNull(methodInfo48);
        org.junit.Assert.assertNotNull(signature49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str50, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(methodInfo51);
        org.junit.Assert.assertNotNull(methodInfo52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str54, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str55, "<init>(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertNotNull(signature56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str57, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V" + "'", str58, "(Ljava/beans/PropertyDescriptor;Ljava/beans/PropertyDescriptor;)V");
    }

    @Test
    public void test06499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06499");
        java.lang.reflect.Method method1 = null;
        java.lang.reflect.Method method2 = null;
        java.beans.PropertyDescriptor propertyDescriptor3 = new java.beans.PropertyDescriptor("hi!", method1, method2);
        java.lang.reflect.Method method4 = propertyDescriptor3.getReadMethod();
        java.lang.Class<?> wildcardClass5 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setHidden(false);
        boolean boolean8 = propertyDescriptor3.isHidden();
        java.lang.Class<?> wildcardClass9 = propertyDescriptor3.getPropertyEditorClass();
        propertyDescriptor3.setName("java/beans/PropertyDescriptor");
        java.lang.Class<?> wildcardClass12 = propertyDescriptor3.getPropertyType();
        propertyDescriptor3.setExpert(true);
        propertyDescriptor3.setExpert(true);
        boolean boolean17 = propertyDescriptor3.isHidden();
        propertyDescriptor3.setShortDescription("java.beans.PropertyDescriptor[name=java.beans.PropertyDescriptor]");
        org.junit.Assert.assertNull(method4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest12.test06500");
        org.mockito.cglib.proxy.Enhancer enhancer0 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer1 = new org.mockito.cglib.proxy.Enhancer();
        org.mockito.cglib.proxy.Enhancer enhancer2 = new org.mockito.cglib.proxy.Enhancer();
        enhancer2.setAttemptLoad(true);
        org.mockito.cglib.core.NamingPolicy namingPolicy5 = enhancer2.getNamingPolicy();
        enhancer1.setNamingPolicy(namingPolicy5);
        enhancer0.setNamingPolicy(namingPolicy5);
        org.mockito.cglib.proxy.CallbackFilter callbackFilter8 = null;
        enhancer0.setCallbackFilter(callbackFilter8);
        enhancer0.setUseCache(false);
        java.lang.ClassLoader classLoader12 = enhancer0.getClassLoader();
        org.mockito.cglib.core.GeneratorStrategy generatorStrategy13 = enhancer0.getStrategy();
        boolean boolean14 = enhancer0.getAttemptLoad();
        enhancer0.setAttemptLoad(true);
        java.lang.ClassLoader classLoader17 = enhancer0.getClassLoader();
        java.lang.Class[] classArray18 = null;
        enhancer0.setInterfaces(classArray18);
        enhancer0.setUseCache(true);
        org.junit.Assert.assertNotNull(namingPolicy5);
        org.junit.Assert.assertNotNull(classLoader12);
        org.junit.Assert.assertNotNull(generatorStrategy13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(classLoader17);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        int int5 = localDate2.getYearOfEra();
        int int6 = localDate2.getYear();
        org.joda.time.LocalDate.Property property7 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(5975);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 38269 + "'", int5 == 38269);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 38269 + "'", int6 == 38269);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DurationField durationField4 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.hourOfDay();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 10074, 1645514199442L, chronology3);
        java.lang.String str7 = chronology3.toString();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.era();
        long long10 = dateTimeField8.roundHalfCeiling((long) 26178);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[-213:00]" + "'", str7, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-9223372036087975809L) + "'", long10 == (-9223372036087975809L));
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.plusMonths(1970);
        org.joda.time.LocalDateTime.Property property20 = localDateTime4.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime4.withDayOfWeek(921);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 921 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus((org.joda.time.ReadableDuration) duration18);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration18);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks((int) (byte) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationFrom(readableInstant29);
        long long31 = duration30.getMillis();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plus((org.joda.time.ReadableDuration) duration30);
        mutableInterval23.setDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = mutableInterval23.toDuration();
        boolean boolean35 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration36 = duration34.toDuration();
        long long37 = duration36.getMillis();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfDay();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfSecond();
        org.joda.time.DateTime dateTime43 = dateTime40.withCenturyOfEra(9);
        org.joda.time.Interval interval44 = duration36.toIntervalTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime45 = interval44.getStart();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks(100);
        org.joda.time.Period period58 = new org.joda.time.Period(22, (int) (short) 10, (int) '#', (int) (short) 100, 32772, 3, 0, (int) ' ');
        org.joda.time.DateTime dateTime59 = dateTime46.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property61 = dateTime60.millisOfDay();
        org.joda.time.DateTime dateTime62 = dateTime60.withTimeAtStartOfDay();
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        int int66 = period64.getValue(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration70 = period64.toDurationTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Chronology chronology71 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime72 = dateTime59.toDateTime(chronology71);
        java.lang.String str73 = dateTime59.toString();
        boolean boolean74 = dateTime45.equals((java.lang.Object) str73);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 35L + "'", long31 == 35L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1997-07-01T19:03:00.032-213:00" + "'", str73, "1997-07-01T19:03:00.032-213:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        int int7 = dateTime6.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str11 = interval10.toString();
        boolean boolean12 = interval10.isAfterNow();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Interval interval14 = interval10.gap(readableInterval13);
        boolean boolean15 = dateTime6.equals((java.lang.Object) interval14);
        org.joda.time.DateTime.Property property16 = dateTime6.minuteOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        int int18 = localTime17.getMinuteOfHour();
        int int19 = localTime17.size();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("26181425");
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        boolean boolean24 = localTime17.equals((java.lang.Object) locale21);
        java.lang.String str25 = property16.getAsText(locale21);
        org.joda.time.DateTime dateTime26 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime27 = property16.roundHalfCeilingCopy();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str11, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "420" + "'", str25, "420");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        int int15 = period14.size();
        int int16 = period14.getMinutes();
        int[] intArray17 = period14.getValues();
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        org.joda.time.LocalTime localTime20 = localTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-1), chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period30 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        boolean boolean32 = period25.isSupported(durationFieldType31);
        org.joda.time.Period period34 = period25.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime35 = localTime8.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period37 = period25.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(chronology46);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 1, (long) ' ', periodType41, chronology46);
        int int50 = period49.getWeeks();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property52 = dateTime51.era();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.plusWeeks((int) (byte) 1);
        int int56 = property52.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isAfter((long) 10);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = dateTime67.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property70 = dateTime69.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeUtils.getZone(dateTimeZone71);
        java.lang.String str74 = dateTimeZone72.getName((long) ' ');
        org.joda.time.DateTime dateTime75 = dateTime69.toDateTime(dateTimeZone72);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.time();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime75, periodType76);
        boolean boolean78 = period49.equals((java.lang.Object) dateTime75);
        org.joda.time.Period period80 = period49.withYears(0);
        org.joda.time.Period period81 = period25.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.format.PeriodFormatter periodFormatter82 = null;
        java.lang.String str83 = period81.toString(periodFormatter82);
        int int84 = period81.size();
        int int85 = period81.getHours();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-213:00" + "'", str74, "-213:00");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "PT0S" + "'", str83, "PT0S");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 157);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeFormatter27.parseMillis("2074-04-15T14:34:48.552Z/2074-04-15T14:34:48.552Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        int int12 = dateTimeField11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime15, (int) (short) 1, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = locale23.getDisplayLanguage(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone1, locale25);
        calendar27.setFirstDayOfWeek((int) (short) -1);
        calendar27.setLenient(true);
        int int32 = calendar27.getWeekYear();
        calendar27.set(62, 5875518, 52462922);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = calendar27.getGreatestMinimum(968);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 968");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1439 + "'", int12 == 1439);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str26, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=62,MONTH=5875518,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=52462922,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=52,MILLISECOND=977,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.plusMonths(1970);
        int int20 = localDateTime19.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withWeekOfWeekyear(96);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 96 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514513015,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=53,MILLISECOND=15,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514513015L + "'", long2 == 1645514513015L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26513015" + "'", str8, "26513015");
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime4.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusYears(26151451);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        int int12 = period10.getValue(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean20 = localDateTime8.isSupported(dateTimeFieldType19);
        int int21 = instant3.get(dateTimeFieldType19);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime24.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime24.minus((long) 10);
        org.joda.time.Period period35 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Instant instant36 = instant3.plus((org.joda.time.ReadableDuration) duration23);
        long long37 = instant3.getMillis();
        org.joda.time.DateTime dateTime38 = instant3.toDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 420 + "'", int27 == 420);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(instant36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 792000000L + "'", long37 == 792000000L);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime4.getMinuteOfDay();
        int int8 = dateTime4.getYearOfCentury();
        int int9 = dateTime4.getDayOfMonth();
        org.joda.time.DateTime dateTime11 = dateTime4.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTimeField13.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (byte) 10);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period19.toDurationFrom(readableInstant20);
        long long22 = duration21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plus((org.joda.time.ReadableDuration) duration21);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime17, (int) (short) 1, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale25.getDisplayLanguage(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone3, locale27);
        int int30 = timeZone3.getRawOffset();
        timeZone3.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone3, locale33);
        java.util.Locale.Builder builder35 = builder0.setLocale(locale33);
        java.util.Locale.Builder builder36 = builder0.clearExtensions();
        java.util.Locale.Builder builder37 = builder0.clearExtensions();
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder39 = builder37.setLocale(locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 420 + "'", int7 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1439 + "'", int14 == 1439);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str28, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514513105,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=53,MILLISECOND=105,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514513105,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=53,MILLISECOND=105,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTime(chronology7);
        org.joda.time.Period period10 = duration2.toPeriod(chronology7);
        org.joda.time.Days days11 = duration2.toStandardDays();
        org.joda.time.Period period12 = days11.toPeriod();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.DateTime.Property property18 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.Duration duration19 = period12.toDurationTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property20 = dateTime15.centuryOfEra();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.DurationField durationField4 = chronology1.years();
        long long7 = durationField4.subtract(1645514163115L, 14);
        long long10 = durationField4.add((long) 34, 58);
        int int13 = durationField4.getDifference(1645566860434L, 3291028461923L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1203664563115L + "'", long7 == 1203664563115L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1830297600034L + "'", long10 == 1830297600034L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-52) + "'", int13 == (-52));
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.withFields(readablePartial3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (-1), chronology9);
        org.joda.time.Period period11 = period10.toPeriod();
        org.joda.time.LocalTime localTime12 = localTime7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        boolean boolean18 = localTime12.isSupported(dateTimeFieldType16);
        boolean boolean19 = localTime6.isSupported(dateTimeFieldType16);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(chronology31);
        org.joda.time.Period period34 = new org.joda.time.Period((long) 1, (long) ' ', periodType26, chronology31);
        org.joda.time.DurationField durationField35 = chronology31.weeks();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) 10, 1645514153096L, chronology31);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(1645514161529L, chronology31);
        org.joda.time.DateTimeField dateTimeField38 = chronology31.secondOfMinute();
        boolean boolean39 = dateTimeFieldType16.isSupported(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology31.getDateTimeMillis(691, 7612951, 7612951, 52670823);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7612951 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime9.era();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        boolean boolean32 = dateTime31.isEqualNow();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean35 = interval33.contains((long) 10);
        org.joda.time.Interval interval36 = interval33.toInterval();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval36);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        int int8 = dateTime0.getYear();
        org.joda.time.DateTime dateTime10 = dateTime0.plusYears(14);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime16 = dateTime12.withWeekOfWeekyear((int) (byte) 1);
        boolean boolean17 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime19 = dateTime10.minus(1645514499606L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 10, chronology12);
        boolean boolean14 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.DateTime dateTime28 = dateTime22.toDateTime(chronology26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) 1, (long) ' ', periodType21, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime15.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime32.plus((org.joda.time.ReadablePeriod) period37);
        int int39 = dateTime38.getMillisOfSecond();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str43 = interval42.toString();
        boolean boolean44 = interval42.isAfterNow();
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.Interval interval46 = interval42.gap(readableInterval45);
        boolean boolean47 = dateTime38.equals((java.lang.Object) interval46);
        boolean boolean48 = interval31.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeUtils.getZone(dateTimeZone49);
        java.lang.String str52 = dateTimeZone50.getName((long) ' ');
        java.lang.String str54 = dateTimeZone50.getName((long) (short) -1);
        org.joda.time.DateTime dateTime55 = dateTime38.toDateTime(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 420 + "'", int35 == 420);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str43, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-213:00" + "'", str52, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-213:00" + "'", str54, "-213:00");
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType2 = periodType1.withDaysRemoved();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.Period period8 = new org.joda.time.Period(1645514161529L, periodType2, chronology7);
        org.joda.time.DurationField durationField9 = chronology7.seconds();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeUtils.getZone(dateTimeZone10);
        java.lang.String str13 = dateTimeZone11.getName((long) ' ');
        java.lang.String str14 = dateTimeZone11.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) 0);
        boolean boolean17 = dateTimeZone11.isLocalDateTimeGap(localDateTime16);
        long long19 = dateTimeZone11.nextTransition(1645514181870L);
        java.util.TimeZone timeZone20 = dateTimeZone11.toTimeZone();
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField22 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = chronology7.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-213:00" + "'", str13, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-213:00" + "'", str14, "-213:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514181870L + "'", long19 == 1645514181870L);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT-E3:00");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis(11);
        int int8 = dateTime5.getDayOfYear();
        long long9 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime5);
        int int10 = dateTime5.getEra();
        org.joda.time.DateTime.Property property11 = dateTime5.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25200000" + "'", str4, "25200000");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 359 + "'", int8 == 359);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 162000000L + "'", long9 == 162000000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str8 = dateTimeField4.getAsShortText(1645514151873L, locale7);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = dateTimeField4.getAsShortText(26153877, locale10);
        java.util.Locale.Builder builder12 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder15 = builder1.setExtension('x', "DayTime");
        java.util.Locale locale16 = builder15.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder15.setExtension(' ', "2074-04-15T14:37:58.264Z/2074-04-15T14:37:58.264Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26153877" + "'", str11, "26153877");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN_#x-daytime");
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) ' ');
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.text.DateFormatSymbols dateFormatSymbols7 = java.text.DateFormatSymbols.getInstance(locale5);
        java.lang.String str8 = dateTimeZone1.getShortName((long) 874, locale5);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate12 = localDate9.plusWeeks(27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-213:00" + "'", str3, "-213:00");
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514513417,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=53,MILLISECOND=417,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateFormatSymbols7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) ' ', dateTimeZone1);
        int int3 = dateTime2.getYearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Duration duration8 = interval6.toDuration();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfDay();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.Interval interval14 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        int int22 = period20.getValue(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration26 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 453, 436);
        org.joda.time.DateTime dateTime32 = dateTime24.minusWeeks(8);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((-1));
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear(639);
        boolean boolean37 = interval14.contains((org.joda.time.ReadableInstant) dateTime34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval39 = interval14.withStartMillis(3291028459848L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval5.toMutableInterval();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(2);
        long long26 = chronology17.set((org.joda.time.ReadablePartial) localDateTime22, (long) (short) 10);
        org.joda.time.DurationField durationField27 = chronology17.seconds();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) 1439, 1645514163115L, chronology17);
        mutableInterval28.setDurationBeforeEnd((long) 35);
        boolean boolean31 = mutableInterval5.contains((org.joda.time.ReadableInterval) mutableInterval28);
        boolean boolean33 = mutableInterval5.isBefore(3291028452547L);
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval5.copy();
        mutableInterval5.setEndMillis(3291028490391L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 187200000L + "'", long26 == 187200000L);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(mutableInterval34);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        java.util.Date date5 = localDate4.toDate();
        int int6 = date5.getMinutes();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Dec 25 00:00:00 GMT 1969");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        java.lang.String str14 = dateTimeZone10.getName((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645514182943L, dateTimeZone10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(26167);
        boolean boolean19 = dateTime18.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 187200000L + "'", long6 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str7, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-213:00" + "'", str12, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-213:00" + "'", str14, "-213:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(26301292);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusHours(28);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        int int24 = localDateTime23.getWeekyear();
        int int25 = localDateTime23.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withDayOfYear(42);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3888) + "'", int24 == (-3888));
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3889 + "'", int25 == 3889);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology3);
        int int5 = localTime4.getSecondOfMinute();
        org.joda.time.LocalTime localTime7 = localTime4.minusMinutes(2022);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds(9);
        org.joda.time.LocalTime localTime11 = localTime7.plusSeconds(1970);
        int int12 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime15.getMinuteOfDay();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime15.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime15.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime15.minus((long) 10);
        org.joda.time.Period period26 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.plusWeeks((int) (byte) 1);
        int int32 = property28.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Duration duration41 = duration38.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration41, 26160257);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        int int49 = dateTime45.getYearOfCentury();
        int int50 = dateTime45.getDayOfMonth();
        org.joda.time.DateTime dateTime52 = dateTime45.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfDay();
        int int54 = dateTime52.getYear();
        int int55 = dateTime52.getEra();
        org.joda.time.DateTime dateTime57 = dateTime52.withYearOfCentury(21);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType59 = periodType58.withDaysRemoved();
        org.joda.time.PeriodType periodType60 = periodType58.withDaysRemoved();
        org.joda.time.PeriodType periodType61 = periodType58.withMinutesRemoved();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime52, periodType58);
        org.joda.time.LocalTime localTime63 = localTime11.minus((org.joda.time.ReadablePeriod) period62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = localTime63.toString("P22Y10M35W100DT32772H3M0.032S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 420 + "'", int18 == 420);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 420 + "'", int48 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 69 + "'", int49 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 25 + "'", int50 == 25);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1969 + "'", int54 == 1969);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(localTime63);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeUtils.getZone(dateTimeZone13);
        java.lang.String str16 = dateTimeZone14.getName((long) ' ');
        java.lang.String str18 = dateTimeZone14.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, dateTimeZone14);
        long long22 = dateTimeZone14.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter10.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withDefaultYear(1);
        java.lang.StringBuffer stringBuffer28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(10L, chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        int int39 = dateTime37.get(dateTimeFieldType38);
        int int40 = dateTime31.get(dateTimeFieldType38);
        boolean boolean41 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property42 = dateTime31.weekyear();
        org.joda.time.DateTime dateTime43 = property42.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property44 = dateTime43.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter25.printTo(stringBuffer28, (org.joda.time.ReadableInstant) dateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-213:00" + "'", str16, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-213:00" + "'", str18, "-213:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514153208L + "'", long22 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 420 + "'", int34 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1969 + "'", int39 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property5 = dateTime4.millisOfDay();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.lang.String str8 = property5.getAsText(locale6);
        java.lang.String str9 = locale6.toLanguageTag();
        int int10 = property3.getMaximumTextLength(locale6);
        org.joda.time.LocalDate localDate12 = property3.setCopy(1300);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "25200000" + "'", str8, "25200000");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ja-JP" + "'", str9, "ja-JP");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        java.lang.Character[] charArray11 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet12 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet12, charArray11);
        boolean boolean15 = charSet12.add((java.lang.Character) ' ');
        boolean boolean17 = charSet12.add((java.lang.Character) '#');
        boolean boolean18 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.stream.Stream<java.lang.Character> charStream19 = charSet12.stream();
        java.lang.Object[] objArray20 = charSet12.toArray();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime21.getMinuteOfDay();
        int int25 = dateTime21.getYearOfCentury();
        int int26 = dateTime21.getDayOfMonth();
        org.joda.time.DateTime dateTime28 = dateTime21.minusWeeks((int) (short) 0);
        int int29 = dateTime21.getYear();
        org.joda.time.DateTime dateTime31 = dateTime21.plusYears(14);
        int int32 = dateTime31.getDayOfWeek();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime.Property property35 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime33.withWeekOfWeekyear((int) (byte) 1);
        boolean boolean38 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int39 = dateTime33.getDayOfWeek();
        boolean boolean40 = charSet12.contains((java.lang.Object) dateTime33);
        java.util.Spliterator<java.lang.Character> charSpliterator41 = charSet12.spliterator();
        java.util.stream.Stream<java.lang.Character> charStream42 = charSet12.parallelStream();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charStream19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[#,  , 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[#,  , 4]");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 420 + "'", int24 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 69 + "'", int25 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 25 + "'", int26 == 25);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1969 + "'", int29 == 1969);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charSpliterator41);
        org.junit.Assert.assertNotNull(charStream42);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) dateTime2, dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime23 = localDate16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean25 = localDate16.isSupported(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(chronology30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology30);
        boolean boolean34 = dateTimeFieldType24.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.hourOfDay();
        java.lang.String str37 = dateTimeField35.getAsText(1645514222063L);
        int int38 = dateTimeField35.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = dateTimeField35.set(1645514273731L, 363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 363 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "10" + "'", str37, "10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.setCopy("3");
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = property5.setCopy(52435277);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52435277 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.LocalTime localTime12 = localTime10.withFields(readablePartial11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology14);
        int int16 = localTime15.getSecondOfMinute();
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime10, (org.joda.time.ReadablePartial) localTime15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Period period19 = period17.plus(readablePeriod18);
        org.joda.time.Period period21 = period19.withMinutes(26151451);
        org.joda.time.LocalTime localTime22 = localTime0.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalTime.Property property23 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime24 = property23.getLocalTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        org.joda.time.DateTime.Property property5 = dateTime0.year();
        org.joda.time.DateTime dateTime7 = dateTime0.plusDays(26153423);
        int int8 = dateTime7.getYear();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 73575 + "'", int8 == 73575);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy(1640);
        org.joda.time.DurationField durationField8 = property5.getRangeDurationField();
        java.lang.String str9 = durationField8.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DurationField[years]" + "'", str9, "DurationField[years]");
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        boolean boolean9 = charSet4.contains((java.lang.Object) 10.0d);
        int int10 = charSet4.size();
        java.lang.Character[] charArray15 = new java.lang.Character[] { 'x', '4', 'a', 'a' };
        java.util.LinkedHashSet<java.lang.Character> charSet16 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet16, charArray15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        int int22 = dateTime18.getYearOfCentury();
        int int23 = dateTime18.getDayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime18.minusWeeks((int) (short) 0);
        int int26 = dateTime18.getYear();
        org.joda.time.DateTime dateTime28 = dateTime18.plusYears(14);
        boolean boolean29 = charSet16.equals((java.lang.Object) 14);
        int int30 = charSet16.size();
        boolean boolean31 = charSet16.isEmpty();
        boolean boolean32 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet16);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        long long35 = calendar34.getTimeInMillis();
        long long36 = calendar34.getTimeInMillis();
        int int38 = calendar34.getMinimum(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.Period period45 = duration40.toPeriod(chronology42);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeUtils.getZone(dateTimeZone48);
        boolean boolean51 = dateTimeZone49.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology52 = chronology42.withZone(dateTimeZone49);
        boolean boolean53 = calendar34.after((java.lang.Object) chronology42);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        int int57 = period55.getValue(0);
        org.joda.time.Period period58 = period55.normalizedStandard();
        long long61 = chronology42.add((org.joda.time.ReadablePeriod) period55, 1645514155102L, (int) '4');
        org.joda.time.Period period63 = org.joda.time.Period.months(5884928);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(10L, chronology66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyear();
        int int69 = dateTime67.get(dateTimeFieldType68);
        boolean boolean70 = localTime64.isSupported(dateTimeFieldType68);
        org.joda.time.LocalTime.Property property71 = localTime64.minuteOfHour();
        org.joda.time.LocalTime localTime72 = property71.withMaximumValue();
        org.joda.time.LocalTime localTime74 = localTime72.minusSeconds(2782);
        org.joda.time.LocalTime localTime76 = localTime72.minusMillis(58);
        org.joda.time.Period period85 = new org.joda.time.Period(26155103, 7, 14, 10, 2, (int) '#', 11, 1640);
        org.joda.time.LocalTime localTime86 = localTime72.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.Period period88 = org.joda.time.Period.millis(26220876);
        org.joda.time.Period period89 = period88.negated();
        org.joda.time.ReadablePeriod[] readablePeriodArray90 = new org.joda.time.ReadablePeriod[] { period55, period63, period85, period88 };
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.ReadablePeriod[] readablePeriodArray91 = charSet4.toArray(readablePeriodArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 420 + "'", int21 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69 + "'", int22 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 25 + "'", int23 == 25);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514513849,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=53,MILLISECOND=849,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514513849L + "'", long35 == 1645514513849L);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514513849L + "'", long36 == 1645514513849L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645514156922L + "'", long61 == 1645514156922L);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1969 + "'", int69 == 1969);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(readablePeriodArray90);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.Period period9 = new org.joda.time.Period(1645514161529L, periodType3, chronology8);
        org.joda.time.DurationField durationField10 = chronology8.seconds();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 795, chronology8);
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(34);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.Chronology chronology5 = mutableInterval2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.minus((long) 10);
        org.joda.time.DateTime dateTime12 = dateTime0.minusHours(7);
        org.joda.time.DateTime.Property property13 = dateTime0.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = property13.getDateTime();
        int int16 = property13.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        int int12 = dateTimeField11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime15, (int) (short) 1, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = locale23.getDisplayLanguage(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone1, locale25);
        int int28 = timeZone1.getRawOffset();
        int int30 = timeZone1.getOffset(1645514154223L);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.Locale locale32 = java.util.Locale.US;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone31, locale32);
        boolean boolean34 = timeZone1.hasSameRules(timeZone31);
        boolean boolean35 = timeZone31.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = timeZone31.getOffset(15334917, 26297538, 156, 62, 52488, 503);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1439 + "'", int12 == 1439);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str26, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514513962,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=53,MILLISECOND=962,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645514513962,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=53,MILLISECOND=962,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime.Property property5 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime7 = property5.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone9.getName((long) ' ');
        java.lang.String str13 = dateTimeZone9.getName((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime7.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Interval interval15 = localDate0.toInterval(dateTimeZone9);
        java.lang.String str16 = dateTimeZone9.getID();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(38274);
        long long21 = dateTimeZone18.convertLocalToUTC((long) 40, false);
        long long23 = dateTimeZone9.getMillisKeepLocal(dateTimeZone18, 3291028671200L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-213:00" + "'", str11, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-213:00" + "'", str13, "-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-213:00" + "'", str16, "-213:00");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-38234L) + "'", long21 == (-38234L));
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3290261832926L + "'", long23 == 3290261832926L);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        java.lang.String str12 = dateTimeField9.getAsShortText((long) (byte) 1);
        long long14 = dateTimeField9.roundFloor(1645514316688L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField9.getType();
        long long17 = dateTimeField9.roundHalfFloor((long) 10022);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        int int23 = dateTimeField21.getLeapAmount((long) 26151451);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int26 = dateTimeField21.getMaximumShortTextLength(locale25);
        java.text.DateFormatSymbols dateFormatSymbols27 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale25);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet29 = locale25.getUnicodeLocaleKeys();
        java.lang.String str30 = dateTimeField9.getAsText(505, locale25);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "180" + "'", str12, "180");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514280000L + "'", long14 == 1645514280000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateFormatSymbols27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "505" + "'", str30, "505");
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((int) (byte) 10);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationFrom(readableInstant8);
        long long10 = duration9.getMillis();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plus((org.joda.time.ReadableDuration) duration9);
        int int12 = localDateTime5.getHourOfDay();
        int int13 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.minuteOfHour();
        int int15 = localDateTime5.getMonthOfYear();
        org.joda.time.Period period20 = new org.joda.time.Period(21, (int) (byte) 100, 35, 292278993);
        org.joda.time.Period period22 = period20.plusHours((int) ' ');
        int int23 = period22.getHours();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 52678312);
        int int26 = localDateTime5.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTime(chronology30);
        org.joda.time.Period period33 = new org.joda.time.Period((long) 1, (long) ' ', periodType25, chronology30);
        org.joda.time.Period period34 = period33.negated();
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        int int38 = period36.getValue(0);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        int int40 = period36.get(durationFieldType39);
        boolean boolean41 = period34.isSupported(durationFieldType39);
        boolean boolean42 = localDateTime19.isSupported(durationFieldType39);
        int int43 = localDateTime19.getEra();
        int int44 = localDateTime19.getYear();
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = localDateTime19.getFields();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3888 + "'", int44 == 3888);
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.withWeekyear(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.LocalDate localDate7 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate8 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(26228346);
        org.joda.time.LocalDate localDate12 = localDate8.plusYears(26219625);
        org.joda.time.LocalDate localDate13 = localDate0.withFields((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.Period period16 = org.joda.time.Period.millis(26220876);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 5869440);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 26220876 * 5869440");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Dec 25 00:00:00 GMT 1969");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) 0);
        org.joda.time.LocalTime localTime14 = property7.addWrapFieldToCopy(54);
        org.joda.time.LocalTime localTime15 = property7.getLocalTime();
        org.joda.time.LocalTime localTime16 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime18 = property7.addWrapFieldToCopy(26207293);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        int int7 = period5.getValue(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration11 = period5.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 7, chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate17 = localDate14.plusYears(57);
        java.lang.String str19 = localDate14.toString("26180847");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate14.withWeekOfWeekyear(52439773);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52439773 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "26180847" + "'", str19, "26180847");
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis(11);
        org.joda.time.DateTime.Property property8 = dateTime5.secondOfMinute();
        org.joda.time.DateTime.Property property9 = dateTime5.secondOfMinute();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        long long13 = durationField10.getValueAsLong((long) 26207293, (-25220235943901179L));
        int int16 = durationField10.getValue(1645514213265L, 3291028469317L);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField10.getMillis(258460761600035L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 258460761600035 * 60000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25200000" + "'", str4, "25200000");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 436L + "'", long13 == 436L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 27425236 + "'", int16 == 27425236);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        int int40 = dateTime32.getYear();
        org.joda.time.DateTime dateTime42 = dateTime32.plusYears(14);
        boolean boolean43 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks((int) (byte) 10);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = period48.toDurationFrom(readableInstant49);
        long long51 = duration50.getMillis();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plus((org.joda.time.ReadableDuration) duration50);
        long long53 = duration50.getMillis();
        java.lang.String str54 = duration50.toString();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval55.toMutableInterval();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime57.getMinuteOfDay();
        org.joda.time.Period period62 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime63 = dateTime57.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateTime57.toDateTime(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime57.minus((long) 10);
        org.joda.time.DateTime dateTime69 = dateTime57.minusHours(7);
        org.joda.time.DateTime.Property property70 = dateTime57.dayOfWeek();
        mutableInterval56.setStart((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime73 = dateTime57.minusHours(435);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType78 = periodType77.withSecondsRemoved();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime();
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Chronology chronology83 = org.joda.time.DateTimeUtils.getChronology(chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology83.hourOfHalfday();
        org.joda.time.DateTime dateTime85 = dateTime79.toDateTime(chronology83);
        org.joda.time.Period period86 = new org.joda.time.Period((long) 1, (long) ' ', periodType78, chronology83);
        org.joda.time.Period period87 = new org.joda.time.Period((long) 795, chronology83);
        org.joda.time.DateTime dateTime88 = dateTime57.toDateTime(chronology83);
        org.joda.time.DateTimeField dateTimeField89 = chronology83.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone90 = chronology83.getZone();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 420 + "'", int35 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 69 + "'", int36 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 25 + "'", int37 == 25);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 35L + "'", long51 == 35L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.035S" + "'", str54, "PT0.035S");
        org.junit.Assert.assertNotNull(mutableInterval56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 420 + "'", int60 == 420);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime8.getZone();
        org.joda.time.DateTime dateTime11 = dateTime8.minusMillis(30);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays((int) (byte) 10);
        int int17 = localDate14.getMonthOfYear();
        java.lang.Character[] charArray21 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet22 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet22, charArray21);
        boolean boolean25 = charSet22.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) (byte) 10);
        org.joda.time.Interval interval31 = localDate30.toInterval();
        org.joda.time.LocalDate localDate33 = localDate30.withYear(38270);
        boolean boolean34 = charSet22.contains((java.lang.Object) localDate30);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int36 = localDate30.get(dateTimeFieldType35);
        int int37 = localDate14.get(dateTimeFieldType35);
        int int38 = dateTime11.get(dateTimeFieldType35);
        org.joda.time.DateTime dateTime39 = dateTime11.toDateTimeISO();
        int int40 = dateTime11.getYear();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 382 + "'", int36 == 382);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 382 + "'", int37 == 382);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 19 + "'", int38 == 19);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusMillis(0);
        int int5 = localDateTime4.getMillisOfDay();
        int int6 = localDateTime4.getYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withWeekOfWeekyear(13);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        int int10 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25200000 + "'", int5 == 25200000);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.years();
        org.joda.time.DateTimeField dateTimeField3 = chronology1.centuryOfEra();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = dateTimeField3.getAsText((int) (byte) 0, locale5);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale5);
        calendar8.setFirstDayOfWeek(58);
        java.lang.String str11 = calendar8.getCalendarType();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514514568,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=58,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=54,MILLISECOND=568,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        int int5 = localDate4.getYear();
        org.joda.time.LocalDate.Property property6 = localDate4.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate4.isSupported(dateTimeFieldType7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate4.withDayOfYear(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(905);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = interval11.isAfter((long) 10);
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        boolean boolean18 = duration8.isEqual((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withFieldAdded(durationFieldType21, 1970);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Interval interval30 = interval28.toInterval();
        long long31 = interval28.getEndMillis();
        java.lang.String str32 = interval28.toString();
        org.joda.time.DateTime dateTime33 = interval28.getStart();
        org.joda.time.Chronology chronology34 = interval28.getChronology();
        org.joda.time.Period period35 = new org.joda.time.Period(0L, 1645514152681L, chronology34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime23.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusDays(100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusHours((int) 'a');
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardMinutes((-1L));
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration46 = duration42.withDurationAdded((long) 1, 6);
        boolean boolean47 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period48 = duration42.toPeriod();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime49.getMinuteOfDay();
        int int53 = dateTime49.getYearOfCentury();
        int int54 = dateTime49.getDayOfMonth();
        org.joda.time.DateTime dateTime56 = dateTime49.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfDay();
        int int58 = dateTime56.getYear();
        int int59 = dateTime56.getEra();
        org.joda.time.DateTime dateTime61 = dateTime56.withYearOfCentury(21);
        org.joda.time.DateTime dateTime63 = dateTime56.withDayOfYear(90);
        org.joda.time.LocalDateTime localDateTime64 = dateTime56.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 187200000L + "'", long31 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str32, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(period48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 420 + "'", int52 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 69 + "'", int53 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 25 + "'", int54 == 25);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1969 + "'", int58 == 1969);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645514332082L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        boolean boolean8 = localTime2.isSupported(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundHalfCeilingCopy();
        boolean boolean12 = calendar1.after((java.lang.Object) property9);
        calendar1.setFirstDayOfWeek(2);
        calendar1.setTimeInMillis(1645514173137L);
        java.util.TimeZone timeZone17 = calendar1.getTimeZone();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514173137,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=13,MILLISECOND=137,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime8 = dateTime2.toDateTime(chronology6);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfYear();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.String str14 = dateTimeField10.getAsShortText((int) '#', locale12);
        long long16 = dateTimeField10.roundHalfEven(1645514176166L);
        long long18 = dateTimeField10.roundFloor(26153423L);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra(2);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = period24.toDurationFrom(readableInstant25);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 2022);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone31.convertUTCToLocal((long) 1970);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(1375201439L, dateTimeZone31);
        boolean boolean35 = localDateTime20.isEqual((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime20.minusMinutes(21);
        int int38 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime20);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "35" + "'", str14, "35");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645477200000L + "'", long16 == 1645477200000L);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-10800000L) + "'", long18 == (-10800000L));
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1970L + "'", long33 == 1970L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str8 = dateTimeField4.getAsShortText(1645514151873L, locale7);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = dateTimeField4.getAsShortText(26153877, locale10);
        java.util.Locale.Builder builder12 = builder1.setLocale(locale10);
        java.util.Locale.Builder builder13 = builder12.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26153877" + "'", str11, "26153877");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.withMaximumValue();
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) 32772, (int) (byte) 10);
        java.lang.String str16 = duration11.toString();
        org.joda.time.Period period17 = duration11.toPeriod();
        int[] intArray20 = chronology7.get((org.joda.time.ReadablePeriod) period17, 3291028443775L, (long) 26213240);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.035S" + "'", str16, "PT0.035S");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-104, -3, -2, 0, -7, -17, -10, -535]");
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(2);
        long long18 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 10);
        java.lang.String str19 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.millisOfSecond();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 453, chronology9);
        org.joda.time.DateTimeField dateTimeField22 = chronology9.secondOfMinute();
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 187200000L + "'", long18 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[-213:00]" + "'", str19, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String[] strArray53 = java.util.TimeZone.getAvailableIDs((int) '#');
        dateFormatSymbols51.setAmPmStrings(strArray53);
        java.lang.String[] strArray56 = java.util.TimeZone.getAvailableIDs(26171181);
        dateFormatSymbols51.setWeekdays(strArray56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getChronology(chronology58);
        org.joda.time.DurationField durationField60 = chronology59.years();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.centuryOfEra();
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        java.lang.String str65 = dateTimeField61.getAsText((int) (byte) 0, locale63);
        boolean boolean66 = dateFormatSymbols51.equals((java.lang.Object) (byte) 0);
        java.lang.String[] strArray67 = dateFormatSymbols51.getWeekdays();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 420 + "'", int6 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25 + "'", int8 == 25);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 420 + "'", int30 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 25 + "'", int32 == 25);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "utc" + "'", str3, "utc");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(4936542895527L, (long) 701);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(2);
        long long18 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) (short) 10);
        java.lang.String str19 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.millisOfSecond();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 453, chronology9);
        org.joda.time.Period period23 = period21.minusMillis(474);
        org.joda.time.Period period25 = org.joda.time.Period.millis(26197150);
        org.joda.time.Period period26 = period23.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.withMillis(0);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 187200000L + "'", long18 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[-213:00]" + "'", str19, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalDate localDate2 = localDate0.plus(readablePeriod1);
        int int3 = localDate2.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1969 + "'", int3 == 1969);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        int int40 = dateTime32.getYear();
        org.joda.time.DateTime dateTime42 = dateTime32.plusYears(14);
        boolean boolean43 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks((int) (byte) 10);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = period48.toDurationFrom(readableInstant49);
        long long51 = duration50.getMillis();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plus((org.joda.time.ReadableDuration) duration50);
        long long53 = duration50.getMillis();
        java.lang.String str54 = duration50.toString();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval55.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = mutableInterval56.overlaps(readableInterval57);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.millisOfDay();
        org.joda.time.DateTime dateTime63 = dateTime61.withTimeAtStartOfDay();
        org.joda.time.Period period65 = new org.joda.time.Period((long) '#');
        int int67 = period65.getValue(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration71 = period65.toDurationTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Chronology chronology72 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (-292275054), (long) (short) 0, chronology72);
        boolean boolean74 = mutableInterval56.isAfter((org.joda.time.ReadableInterval) interval73);
        boolean boolean75 = mutableInterval56.isBeforeNow();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 420 + "'", int35 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 69 + "'", int36 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 25 + "'", int37 == 25);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 35L + "'", long51 == 35L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.035S" + "'", str54, "PT0.035S");
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.years();
        org.joda.time.DateTimeField dateTimeField3 = chronology1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(dateTimeZone4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withFieldAdded(durationFieldType6, 1970);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Interval interval15 = interval13.toInterval();
        long long16 = interval13.getEndMillis();
        java.lang.String str17 = interval13.toString();
        org.joda.time.DateTime dateTime18 = interval13.getStart();
        org.joda.time.Chronology chronology19 = interval13.getChronology();
        org.joda.time.Period period20 = new org.joda.time.Period(0L, 1645514152681L, chronology19);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(100);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str27 = interval26.toString();
        org.joda.time.DateTime dateTime28 = interval26.getEnd();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = period33.toDurationFrom(readableInstant34);
        long long36 = duration35.getMillis();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plus((org.joda.time.ReadableDuration) duration35);
        boolean boolean38 = interval26.equals((java.lang.Object) duration35);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = interval41.isAfter((long) 10);
        org.joda.time.Interval interval44 = interval26.overlap((org.joda.time.ReadableInterval) interval41);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.months();
        org.joda.time.Period period46 = interval26.toPeriod(periodType45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType48 = periodType47.withMillisRemoved();
        org.joda.time.Period period49 = interval26.toPeriod(periodType48);
        int[] intArray50 = period49.getValues();
        int int51 = dateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) localDateTime21, intArray50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusMillis(0);
        org.joda.time.Period period58 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Duration duration60 = period58.toDurationFrom(readableInstant59);
        org.joda.time.Seconds seconds61 = duration60.toStandardSeconds();
        org.joda.time.Duration duration64 = duration60.withDurationAdded((long) 32772, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime52.withDurationAdded((org.joda.time.ReadableDuration) duration64, 70);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime52.plusMonths(26207293);
        org.joda.time.LocalDateTime.Property property69 = localDateTime52.dayOfMonth();
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder70.clearExtensions();
        java.util.Locale.Builder builder73 = builder70.setVariant("26207456");
        java.util.Locale locale74 = java.util.Locale.PRC;
        java.lang.String str75 = locale74.getDisplayScript();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Chronology chronology77 = org.joda.time.DateTimeUtils.getChronology(chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology77.hourOfHalfday();
        int int80 = dateTimeField78.getLeapAmount((long) 26151451);
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int83 = dateTimeField78.getMaximumShortTextLength(locale82);
        java.lang.String str84 = locale74.getDisplayCountry(locale82);
        java.lang.String str85 = locale74.getISO3Language();
        java.lang.String str86 = locale74.getDisplayName();
        java.lang.String str87 = locale74.getScript();
        java.util.Locale.setDefault(locale74);
        java.util.Locale.Builder builder89 = builder73.setLocale(locale74);
        java.lang.String str90 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localDateTime52, locale74);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187200000L + "'", long16 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str17, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str27, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35L + "'", long36 == 35L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(interval44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(seconds61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "China" + "'", str84, "China");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "zho" + "'", str85, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str86, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(builder89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "19" + "'", str90, "19");
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(505, 792, 5969338, 0, 165, 878, 5959210);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 165 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        java.util.Date date3 = java.util.Date.from(instant2);
        java.util.Date date4 = java.util.Date.from(instant2);
        java.util.Date date5 = java.util.Date.from(instant2);
        java.util.Date date6 = java.util.Date.from(instant2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514514985,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=54,MILLISECOND=985,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:21:54 GMT 2022");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:21:54 GMT 2022");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:21:54 GMT 2022");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:21:54 GMT 2022");
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(2787);
        org.joda.time.LocalDate localDate6 = property3.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = property3.setCopy("Tue Feb 22 07:17:02 GMT 2022");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Tue Feb 22 07:17:02 GMT 2022\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfDay(16);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1645514176563L);
        long long6 = instant5.getMillis();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTime((org.joda.time.ReadableInstant) instant5);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        int int15 = period13.getValue(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.Period period22 = new org.joda.time.Period(obj8, chronology20);
        org.joda.time.Period period24 = period22.withMonths(474);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusWeeks((int) (byte) 1);
        org.joda.time.Duration duration28 = period24.toDurationFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime31 = dateTime7.plusHours(292277093);
        int int32 = dateTime7.getCenturyOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514176563L + "'", long6 == 1645514176563L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime4 = property2.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime4.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime.Property property12 = dateTime4.secondOfDay();
        org.joda.time.DateTime dateTime14 = dateTime4.minusSeconds(209);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(10L, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = dateTime18.get(dateTimeFieldType19);
        boolean boolean21 = localTime15.isSupported(dateTimeFieldType19);
        org.joda.time.LocalTime.Property property22 = localTime15.minuteOfHour();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime25 = localTime23.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.LocalTime localTime27 = localTime25.withFields(readablePartial26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology29);
        int int31 = localTime30.getSecondOfMinute();
        org.joda.time.Period period32 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime25, (org.joda.time.ReadablePartial) localTime30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.Period period34 = period32.plus(readablePeriod33);
        org.joda.time.Period period36 = period34.withMinutes(26151451);
        org.joda.time.LocalTime localTime37 = localTime15.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime dateTime42 = dateTime39.minusSeconds(13);
        int int43 = dateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int45 = dateTime42.get(dateTimeFieldType44);
        boolean boolean46 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        long long6 = java.util.Date.UTC(302, 5953535, 62222, 6017, 10074, 5869440);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 15669010019880000L + "'", long6 == 15669010019880000L);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(38222);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        int int18 = dateTime9.get(dateTimeFieldType16);
        int int19 = dateTime5.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime21 = dateTime5.minusSeconds(0);
        int int22 = dateTime5.getMinuteOfHour();
        org.joda.time.DateTime dateTime24 = dateTime5.minus(1645514169216L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 420 + "'", int12 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1969 + "'", int19 == 1969);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String[] strArray53 = java.util.TimeZone.getAvailableIDs((int) '#');
        dateFormatSymbols51.setAmPmStrings(strArray53);
        java.lang.String[] strArray56 = java.util.TimeZone.getAvailableIDs(26171181);
        dateFormatSymbols51.setWeekdays(strArray56);
        java.lang.String[] strArray58 = dateFormatSymbols51.getShortMonths();
        java.lang.String[] strArray59 = dateFormatSymbols51.getMonths();
        java.lang.String[] strArray60 = java.util.Locale.getISOCountries();
        dateFormatSymbols51.setShortWeekdays(strArray60);
        java.lang.String[] strArray62 = dateFormatSymbols51.getAmPmStrings();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 420 + "'", int6 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25 + "'", int8 == 25);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 420 + "'", int30 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 25 + "'", int32 == 25);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        boolean boolean8 = charSet4.isEmpty();
        boolean boolean10 = charSet4.contains((java.lang.Object) "DateTimeField[minuteOfDay]");
        java.lang.Character[] charArray14 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet15 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet15, charArray14);
        boolean boolean18 = charSet15.add((java.lang.Character) ' ');
        charSet15.clear();
        java.lang.Character[] charArray24 = new java.lang.Character[] { 'x', '4', 'a', 'a' };
        java.util.LinkedHashSet<java.lang.Character> charSet25 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet25, charArray24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        int int35 = dateTime27.getYear();
        org.joda.time.DateTime dateTime37 = dateTime27.plusYears(14);
        boolean boolean38 = charSet25.equals((java.lang.Object) 14);
        boolean boolean40 = charSet25.add((java.lang.Character) 'a');
        boolean boolean41 = charSet15.addAll((java.util.Collection<java.lang.Character>) charSet25);
        boolean boolean42 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet25);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 420 + "'", int30 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 25 + "'", int32 == 25);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1969 + "'", int35 == 1969);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        java.util.Locale locale9 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronolgy();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeUtils.getZone(dateTimeZone19);
        java.lang.String str22 = dateTimeZone20.getName((long) ' ');
        org.joda.time.Interval interval23 = localDate14.toInterval(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter12.withZone(dateTimeZone20);
        int int26 = dateTimeZone20.getStandardOffset((long) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        java.util.Locale locale31 = dateTimeFormatter29.getLocale();
        java.lang.StringBuffer stringBuffer32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra(2);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = period38.toDurationFrom(readableInstant39);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration40, 2022);
        org.joda.time.LocalDateTime.Property property44 = localDateTime34.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy(0);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType48 = periodType47.withSecondsRemoved();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.Period period52 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.days();
        org.joda.time.Period period54 = period52.normalizedStandard(periodType53);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.days();
        org.joda.time.Period period58 = period56.normalizedStandard(periodType57);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.hours();
        int int60 = periodType57.indexOf(durationFieldType59);
        boolean boolean61 = periodType53.isSupported(durationFieldType59);
        int int62 = periodType49.indexOf(durationFieldType59);
        int int63 = periodType48.indexOf(durationFieldType59);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime46.withFieldAdded(durationFieldType59, 10074);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter29.printTo(stringBuffer32, (org.joda.time.ReadablePartial) localDateTime65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-213:00" + "'", str22, "-213:00");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-766800000) + "'", int26 == (-766800000));
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime.Property property4 = dateTime0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime0.plus(readablePeriod5);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekOfWeekyear(11);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTime(chronology7);
        org.joda.time.Period period10 = duration2.toPeriod(chronology7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) (short) 10);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePeriod) period12, (long) 26161182, (long) (byte) 1);
        org.joda.time.DateTimeField dateTimeField16 = chronology7.dayOfMonth();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) dateTime17);
        int int19 = dateTime17.getMinuteOfDay();
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, -7, -16, -1, -181]");
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 420 + "'", int19 == 420);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 12);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) '4', 12);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone7);
        int int9 = localDate8.getMonthOfYear();
        org.joda.time.Chronology chronology10 = localDate8.getChronology();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        int int14 = mutableDateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime6 = property1.setCopy((int) '#');
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime10 = dateTime7.plusWeeks(100);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfCentury(0);
        long long13 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime10.getZone();
        org.joda.time.DateTime dateTime16 = dateTime10.minusDays(26228346);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter19.getParser();
        boolean boolean21 = dateTimeFormatter19.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTime10.toString(dateTimeFormatter19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25200000" + "'", str4, "25200000");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60480000000L) + "'", long13 == (-60480000000L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        boolean boolean8 = localTime2.isSupported(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundHalfCeilingCopy();
        boolean boolean12 = calendar1.after((java.lang.Object) property9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        int int16 = timeZone14.getRawOffset();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14);
        calendar1.setTimeZone(timeZone14);
        java.lang.String str19 = timeZone14.getID();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("26226968");
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        boolean boolean23 = timeZone14.hasSameRules(timeZone21);
        java.lang.String str26 = timeZone14.getDisplayName(true, 0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514515301,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=55,MILLISECOND=301,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514515301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=55,MILLISECOND=301,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT" + "'", str26, "GMT");
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(39600010, 62, 5965215, (-213), (int) (short) 1, 6015213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -213 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        int int13 = localTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localTime10.equals((java.lang.Object) dateTimeFieldType17);
        int int20 = dateTime0.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime22 = dateTime0.minusYears((int) 'a');
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        org.joda.time.DurationField durationField24 = property23.getDurationField();
        java.lang.String str25 = durationField24.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25200000 + "'", int13 == 25200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[months]" + "'", str25, "DurationField[months]");
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2022);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minusSeconds((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMinuteOfHour(52);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(25);
        int int17 = localDateTime14.getYearOfCentury();
        int int18 = localDateTime14.getYearOfEra();
        java.lang.String str20 = localDateTime14.toString("0000-01-01");
        org.joda.time.LocalDateTime.Property property21 = localDateTime14.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 69 + "'", int17 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0000-01-01" + "'", str20, "0000-01-01");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime0, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMonthOfYear(5);
        int int11 = localDateTime8.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withYearOfEra((-43));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -43 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 359 + "'", int11 == 359);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        int int5 = calendar1.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        long long9 = dateTimeZone7.convertUTCToLocal((long) 1970);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1375201439L, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(3);
        int int15 = localDateTime14.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.property(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DurationField durationField21 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.centuryOfEra();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.lang.String str26 = dateTimeField22.getAsText((int) (byte) 0, locale24);
        java.lang.String str27 = property17.getAsShortText(locale24);
        java.lang.String str28 = dateTimeZone7.getShortName(1645514178829L, locale24);
        boolean boolean29 = calendar1.after((java.lang.Object) locale24);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        java.util.TimeZone timeZone31 = calendar1.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = calendar1.get(52499404);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52499404");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514515421,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=55,MILLISECOND=421,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514515421L + "'", long2 == 1645514515421L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1970L + "'", long9 == 1970L);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 359 + "'", int15 == 359);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0" + "'", str26, "0");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7" + "'", str27, "7");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime0, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusHours((int) 'x');
        int int11 = localDateTime8.getWeekyear();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationFrom(readableInstant14);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) 32772, (int) (byte) 10);
        java.lang.String str20 = duration15.toString();
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        boolean boolean25 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime8.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.minus(100L);
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        org.joda.time.DateTime dateTime33 = property32.withMinimumValue();
        org.joda.time.DateTime dateTime34 = property32.withMaximumValue();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDayTime();
        java.lang.String str36 = periodType35.toString();
        org.joda.time.Period period37 = duration15.toPeriodTo((org.joda.time.ReadableInstant) dateTime34, periodType35);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.centuryOfEra();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = localDateTime38.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusSeconds(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        int int46 = dateTime34.get(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0.035S" + "'", str20, "PT0.035S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[YearWeekDayTime]" + "'", str36, "PeriodType[YearWeekDayTime]");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 292278969 + "'", int46 == 292278969);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(123, (-366), 26219625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -366 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getMinuteOfDay();
        int int9 = dateTime5.getYearOfCentury();
        int int10 = dateTime5.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime5.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = property1.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.lang.Character[] charArray18 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet19 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet19, charArray18);
        boolean boolean22 = charSet19.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate27 = localDate25.plusDays((int) (byte) 10);
        org.joda.time.Interval interval28 = localDate27.toInterval();
        org.joda.time.LocalDate localDate30 = localDate27.withYear(38270);
        boolean boolean31 = charSet19.contains((java.lang.Object) localDate27);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int33 = localDate27.get(dateTimeFieldType32);
        org.joda.time.DateTime.Property property34 = dateTime13.property(dateTimeFieldType32);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) ' ', dateTimeZone36);
        int int38 = dateTime37.getYearOfCentury();
        org.joda.time.DateTime.Property property39 = dateTime37.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        org.joda.time.Interval interval41 = property39.toInterval();
        org.joda.time.MutableInterval mutableInterval42 = interval41.toMutableInterval();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime43.getMinuteOfDay();
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = period48.toDurationFrom(readableInstant49);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        org.joda.time.Duration duration54 = duration50.withDurationAdded((long) 32772, (int) (byte) 10);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval56 = interval41.withDurationAfterStart((org.joda.time.ReadableDuration) duration54);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime58 = dateTime13.toDateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = dateTime59.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property62 = dateTime61.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeUtils.getZone(dateTimeZone63);
        java.lang.String str66 = dateTimeZone64.getName((long) ' ');
        org.joda.time.DateTime dateTime67 = dateTime61.toDateTime(dateTimeZone64);
        java.lang.String str69 = dateTimeZone64.getNameKey(1645514178701L);
        java.lang.String str71 = dateTimeZone64.getShortName((long) 174);
        org.joda.time.DateTime dateTime72 = dateTime58.toDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime74 = dateTime72.withCenturyOfEra(62222);
        org.joda.time.DateTime.Property property75 = dateTime72.secondOfMinute();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25200000" + "'", str4, "25200000");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 420 + "'", int8 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 25 + "'", int10 == 25);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 382 + "'", int33 == 382);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 69 + "'", int38 == 69);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(mutableInterval42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 420 + "'", int46 == 420);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "-213:00" + "'", str66, "-213:00");
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertNull(str69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-213:00" + "'", str71, "-213:00");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationFrom(readableInstant5);
        long long7 = duration6.getMillis();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plus((org.joda.time.ReadableDuration) duration6);
        long long9 = duration6.getStandardHours();
        org.joda.time.Hours hours10 = duration6.toStandardHours();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks((int) (byte) 1);
        int int16 = property12.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime27 = interval26.getStart();
        boolean boolean28 = interval26.containsNow();
        boolean boolean29 = hours10.equals((java.lang.Object) boolean28);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getMinuteOfDay();
        int int9 = dateTime5.getYearOfCentury();
        int int10 = dateTime5.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime5.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = property1.compareTo((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str15 = property1.getAsShortText();
        java.lang.String str16 = property1.getAsString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25200000" + "'", str4, "25200000");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 420 + "'", int8 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 25 + "'", int10 == 25);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "25200000" + "'", str15, "25200000");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "25200000" + "'", str16, "25200000");
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.minus((long) 10);
        org.joda.time.DateTime dateTime12 = dateTime0.minusHours(7);
        org.joda.time.DateTime.Property property13 = dateTime0.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime0.minusHours(96);
        org.joda.time.DateTime dateTime17 = dateTime0.withMillis((long) 52670089);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime0.withDayOfYear(5961251);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5961251 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType8 = periodType7.withSecondsRemoved();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime(chronology13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) 1, (long) ' ', periodType8, chronology13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra(2);
        long long22 = chronology13.set((org.joda.time.ReadablePartial) localDateTime18, (long) (short) 10);
        org.joda.time.DurationField durationField23 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField24 = chronology13.millisOfDay();
        boolean boolean25 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.hourOfHalfday();
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfHalfday();
        java.util.Locale locale33 = new java.util.Locale("2022-02-22T07:16:06.916Z/2022-02-22T07:16:06.916Z", "millisOfDay");
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.lang.String str35 = locale33.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = dateTimeField28.set(1645514448523L, "2074-04-15T14:38:00.852Z/2074-04-15T14:38:00.852Z", locale33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2074-04-15T14:38:00.852Z/2074-04-15T14:38:00.852Z\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 187200000L + "'", long22 == 187200000L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals(locale33.toString(), "2022-02-22t07:16:06.916z/2022-02-22t07:16:06.916z_MILLISOFDAY");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getChronology(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.Period period8 = duration3.toPeriod(chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        boolean boolean14 = dateTimeZone12.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology5.years();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(3291028484891L, 3291028493924L, chronology5);
        org.joda.time.DateTime dateTime18 = mutableInterval17.getStart();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        int int20 = localTime19.getMinuteOfHour();
        org.joda.time.LocalTime localTime22 = localTime19.withMillisOfDay(16);
        org.joda.time.Instant instant24 = new org.joda.time.Instant(1645514176563L);
        long long25 = instant24.getMillis();
        org.joda.time.DateTime dateTime26 = localTime22.toDateTime((org.joda.time.ReadableInstant) instant24);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        int int34 = period32.getValue(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.Period period41 = new org.joda.time.Period(obj27, chronology39);
        org.joda.time.Period period43 = period41.withMonths(474);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = dateTime44.plusWeeks((int) (byte) 1);
        org.joda.time.Duration duration47 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration47);
        mutableInterval17.setInterval((org.joda.time.ReadableInterval) mutableInterval48);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514176563L + "'", long25 == 1645514176563L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration47);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) dateTime2, dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime23 = localDate16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate25 = localDate16.plusYears((int) '4');
        org.joda.time.LocalDate localDate27 = localDate25.plusWeeks(16);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (-1), chronology29);
        org.joda.time.Period period31 = period30.toPeriod();
        int int32 = period31.size();
        int int33 = period31.getMinutes();
        int[] intArray34 = period31.getValues();
        org.joda.time.Period period36 = period31.withMonths(26155103);
        org.joda.time.Period period38 = period36.minusDays((-292275054));
        int int39 = period36.getHours();
        org.joda.time.Period period41 = period36.withMinutes(914);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfHalfday();
        org.joda.time.DurationField durationField46 = durationFieldType42.getField(chronology44);
        boolean boolean47 = period36.isSupported(durationFieldType42);
        boolean boolean48 = localDate27.isSupported(durationFieldType42);
        org.joda.time.LocalDate localDate50 = localDate27.minusYears(163);
        java.lang.String str51 = localDate27.toString();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-04-16" + "'", str51, "2022-04-16");
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        java.util.Date date5 = new java.util.Date(0, 54, 6, 0, (int) 'x');
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = localTime6.plusHours((-737452));
        org.joda.time.LocalTime.Property property9 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime11 = localTime6.minusHours(31);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jul 06 02:00:00 GMT 1904");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property7.addNoWrapToCopy(18);
        org.joda.time.LocalTime localTime12 = property7.getLocalTime();
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = locale14.getDisplayScript();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        int int20 = dateTimeField18.getLeapAmount((long) 26151451);
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int23 = dateTimeField18.getMaximumShortTextLength(locale22);
        java.lang.String str24 = locale14.getDisplayCountry(locale22);
        java.util.Set<java.lang.Character> charSet25 = locale22.getExtensionKeys();
        java.util.Locale locale26 = locale22.stripExtensions();
        java.lang.String str27 = locale26.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = property7.setCopy("14:35:00.676", locale26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14:35:00.676\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "China" + "'", str24, "China");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.plusHours(10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = localTime9.withMinuteOfHour(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime5.withZone(dateTimeZone7);
        java.util.Locale locale13 = java.util.Locale.PRC;
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.util.Calendar calendar16 = dateTime5.toCalendar(locale13);
        calendar16.setFirstDayOfWeek(52439773);
        java.lang.Object obj19 = calendar16.clone();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-213:00" + "'", str9, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-213:00" + "'", str11, "-213:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-162000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=52439773,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=355,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "java.util.GregorianCalendar[time=-162000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=52439773,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=355,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "java.util.GregorianCalendar[time=-162000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=52439773,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=355,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "java.util.GregorianCalendar[time=-162000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=52439773,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=355,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTime(chronology7);
        org.joda.time.Period period10 = duration2.toPeriod(chronology7);
        org.joda.time.Days days11 = duration2.toStandardDays();
        org.joda.time.Period period12 = days11.toPeriod();
        org.joda.time.Period period14 = period12.minusYears(1970);
        org.joda.time.Period period16 = period12.plusYears(26179754);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        int int26 = dateTime24.getYear();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime29 = localTime27.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.LocalTime localTime31 = localTime29.withFields(readablePartial30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology33);
        int int35 = localTime34.getSecondOfMinute();
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime29, (org.joda.time.ReadablePartial) localTime34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.Period period38 = period36.plus(readablePeriod37);
        org.joda.time.DateTime dateTime39 = dateTime24.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.Duration duration41 = period16.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Interval interval46 = interval44.toInterval();
        long long47 = interval44.getEndMillis();
        java.lang.String str48 = interval44.toString();
        org.joda.time.DateTime dateTime49 = interval44.getStart();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        java.lang.String str53 = interval52.toString();
        boolean boolean54 = interval52.isAfterNow();
        org.joda.time.Duration duration55 = interval52.toDuration();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime56, (org.joda.time.ReadablePartial) localTime57, periodType58);
        org.joda.time.Period period60 = period59.negated();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((long) (-1), chronology62);
        org.joda.time.Period period64 = period63.toPeriod();
        org.joda.time.Period period65 = period60.withFields((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period67 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.days();
        org.joda.time.Period period69 = period67.normalizedStandard(periodType68);
        boolean boolean71 = periodType68.equals((java.lang.Object) 6);
        org.joda.time.Period period72 = period65.normalizedStandard(periodType68);
        org.joda.time.Interval interval73 = interval52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period72);
        boolean boolean74 = interval44.contains((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(10L, chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        int int79 = dateTime77.get(dateTimeFieldType78);
        org.joda.time.DateMidnight dateMidnight80 = dateTime77.toDateMidnight();
        boolean boolean81 = dateMidnight80.isAfterNow();
        boolean boolean82 = interval73.isAfter((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.DateTime dateTime83 = interval73.getStart();
        boolean boolean84 = period16.equals((java.lang.Object) dateTime83);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(days11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 420 + "'", int20 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 69 + "'", int21 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25 + "'", int22 == 25);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 187200000L + "'", long47 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str48, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str53, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1969 + "'", int79 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.Period period5 = period1.plusWeeks(1969);
        int int6 = period5.getMonths();
        org.joda.time.Period period8 = period5.withDays(27);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays((int) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = localDate12.withYear(38270);
        boolean boolean16 = charSet4.contains((java.lang.Object) localDate12);
        int int17 = charSet4.size();
        boolean boolean19 = charSet4.add((java.lang.Character) 'a');
        java.lang.Character[] charArray23 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet24 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet24, charArray23);
        boolean boolean27 = charSet24.add((java.lang.Character) ' ');
        boolean boolean29 = charSet24.contains((java.lang.Object) 10.0d);
        boolean boolean30 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet24);
        java.lang.Character[] charArray34 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet35 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet35, charArray34);
        boolean boolean38 = charSet35.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays((int) (byte) 10);
        org.joda.time.Interval interval44 = localDate43.toInterval();
        org.joda.time.LocalDate localDate46 = localDate43.withYear(38270);
        boolean boolean47 = charSet35.contains((java.lang.Object) localDate43);
        int int48 = charSet35.size();
        boolean boolean50 = charSet35.add((java.lang.Character) 'a');
        boolean boolean51 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet35);
        java.lang.Character[] charArray55 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet56 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet56, charArray55);
        boolean boolean59 = charSet56.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate64 = localDate62.plusDays((int) (byte) 10);
        org.joda.time.Interval interval65 = localDate64.toInterval();
        org.joda.time.LocalDate localDate67 = localDate64.withYear(38270);
        boolean boolean68 = charSet56.contains((java.lang.Object) localDate64);
        int int69 = charSet56.size();
        boolean boolean71 = charSet56.add((java.lang.Character) 'a');
        java.lang.Character[] charArray75 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet76 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet76, charArray75);
        boolean boolean79 = charSet76.add((java.lang.Character) ' ');
        boolean boolean81 = charSet76.contains((java.lang.Object) 10.0d);
        boolean boolean82 = charSet56.containsAll((java.util.Collection<java.lang.Character>) charSet76);
        boolean boolean83 = charSet35.removeAll((java.util.Collection<java.lang.Character>) charSet56);
        java.util.Spliterator<java.lang.Character> charSpliterator84 = charSet56.spliterator();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(charSpliterator84);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime4 = property2.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime4.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime.Property property12 = dateTime4.secondOfDay();
        boolean boolean13 = dateTime4.isAfterNow();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime4);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int12 = localDateTime8.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYear((int) '4');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfFloorCopy();
        java.lang.Object obj19 = null;
        boolean boolean20 = property17.equals(obj19);
        org.joda.time.LocalDateTime localDateTime22 = property17.addWrapFieldToCopy(52681525);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) ' ', dateTimeZone1);
        int int3 = dateTime2.getYearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        java.lang.String str10 = interval9.toString();
        org.joda.time.DateTime dateTime11 = interval9.getEnd();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus((org.joda.time.ReadableDuration) duration18);
        boolean boolean21 = interval9.equals((java.lang.Object) duration18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Interval interval27 = interval9.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.months();
        org.joda.time.Period period29 = interval9.toPeriod(periodType28);
        org.joda.time.DateTime dateTime30 = interval9.getStart();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Interval interval35 = interval33.toInterval();
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        boolean boolean37 = interval9.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutableInterval mutableInterval39 = interval35.toMutableInterval();
        boolean boolean40 = interval6.contains((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Period period41 = interval6.toPeriod();
        org.joda.time.Chronology chronology42 = interval6.getChronology();
        org.joda.time.DateTime dateTime43 = interval6.getEnd();
        org.joda.time.Period period45 = org.joda.time.Period.minutes(26197150);
        org.joda.time.Interval interval46 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        boolean boolean48 = interval46.isAfter(1645514507137L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str10, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(interval27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeUtils.getZone(dateTimeZone7);
        java.lang.String str10 = dateTimeZone8.getName((long) ' ');
        java.lang.String str12 = dateTimeZone8.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone8);
        long long16 = dateTimeZone8.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter4.withZone(dateTimeZone8);
        org.joda.time.Chronology chronology19 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.DateTime dateTime29 = dateTime23.toDateTime(chronology27);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter20.withChronology(chronology27);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology27);
        org.joda.time.Period period36 = org.joda.time.Period.days(435);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePeriod) period36, 3291028443775L);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.minuteOfHour();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((-170615L), 1645514365958L, chronology27);
        org.joda.time.DateTimeField dateTimeField41 = chronology27.dayOfMonth();
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-213:00" + "'", str12, "-213:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514153208L + "'", long16 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 5441, 3, 14, 34, 3, 775]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        int int5 = localDate2.getMonthOfYear();
        java.lang.Character[] charArray9 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet10 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet10, charArray9);
        boolean boolean13 = charSet10.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays((int) (byte) 10);
        org.joda.time.Interval interval19 = localDate18.toInterval();
        org.joda.time.LocalDate localDate21 = localDate18.withYear(38270);
        boolean boolean22 = charSet10.contains((java.lang.Object) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int24 = localDate18.get(dateTimeFieldType23);
        int int25 = localDate2.get(dateTimeFieldType23);
        int int26 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate28 = localDate2.withYear(52499944);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate33 = localDate31.plusDays((int) (byte) 10);
        org.joda.time.Interval interval34 = localDate33.toInterval();
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property36 = localDate33.yearOfEra();
        int int37 = localDate33.getDayOfMonth();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfDay();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.lang.String str42 = property39.getAsText(locale40);
        org.joda.time.DateTime dateTime43 = property39.withMinimumValue();
        org.joda.time.DateTime dateTime44 = localDate33.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.Interval interval48 = localDate33.toInterval(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDate2.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Interval interval54 = interval52.toInterval();
        org.joda.time.Interval interval56 = interval54.withStartMillis((long) (short) 1);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTime dateTime58 = interval56.getEnd();
        org.joda.time.DateTime dateTime60 = dateTime58.withYearOfEra(26226876);
        org.joda.time.DateTime dateTime62 = dateTime58.minusDays((int) (short) 0);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime64.getMinuteOfDay();
        org.joda.time.Period period69 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime70 = dateTime64.plus((org.joda.time.ReadablePeriod) period69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime72 = dateTime70.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime73 = dateTime70.toDateTime();
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime70);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 382 + "'", int24 == 382);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 382 + "'", int25 == 382);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 359 + "'", int26 == 359);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "25200000" + "'", str42, "25200000");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 420 + "'", int67 == 420);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 187200035L + "'", long71 == 187200035L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        org.joda.time.DateTime dateTime6 = dateTime0.toDateTime(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.millis();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology4);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate11 = property10.withMaximumValue();
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDate11.isSupported(durationFieldType12);
        int int14 = localDate11.getEra();
        org.joda.time.LocalDate localDate16 = localDate11.withYear(7576734);
        org.joda.time.Interval interval17 = localDate16.toInterval();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.plusWeeks(3);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(20);
        int int13 = dateTime10.getEra();
        int int14 = dateTime10.getDayOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        java.lang.String str3 = calendar1.getCalendarType();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.lang.String str9 = locale8.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withLocale(locale8);
        java.util.Locale locale11 = dateTimeFormatter6.getLocale();
        boolean boolean12 = dateTimeFormatter6.isParser();
        java.util.Locale locale13 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate22 = localDate18.minusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeUtils.getZone(dateTimeZone23);
        java.lang.String str26 = dateTimeZone24.getName((long) ' ');
        org.joda.time.Interval interval27 = localDate18.toInterval(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter16.withZone(dateTimeZone24);
        int int30 = dateTimeZone24.getStandardOffset((long) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter6.withZone(dateTimeZone24);
        java.util.TimeZone timeZone32 = dateTimeZone24.toTimeZone();
        calendar1.setTimeZone(timeZone32);
        java.lang.String str34 = timeZone32.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514516118,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=56,MILLISECOND=118,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514516118L + "'", long2 == 1645514516118L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-213:00" + "'", str26, "-213:00");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-766800000) + "'", int30 == (-766800000));
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT-E3:00");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT-E3:00" + "'", str34, "GMT-E3:00");
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime5 = property3.addWrapFieldToCopy(52682759);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        date1.setDate(619);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Wed Aug 11 00:00:00 GMT 1971");
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 1, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField26.getMaximumValue(readablePartial40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusYears(26151451);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        int int50 = period48.getValue(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        int int61 = period60.size();
        int int62 = period60.getMinutes();
        int[] intArray63 = period60.getValues();
        int int64 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray63);
        int[] intArray66 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDateTime15, 6, intArray63, 0);
        java.util.Calendar.Builder builder67 = builder0.setFields(intArray66);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId70 = timeZone69.toZoneId();
        java.util.Calendar.Builder builder71 = builder67.setTimeZone(timeZone69);
        java.util.Locale locale72 = java.util.Locale.PRC;
        java.lang.String str73 = locale72.getDisplayScript();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Chronology chronology75 = org.joda.time.DateTimeUtils.getChronology(chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.hourOfHalfday();
        int int78 = dateTimeField76.getLeapAmount((long) 26151451);
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int81 = dateTimeField76.getMaximumShortTextLength(locale80);
        java.lang.String str82 = locale72.getDisplayCountry(locale80);
        java.lang.String str83 = locale72.getISO3Language();
        java.util.Calendar.Builder builder84 = builder67.setLocale(locale72);
        java.util.Set<java.lang.String> strSet85 = locale72.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 420 + "'", int20 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 69 + "'", int21 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25 + "'", int22 == 25);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "China" + "'", str82, "China");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "zho" + "'", str83, "zho");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strSet85);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        int int12 = dateTimeField11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime15, (int) (short) 1, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = locale23.getDisplayLanguage(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone1, locale25);
        calendar27.clear();
        calendar27.set(26153475, 586, 991, 26161182, 0, 32769);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = calendar27.getActualMinimum(459);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 459");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1439 + "'", int12 == 1439);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587" + "'", str26, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=26153475,MONTH=586,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=991,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=26161182,MINUTE=0,SECOND=32769,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        int int15 = period14.size();
        int int16 = period14.getMinutes();
        int[] intArray17 = period14.getValues();
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        org.joda.time.LocalTime localTime20 = localTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-1), chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period30 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        boolean boolean32 = period25.isSupported(durationFieldType31);
        org.joda.time.Period period34 = period25.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime35 = localTime8.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalTime localTime37 = localTime8.plusSeconds(26160257);
        java.util.Date date43 = new java.util.Date(26151451, 721, 16, (int) (byte) 100, 2782);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromDateFields(date43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        int int49 = dateTime45.getYearOfCentury();
        int int50 = dateTime45.getDayOfMonth();
        org.joda.time.DateTime dateTime52 = dateTime45.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property53 = dateTime52.minuteOfDay();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime54.getMinuteOfDay();
        int int58 = dateTime54.getYearOfCentury();
        int int59 = dateTime54.getDayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime54.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        int int64 = dateTimeField63.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusWeeks((int) (byte) 10);
        org.joda.time.Period period69 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Duration duration71 = period69.toDurationFrom(readableInstant70);
        long long72 = duration71.getMillis();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.plus((org.joda.time.ReadableDuration) duration71);
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str76 = dateTimeField63.getAsText((org.joda.time.ReadablePartial) localDateTime67, (int) (short) 1, locale75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime67.withYear(26151451);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime78.withField(dateTimeFieldType79, (int) '#');
        org.joda.time.DateTime dateTime83 = dateTime52.withField(dateTimeFieldType79, 100);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime44.withField(dateTimeFieldType79, 26184703);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property86 = localTime37.property(dateTimeFieldType79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Fri Feb 22 02:22:00 GMT 26153411");
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 420 + "'", int48 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 69 + "'", int49 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 25 + "'", int50 == 25);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 420 + "'", int57 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 69 + "'", int58 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 25 + "'", int59 == 25);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1439 + "'", int64 == 1439);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 35L + "'", long72 == 35L);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval28.withPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = interval28.toPeriod();
        boolean boolean35 = interval28.isBefore((long) 500);
        boolean boolean36 = interval28.isBeforeNow();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.addCopy(122);
        org.joda.time.LocalTime localTime10 = property5.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime12 = property5.addCopy(983);
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalTime.Property property14 = localTime12.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology16);
        int int18 = localTime17.getSecondOfMinute();
        org.joda.time.LocalTime.Property property19 = localTime17.minuteOfHour();
        org.joda.time.LocalTime localTime20 = property19.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property19.getFieldType();
        org.joda.time.LocalTime localTime22 = property19.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.Period period27 = period26.negated();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (-1), chronology29);
        org.joda.time.Period period31 = period30.toPeriod();
        org.joda.time.Period period32 = period27.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.days();
        org.joda.time.Period period36 = period34.normalizedStandard(periodType35);
        boolean boolean38 = periodType35.equals((java.lang.Object) 6);
        org.joda.time.Period period39 = period32.normalizedStandard(periodType35);
        boolean boolean41 = periodType35.equals((java.lang.Object) "2022-02-22T07:16:51.659Z/2022-02-22T07:16:51.659Z");
        java.lang.String str42 = periodType35.getName();
        org.joda.time.PeriodType periodType43 = periodType35.withMonthsRemoved();
        org.joda.time.PeriodType periodType44 = org.joda.time.DateTimeUtils.getPeriodType(periodType35);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime12, (org.joda.time.ReadablePartial) localTime22, periodType35);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfEra(3);
        int int49 = localDateTime48.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.property(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime52 = property51.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks(1439);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withWeekyear(0);
        int int57 = localDateTime52.getEra();
        org.joda.time.LocalDateTime.Property property58 = localDateTime52.secondOfMinute();
        org.joda.time.LocalDateTime.Property property59 = localDateTime52.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime52.minusWeeks(26181277);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusSeconds(21795);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusSeconds(797);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusWeeks(29);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = localTime12.isEqual((org.joda.time.ReadablePartial) localDateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Days" + "'", str42, "Days");
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 359 + "'", int49 == 359);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate0.minusYears((int) '#');
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(10L, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = dateTime13.get(dateTimeFieldType14);
        int int16 = dateTime7.get(dateTimeFieldType14);
        boolean boolean17 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime.Property property18 = dateTime7.weekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeUtils.getZone(dateTimeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone20);
        boolean boolean22 = dateTimeZone20.isFixed();
        org.joda.time.DateMidnight dateMidnight23 = localDate4.toDateMidnight(dateTimeZone20);
        int int24 = dateMidnight23.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 420 + "'", int10 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1969 + "'", int16 == 1969);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.Duration duration7 = mutableInterval6.toDuration();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval6.toMutableInterval();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears(382);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        java.lang.String str17 = dateTimeZone15.getName((long) ' ');
        java.lang.String str18 = dateTimeZone15.toString();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (byte) 0);
        boolean boolean21 = dateTimeZone15.isLocalDateTimeGap(localDateTime20);
        long long23 = dateTimeZone15.convertUTCToLocal(3291028493924L);
        org.joda.time.DateTime dateTime24 = localDateTime9.toDateTime(dateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) mutableInterval8, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableInterval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-213:00" + "'", str17, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-213:00" + "'", str18, "-213:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3290261693924L + "'", long23 == 3290261693924L);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks(1439);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = localDateTime8.getFields();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 359 + "'", int3 == 359);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = dateTimeField2.getAsShortText(26153877, locale8);
        long long11 = dateTimeField2.roundHalfEven((long) 382);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime12.getMinuteOfDay();
        int int16 = dateTime12.getYearOfCentury();
        int int17 = dateTime12.getDayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime12.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        int int22 = dateTimeField21.getMaximumValue();
        java.lang.String str24 = dateTimeField21.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        int int29 = dateTime25.getYearOfCentury();
        int int30 = dateTime25.getDayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime25.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now();
        int int36 = dateTimeField34.getMaximumValue((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str44 = dateTimeField40.getAsShortText(1645514151873L, locale43);
        java.lang.String str45 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime35, 0, locale43);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        int int49 = period47.getValue(0);
        org.joda.time.Period period51 = period47.plusWeeks(1969);
        org.joda.time.LocalTime localTime53 = localTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period47, (int) (byte) 100);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime55, (org.joda.time.ReadablePartial) localTime56, periodType57);
        org.joda.time.Period period60 = period58.minusHours(26155103);
        org.joda.time.Period period61 = period60.toPeriod();
        int[] intArray62 = period60.getValues();
        int[] intArray64 = dateTimeField2.set((org.joda.time.ReadablePartial) localTime53, (int) (byte) 1, intArray62, 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = localTime53.getFieldTypes();
        org.joda.time.Chronology chronology66 = localTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfYear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10" + "'", str6, "10");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26153877" + "'", str9, "26153877");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 420 + "'", int15 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 25 + "'", int17 == 25);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1439 + "'", int22 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "180" + "'", str24, "180");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 420 + "'", int28 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 69 + "'", int29 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 25 + "'", int30 == 25);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1439 + "'", int36 == 1439);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10" + "'", str44, "10");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        boolean boolean9 = charSet4.add((java.lang.Character) '#');
        java.lang.Character[] charArray13 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet14 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet14, charArray13);
        boolean boolean17 = charSet14.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate22 = localDate20.plusDays((int) (byte) 10);
        org.joda.time.Interval interval23 = localDate22.toInterval();
        org.joda.time.LocalDate localDate25 = localDate22.withYear(38270);
        boolean boolean26 = charSet14.contains((java.lang.Object) localDate22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(10L, chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        int int37 = dateTime35.get(dateTimeFieldType36);
        int int38 = dateTime29.get(dateTimeFieldType36);
        boolean boolean39 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property40 = dateTime29.weekyear();
        boolean boolean41 = charSet14.contains((java.lang.Object) property40);
        boolean boolean43 = charSet14.equals((java.lang.Object) 70);
        java.lang.Character[] charArray47 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet48 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet48, charArray47);
        boolean boolean51 = charSet48.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate54 = localDate52.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate56 = localDate54.plusDays((int) (byte) 10);
        org.joda.time.Interval interval57 = localDate56.toInterval();
        org.joda.time.LocalDate localDate59 = localDate56.withYear(38270);
        boolean boolean60 = charSet48.contains((java.lang.Object) localDate56);
        boolean boolean61 = charSet14.removeAll((java.util.Collection<java.lang.Character>) charSet48);
        java.util.Spliterator<java.lang.Character> charSpliterator62 = charSet48.spliterator();
        boolean boolean63 = charSet4.addAll((java.util.Collection<java.lang.Character>) charSet48);
        boolean boolean65 = charSet4.remove((java.lang.Object) 3291028501272L);
        java.util.Spliterator<java.lang.Character> charSpliterator66 = charSet4.spliterator();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 420 + "'", int32 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1969 + "'", int37 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1969 + "'", int38 == 1969);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(charSpliterator66);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        java.lang.String str4 = interval3.toString();
        org.joda.time.DateTime dateTime5 = interval3.getEnd();
        org.joda.time.Chronology chronology6 = interval3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(0L, chronology6);
        org.joda.time.DurationField durationField9 = chronology6.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = durationField9.getMillis(26307);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str4, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = mutableInterval6.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval6.setInterval(26207293L, (long) 4044);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime9.era();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        boolean boolean32 = dateTime31.isEqualNow();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime9.dayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime9.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("zh-CN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withFieldAdded(durationFieldType3, 1970);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Interval interval12 = interval10.toInterval();
        long long13 = interval10.getEndMillis();
        java.lang.String str14 = interval10.toString();
        org.joda.time.DateTime dateTime15 = interval10.getStart();
        org.joda.time.Chronology chronology16 = interval10.getChronology();
        org.joda.time.Period period17 = new org.joda.time.Period(0L, 1645514152681L, chronology16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDateTime25.getFieldType((int) (short) 1);
        int int28 = localDateTime24.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        int int35 = period33.getValue(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime43 = dateTime37.withDurationAdded((long) 453, 436);
        org.joda.time.Chronology chronology44 = dateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType27.getField(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfDay();
        java.lang.String str47 = chronology44.toString();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(2787L, chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.weekyearOfCentury();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(10L, chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        int int55 = dateTime53.get(dateTimeFieldType54);
        org.joda.time.Period period57 = new org.joda.time.Period((long) '#');
        int int59 = period57.getValue(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration63 = period57.toDurationTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDateTime localDateTime65 = dateTime53.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMinutes(26228346);
        int int68 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localDateTime65);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 187200000L + "'", long13 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str14, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[-213:00]" + "'", str47, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1969 + "'", int55 == 1969);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 99 + "'", int68 == 99);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.Chronology chronology5 = interval2.getChronology();
        org.joda.time.DateTime dateTime6 = interval2.getStart();
        org.joda.time.DateTime dateTime8 = dateTime6.minusSeconds(26213693);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 1, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField26.getMaximumValue(readablePartial40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusYears(26151451);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        int int50 = period48.getValue(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        int int61 = period60.size();
        int int62 = period60.getMinutes();
        int[] intArray63 = period60.getValues();
        int int64 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray63);
        int[] intArray66 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDateTime15, 6, intArray63, 0);
        java.util.Calendar.Builder builder67 = builder0.setFields(intArray66);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId70 = timeZone69.toZoneId();
        java.util.Calendar.Builder builder71 = builder67.setTimeZone(timeZone69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder74 = builder67.set(479, 26228534);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 420 + "'", int20 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 69 + "'", int21 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 25 + "'", int22 == 25);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        int int11 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime2.plusHours(3);
        int int14 = dateTime13.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime13.minusMinutes(534);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 359 + "'", int14 == 359);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone21.getName((long) ' ');
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        int int31 = dateTimeField29.getLeapAmount((long) 26151451);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int34 = dateTimeField29.getMaximumShortTextLength(locale33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        int int42 = dateTime38.getYearOfCentury();
        int int43 = dateTime38.getDayOfMonth();
        org.joda.time.DateTime dateTime45 = dateTime38.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        int int48 = dateTimeField47.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks((int) (byte) 10);
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = period53.toDurationFrom(readableInstant54);
        long long56 = duration55.getMillis();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plus((org.joda.time.ReadableDuration) duration55);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime51, (int) (short) 1, locale59);
        int int61 = dateTimeField37.getMaximumTextLength(locale59);
        java.lang.String str62 = locale33.getDisplayLanguage(locale59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime66.getMinuteOfDay();
        int int70 = dateTime66.getYearOfCentury();
        int int71 = dateTime66.getDayOfMonth();
        org.joda.time.DateTime dateTime73 = dateTime66.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField75 = property74.getField();
        int int76 = dateTimeField75.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusWeeks((int) (byte) 10);
        org.joda.time.Period period81 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Duration duration83 = period81.toDurationFrom(readableInstant82);
        long long84 = duration83.getMillis();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime79.plus((org.joda.time.ReadableDuration) duration83);
        java.util.Locale locale87 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str88 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime79, (int) (short) 1, locale87);
        int int89 = dateTimeField65.getMaximumTextLength(locale87);
        java.lang.String str90 = locale33.getDisplayLanguage(locale87);
        java.util.Calendar calendar91 = dateTime24.toCalendar(locale33);
        calendar91.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            calendar91.clear(52505);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52505");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-213:00" + "'", str23, "-213:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 420 + "'", int41 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 69 + "'", int42 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 25 + "'", int43 == 25);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1439 + "'", int48 == 1439);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 35L + "'", long56 == 35L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 420 + "'", int69 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 69 + "'", int70 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 25 + "'", int71 == 25);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1439 + "'", int76 == 1439);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 35L + "'", long84 == 35L);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=792000000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology1);
        int int3 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime5 = localTime2.minusMinutes(2022);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay(3593555);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        int int20 = dateTime16.getYearOfCentury();
        int int21 = dateTime16.getDayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime16.minusWeeks((int) (short) 0);
        boolean boolean24 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime26 = dateTime14.minusMillis(26153371);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration28 = period27.toStandardDuration();
        org.joda.time.Seconds seconds29 = period27.toStandardSeconds();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 420 + "'", int19 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69 + "'", int20 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 25 + "'", int21 == 25);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.joda.time.Period period1 = org.joda.time.Period.millis(814);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusDays(12);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.minus(100L);
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        int int18 = dateTime14.getYearOfCentury();
        int int19 = dateTime14.getDayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime14.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfDay();
        int int23 = dateTime21.getYear();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime26 = localTime24.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.LocalTime localTime28 = localTime26.withFields(readablePartial27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology30);
        int int32 = localTime31.getSecondOfMinute();
        org.joda.time.Period period33 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime26, (org.joda.time.ReadablePartial) localTime31);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Period period35 = period33.plus(readablePeriod34);
        org.joda.time.DateTime dateTime36 = dateTime21.minus((org.joda.time.ReadablePeriod) period33);
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime12.minusMillis(26227837);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration41 = new org.joda.time.Duration((java.lang.Object) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 420 + "'", int17 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 25 + "'", int19 == 25);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1969 + "'", int23 == 1969);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 206, 1099);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 206 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.text.DateFormatSymbols dateFormatSymbols1 = java.text.DateFormatSymbols.getInstance(locale0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) 10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        java.lang.String str17 = property14.getAsText(locale15);
        org.joda.time.DateTime dateTime19 = property14.setCopy((int) '#');
        boolean boolean20 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime12.withWeekyear(2);
        boolean boolean23 = dateFormatSymbols1.equals((java.lang.Object) 2);
        dateFormatSymbols1.setLocalPatternChars("2022-02-22T07:16:40.534Z/2022-02-22T07:16:40.534Z");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateFormatSymbols1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "25200000" + "'", str17, "25200000");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:01.326Z");
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = timeZone1.getDisplayName(locale2);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)" + "'", str3, "\u610f\u5927\u5229\u6587\u610f\u5927\u5229)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Ora media di Greenwich" + "'", str4, "Ora media di Greenwich");
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        int int11 = dateTime2.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime2.minus(22560257L);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(35);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(19045);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundCeilingCopy();
        java.lang.String str6 = property3.getAsString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1969" + "'", str6, "1969");
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        java.lang.Object obj1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period(obj1, chronology13);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) 26178, chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.secondOfMinute();
        long long20 = dateTimeField17.add(3291028684865L, 1645514197437L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1648805226121865L + "'", long20 == 1648805226121865L);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Weeks weeks2 = period1.toStandardWeeks();
        int int3 = period1.size();
        org.joda.time.Period period4 = period1.toPeriod();
        org.joda.time.Weeks weeks5 = period4.toStandardWeeks();
        org.junit.Assert.assertNotNull(weeks2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(weeks5);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-22T07:16:45.597Z/2022-02-22T07:16:45.597Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:16:45.597Z/2022-02...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval6 = localDate2.toInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = interval9.isAfter((long) 10);
        org.joda.time.Duration duration12 = interval9.toDuration();
        org.joda.time.Duration duration15 = duration12.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime16.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period24 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16, periodType23);
        org.joda.time.Period period25 = interval6.toPeriod(periodType23);
        org.joda.time.format.PeriodFormatter periodFormatter26 = null;
        java.lang.String str27 = period25.toString(periodFormatter26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = period25.minusMonths(61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 420 + "'", int19 == 420);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P1D" + "'", str27, "P1D");
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.withMinimumValue();
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = chronology10.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[-213:00]" + "'", str12, "ISOChronology[-213:00]");
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime4 = dateTime0.minusDays(12);
        org.joda.time.DateTime dateTime6 = dateTime4.minusYears(382);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(3);
        int int11 = localDateTime10.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(1439);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withWeekyear(0);
        int int19 = localDateTime14.getEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.DateTime.Property property22 = dateTime6.property(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DurationField durationField27 = durationFieldType23.getField(chronology25);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(chronology36);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, (long) ' ', periodType31, chronology36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra(2);
        long long45 = chronology36.set((org.joda.time.ReadablePartial) localDateTime41, (long) (short) 10);
        org.joda.time.DurationField durationField46 = chronology36.seconds();
        org.joda.time.DateTimeField dateTimeField47 = chronology36.millisOfDay();
        boolean boolean48 = durationFieldType23.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField49 = chronology36.hourOfHalfday();
        org.joda.time.DateTime dateTime50 = dateTime6.withChronology(chronology36);
        int int51 = dateTime50.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 359 + "'", int11 == 359);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 187200000L + "'", long45 == 187200000L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 15 + "'", int51 == 15);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) ' ');
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours(5956623);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = localTime6.withSecondOfMinute(6015213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6015213 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-213:00" + "'", str3, "-213:00");
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        long long6 = calendar5.getTimeInMillis();
        int int8 = calendar5.getGreatestMinimum(6);
        int int9 = calendar5.getWeekYear();
        int int10 = calendar5.getWeeksInWeekYear();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromCalendarFields(calendar5);
        org.joda.time.LocalDate.Property property12 = localDate11.weekyear();
        long long14 = chronology3.set((org.joda.time.ReadablePartial) localDate11, 1645514161529L);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology3.getDateTimeMillis(975, 435, 101, 292277093);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292277093 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514517384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=57,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514517384L + "'", long6 == 1645514517384L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1646291761529L + "'", long14 == 1646291761529L);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = localDateTime0.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(26151451);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period6, 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(26151451);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        int int7 = dateTime0.getSecondOfMinute();
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = period14.toDurationFrom(readableInstant15);
        long long17 = duration16.getMillis();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plus((org.joda.time.ReadableDuration) duration16);
        mutableInterval9.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = mutableInterval9.toDuration();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks((int) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        long long28 = duration27.getMillis();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plus((org.joda.time.ReadableDuration) duration27);
        long long30 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration27);
        boolean boolean31 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime34 = dateTime8.withYear(0);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 35L + "'", long28 == 35L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 35L + "'", long30 == 35L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(7);
        org.joda.time.DateTime dateTime16 = dateTime12.withMinuteOfHour((int) (short) 10);
        org.joda.time.LocalDate localDate17 = dateTime12.toLocalDate();
        boolean boolean18 = languageRange1.equals((java.lang.Object) dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        org.joda.time.Interval interval13 = localDate4.toInterval(dateTimeZone10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withZone(dateTimeZone10);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter14.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter14.getParser();
        org.joda.time.Chronology chronology17 = dateTimeFormatter14.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter14.withDefaultYear(2787);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronolgy();
        java.lang.StringBuffer stringBuffer21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear(1);
        org.joda.time.LocalDate.Property property25 = localDate22.year();
        org.joda.time.LocalDate localDate27 = property25.addToCopy(2787);
        org.joda.time.tz.NameProvider nameProvider28 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale29 = java.util.Locale.KOREA;
        java.lang.String str32 = nameProvider28.getShortName(locale29, "JPN", "2049-08-28T19:19:20.261Z");
        java.lang.String str33 = property25.getAsText(locale29);
        int int34 = property25.getMaximumValue();
        java.lang.String str35 = property25.getName();
        org.joda.time.LocalDate localDate36 = property25.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(stringBuffer21, (org.joda.time.ReadablePartial) localDate36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-213:00" + "'", str12, "-213:00");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(nameProvider28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko_KR");
        org.junit.Assert.assertNull(str32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969" + "'", str33, "1969");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "year" + "'", str35, "year");
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis(11);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(16830719L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardMinutes((long) 54);
        org.joda.time.Duration duration13 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.Period period18 = duration13.toPeriod(chronology15);
        boolean boolean19 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = duration11.plus(0L);
        org.joda.time.DateTime dateTime22 = dateTime9.minus((org.joda.time.ReadableDuration) duration11);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "25200000" + "'", str4, "25200000");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate11 = localDate7.minusYears((int) '#');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(10L, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = dateTime20.get(dateTimeFieldType21);
        int int23 = dateTime14.get(dateTimeFieldType21);
        boolean boolean24 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property25 = dateTime14.weekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeUtils.getZone(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) dateTime14, dateTimeZone27);
        boolean boolean29 = dateTimeZone27.isFixed();
        org.joda.time.DateMidnight dateMidnight30 = localDate11.toDateMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(3240000L, dateTimeZone27);
        long long33 = dateTimeZone27.nextTransition(3291028504132L);
        org.joda.time.DateTime dateTime34 = localDate5.toDateTimeAtStartOfDay(dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = localDate5.withYearOfCentury(451);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 451 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 420 + "'", int17 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1969 + "'", int22 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1969 + "'", int23 == 1969);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3291028504132L + "'", long33 == 3291028504132L);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date2 = calendar1.getTime();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = calendar1.isSet(280);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514517527,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=57,MILLISECOND=527,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Feb 22 07:21:57 GMT 2022");
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.DurationField durationField25 = property24.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = new org.joda.time.Period((java.lang.Object) property24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        java.util.Date date6 = dateTime2.toDate();
        java.time.Instant instant7 = date6.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        java.util.Date date9 = java.util.Date.from(instant7);
        java.lang.String str10 = date9.toGMTString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str10, "1 Jan 1970 00:00:00 GMT");
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        int int5 = dateTime3.getDayOfYear();
        org.joda.time.DateTime dateTime6 = dateTime3.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 359 + "'", int5 == 359);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-1), chronology1);
        org.joda.time.Period period3 = period2.toPeriod();
        int int4 = period3.size();
        int int5 = period3.getMinutes();
        int[] intArray6 = period3.getValues();
        java.lang.String str7 = period3.toString();
        org.joda.time.Period period9 = period3.plusSeconds(122);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.days();
        org.joda.time.Period period17 = period15.normalizedStandard(periodType16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.days();
        org.joda.time.Period period21 = period19.normalizedStandard(periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.hours();
        int int23 = periodType20.indexOf(durationFieldType22);
        boolean boolean24 = periodType16.isSupported(durationFieldType22);
        int int25 = periodType12.indexOf(durationFieldType22);
        int int26 = periodType11.indexOf(durationFieldType22);
        boolean boolean27 = period9.isSupported(durationFieldType22);
        int int28 = period9.getDays();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.001S" + "'", str7, "PT0.001S");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet8);
        java.lang.String str10 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strList9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime13.getMinuteOfDay();
        int int17 = dateTime13.getYearOfCentury();
        int int18 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime13.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str25 = locale24.getDisplayName();
        java.util.Locale locale26 = locale24.stripExtensions();
        int int27 = dateTimeField22.getMaximumShortTextLength(locale24);
        java.util.Set<java.lang.String> strSet28 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Set<java.lang.String> strSet35 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strSet35);
        java.util.Collection<java.util.Locale> localeCollection37 = null;
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, localeCollection37, filteringMode38);
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, localeCollection37);
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.lang.String str42 = locale41.getDisplayScript();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfHalfday();
        int int47 = dateTimeField45.getLeapAmount((long) 26151451);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int50 = dateTimeField45.getMaximumShortTextLength(locale49);
        java.lang.String str51 = locale41.getDisplayCountry(locale49);
        java.lang.String str52 = locale41.toLanguageTag();
        java.util.Set<java.lang.String> strSet53 = locale41.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Set<java.lang.String> strSet58 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Set<java.lang.String> strSet63 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strSet63);
        java.util.Collection<java.util.Locale> localeCollection65 = null;
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, localeCollection65, filteringMode66);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Set<java.lang.String> strSet75 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.lang.String>) strSet75);
        java.util.Collection<java.util.Locale> localeCollection77 = null;
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, localeCollection77, filteringMode78);
        java.util.Locale locale80 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, localeCollection77);
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.util.Set<java.lang.String> strSet84 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strSet84);
        java.util.Collection<java.util.Locale> localeCollection86 = null;
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, localeCollection86, filteringMode87);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList88, filteringMode89);
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList67, filteringMode89);
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet28, filteringMode89);
        java.util.Locale locale93 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols94 = new java.text.DateFormatSymbols(locale93);
        boolean boolean95 = locale93.hasExtensions();
        java.lang.String str96 = locale93.getDisplayScript();
        java.util.Set<java.lang.String> strSet97 = locale93.getUnicodeLocaleKeys();
        java.lang.String str98 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet97);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(languageRangeList12);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 420 + "'", int16 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 69 + "'", int17 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 25 + "'", int18 == 25);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode38.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "China" + "'", str51, "China");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh-CN" + "'", str52, "zh-CN");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode78.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNull(locale80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode87.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(locale93);
// flaky:         org.junit.Assert.assertEquals(locale93.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Collection<java.util.Locale> localeCollection6 = null;
        java.util.Locale.FilteringMode filteringMode7 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList8 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, localeCollection6, filteringMode7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Collection<java.util.Locale> localeCollection16 = null;
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, localeCollection16, filteringMode17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Set<java.lang.String> strSet26 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Set<java.lang.String> strSet31 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet31);
        java.util.Collection<java.util.Locale> localeCollection33 = null;
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, localeCollection33, filteringMode34);
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale locale37 = java.util.Locale.lookup(languageRangeList20, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.Locale locale38 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList36);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Set<java.lang.String> strSet45 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strSet45);
        java.util.Collection<java.util.Locale> localeCollection47 = null;
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, localeCollection47, filteringMode48);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, localeCollection47);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Set<java.lang.String> strSet54 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strSet54);
        java.util.Collection<java.util.Locale> localeCollection56 = null;
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList58 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, localeCollection56, filteringMode57);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList58, filteringMode59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.millisOfDay();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        int int66 = dateTime63.getMinuteOfDay();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(10L, chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        int int71 = dateTime69.get(dateTimeFieldType70);
        int int72 = dateTime63.get(dateTimeFieldType70);
        boolean boolean73 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime.Property property74 = dateTime63.weekyear();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeUtils.getZone(dateTimeZone75);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) dateTime63, dateTimeZone76);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(10L, chronology79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.weekyear();
        int int82 = dateTime80.get(dateTimeFieldType81);
        org.joda.time.DateMidnight dateMidnight83 = dateTime80.toDateMidnight();
        org.joda.time.DateTime dateTime84 = localDate77.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        int int85 = localDate77.getDayOfWeek();
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean87 = localDate77.equals((java.lang.Object) filteringMode86);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList58, filteringMode86);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + filteringMode7 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode7.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode57.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertNotNull(property62);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 420 + "'", int66 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1969 + "'", int71 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1969 + "'", int72 == 1969);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1969 + "'", int82 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode86.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localeList88);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy(7);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDate localDate8 = property3.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate9 = property3.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate9.withEra(914);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 914 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        java.util.Locale locale9 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronolgy();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeUtils.getZone(dateTimeZone19);
        java.lang.String str22 = dateTimeZone20.getName((long) ' ');
        org.joda.time.Interval interval23 = localDate14.toInterval(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter12.withZone(dateTimeZone20);
        int int26 = dateTimeZone20.getStandardOffset((long) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone20);
        java.util.TimeZone timeZone28 = dateTimeZone20.toTimeZone();
        boolean boolean29 = timeZone28.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone28);
        int int31 = timeZone28.getDSTSavings();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-213:00" + "'", str22, "-213:00");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-766800000) + "'", int26 == (-766800000));
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT-E3:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.withDayOfWeek(1);
        int int20 = localDateTime4.getYearOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy((long) 914);
        int int24 = localDateTime23.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfCeilingCopy();
        int int27 = property25.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3939 + "'", int20 == 3939);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 57 + "'", int24 == 57);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property11 = dateTime0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.DateTime dateTime13 = property11.roundFloorCopy();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 420 + "'", int5 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69 + "'", int6 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25 + "'", int7 == 25);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = dateTimeField9.toString();
        long long13 = dateTimeField9.addWrapField((long) 14, 26161182);
        java.util.Locale locale17 = new java.util.Locale("2022-02-22T07:16:06.916Z/2022-02-22T07:16:06.916Z", "millisOfDay");
        java.lang.String str18 = dateTimeField9.getAsShortText(366, locale17);
        long long21 = dateTimeField9.addWrapField((long) (-737372), 976);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str10, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 42120014L + "'", long13 == 42120014L);
        org.junit.Assert.assertEquals(locale17.toString(), "2022-02-22t07:16:06.916z/2022-02-22t07:16:06.916z_MILLISOFDAY");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "366" + "'", str18, "366");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 57822628L + "'", long21 == 57822628L);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        java.lang.String str6 = interval2.toString();
        org.joda.time.DateTime dateTime7 = interval2.getStart();
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfWeek();
        int int11 = dateTime9.getMillisOfSecond();
        org.joda.time.DateTime dateTime13 = dateTime9.plusMillis(123);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime9.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 187200000L + "'", long5 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str6, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 15334917);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology1);
        int int3 = localTime2.getSecondOfMinute();
        int int4 = localTime2.getMillisOfSecond();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        boolean boolean11 = localTime5.isSupported(dateTimeFieldType9);
        org.joda.time.LocalTime.Property property12 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMaximumValue();
        org.joda.time.LocalTime localTime15 = localTime13.minusSeconds(2782);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (-1), chronology17);
        org.joda.time.Period period19 = period18.toPeriod();
        int int20 = period19.size();
        int int21 = period19.getMinutes();
        int[] intArray22 = period19.getValues();
        org.joda.time.Duration duration23 = period19.toStandardDuration();
        org.joda.time.LocalTime localTime25 = localTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 0);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime26, (org.joda.time.ReadablePartial) localTime27, periodType28);
        org.joda.time.Period period30 = period29.negated();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (-1), chronology32);
        org.joda.time.Period period34 = period33.toPeriod();
        org.joda.time.Period period35 = period30.withFields((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.hours();
        boolean boolean37 = period30.isSupported(durationFieldType36);
        org.joda.time.Period period39 = period30.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime40 = localTime13.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.LocalTime localTime42 = localTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 814);
        int int43 = localTime42.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.joda.time.Period period8 = new org.joda.time.Period(10074, 10022, 0, 86399, 62365, 24, 0, 50399);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(980589L);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMillis(33);
        org.joda.time.DateTime dateTime5 = dateTime1.minusWeeks(90);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        java.lang.String str9 = interval8.toString();
        org.joda.time.DateTime dateTime10 = interval8.getEnd();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        boolean boolean20 = interval8.equals((java.lang.Object) duration17);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) 32772, (int) (byte) 10);
        long long29 = duration28.getStandardSeconds();
        int int30 = duration17.compareTo((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period32 = org.joda.time.Period.months(755);
        org.joda.time.Period period34 = period32.minusWeeks(19);
        org.joda.time.PeriodType periodType35 = period32.getPeriodType();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration17, periodType35);
        org.joda.time.Period period38 = period36.multipliedBy(574);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str9, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 327L + "'", long29 == 327L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period4 = period3.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (-1), chronology6);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Period period9 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.minusDays(12);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(382);
        org.joda.time.Duration duration17 = period7.toDurationTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutablePeriod mutablePeriod18 = period7.toMutablePeriod();
        org.joda.time.PeriodType periodType19 = period7.getPeriodType();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.getLocalTime();
        int int9 = property7.getLeapAmount();
        org.joda.time.LocalTime localTime11 = property7.addNoWrapToCopy((int) 'x');
        org.joda.time.LocalTime localTime13 = localTime11.plusMinutes(348);
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(76181);
        org.joda.time.DateTime dateTime16 = localTime13.toDateTimeToday();
        java.lang.String str17 = dateTime16.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969-12-25T14:48:00.000-213:00" + "'", str17, "1969-12-25T14:48:00.000-213:00");
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate0.minusYears((int) '#');
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        int int8 = periodType6.indexOf(durationFieldType7);
        org.joda.time.LocalDate localDate10 = localDate4.withFieldAdded(durationFieldType7, 156);
        org.joda.time.DateTime dateTime11 = localDate4.toDateTimeAtMidnight();
        java.lang.String str12 = localDate4.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1934-12-25" + "'", str12, "1934-12-25");
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        org.joda.time.DateTime dateTime6 = dateTime0.toDateTime(chronology4);
        org.joda.time.DateTime.Property property7 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime9 = dateTime0.plusMonths(38);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withFieldAdded(durationFieldType12, 1970);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Interval interval21 = interval19.toInterval();
        long long22 = interval19.getEndMillis();
        java.lang.String str23 = interval19.toString();
        org.joda.time.DateTime dateTime24 = interval19.getStart();
        org.joda.time.Chronology chronology25 = interval19.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period(0L, 1645514152681L, chronology25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMonths((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = localDateTime27.getFieldTypes();
        int int31 = localDateTime27.getMonthOfYear();
        org.joda.time.DateTime dateTime32 = dateTime9.withFields((org.joda.time.ReadablePartial) localDateTime27);
        int int33 = localDateTime27.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int35 = localDateTime27.get(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 187200000L + "'", long22 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str23, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 87 + "'", int35 == 87);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(100);
        int int3 = localDate0.getMonthOfYear();
        boolean boolean4 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate0);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths(986);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate0.withCenturyOfEra(26184703);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26184703 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = dateTimeField2.getAsShortText(26153877, locale8);
        long long11 = dateTimeField2.roundHalfEven((long) 382);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField2.getType();
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.lang.String str15 = dateTimeField2.getAsText(3291028678749L, locale14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusYears(382);
        int int21 = localDateTime20.getCenturyOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology26 = dateTimeFormatter25.getChronolgy();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale27.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withLocale(locale27);
        java.util.Locale locale30 = dateTimeFormatter25.getLocale();
        boolean boolean31 = dateTimeFormatter25.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter25.withZoneUTC();
        boolean boolean33 = dateTimeFormatter25.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 86);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        int int42 = dateTime38.getYearOfCentury();
        int int43 = dateTime38.getDayOfMonth();
        org.joda.time.DateTime dateTime45 = dateTime38.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        int int48 = dateTimeField47.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks((int) (byte) 10);
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = period53.toDurationFrom(readableInstant54);
        long long56 = duration55.getMillis();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plus((org.joda.time.ReadableDuration) duration55);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime51, (int) (short) 1, locale59);
        int int61 = property37.getMaximumTextLength(locale59);
        java.util.Locale locale65 = new java.util.Locale("2022-02-22T07:16:52.575Z/2022-02-22T07:16:52.575Z", "zho", "2022-02-22T07:16:17.812Z/2022-02-22T07:16:17.812Z");
        java.lang.String str66 = locale59.getDisplayVariant(locale65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter35.withLocale(locale59);
        java.lang.String str68 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime20, 242, locale59);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime20.minusMinutes((-210));
        org.joda.time.LocalDateTime localDateTime72 = localDateTime20.minusDays(5876009);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10" + "'", str6, "10");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26153877" + "'", str9, "26153877");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "5" + "'", str15, "5");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 420 + "'", int41 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 69 + "'", int42 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 25 + "'", int43 == 25);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1439 + "'", int48 == 1439);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 35L + "'", long56 == 35L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertEquals(locale65.toString(), "2022-02-22t07:16:52.575z/2022-02-22t07:16:52.575z_ZHO_2022-02-22T07:16:17.812Z/2022-02-22T07:16:17.812Z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "242" + "'", str68, "242");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology1);
        int int3 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime5 = localTime2.minusMinutes(2022);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfDay();
        org.joda.time.LocalTime localTime8 = property6.addCopy((long) 19);
        org.joda.time.LocalTime localTime9 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Interval interval15 = interval13.toInterval();
        long long16 = interval13.getEndMillis();
        java.lang.String str17 = interval13.toString();
        org.joda.time.DateTime dateTime18 = interval13.getStart();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeUtils.getZone(dateTimeZone19);
        java.lang.String str22 = dateTimeZone20.getName((long) ' ');
        java.lang.String str24 = dateTimeZone20.getName((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(1645514182943L, dateTimeZone20);
        int int27 = dateTime26.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = property6.getDifference((org.joda.time.ReadableInstant) dateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1645462702908");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 187200000L + "'", long16 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str17, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-213:00" + "'", str22, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-213:00" + "'", str24, "-213:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate6 = property3.addToCopy(89);
        org.joda.time.LocalDate localDate8 = property3.setCopy(365);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.joda.time.Period period1 = org.joda.time.Period.hours(54);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        java.util.Date date5 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int6 = date5.getYear();
        int int7 = date5.getDay();
        java.lang.String str8 = date5.toString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 30 08:14:00 GMT-E3:00 4682");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2782 + "'", int6 == 2782);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Sat Dec 30 08:14:00 GMT-E3:00 4682" + "'", str8, "Sat Dec 30 08:14:00 GMT-E3:00 4682");
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        java.util.Locale locale2 = new java.util.Locale("2074-04-15T14:33:57.804Z/2074-04-15T14:33:57.804Z", "2074-04-15T14:37:48.121Z/2074-04-15T14:37:48.121Z");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "2074-04-15t14:33:57.804z/2074-04-15t14:33:57.804z_2074-04-15T14:37:48.121Z/2074-04-15T14:37:48.121Z");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514518505,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=58,MILLISECOND=505,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks(1439);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withWeekyear(0);
        int int11 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((-2720));
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 359 + "'", int3 == 359);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (byte) -1, 100, 26167, (int) (byte) 10, (int) (byte) 0, 26178719, 26171, 26201588);
        org.joda.time.Period period10 = period8.minusDays(0);
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = period8.toString(periodFormatter11);
        org.joda.time.Period period14 = period8.plusMillis(0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P-1Y100M26167W10DT26178719M52372.588S" + "'", str12, "P-1Y100M26167W10DT26178719M52372.588S");
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime11.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusYears(26151451);
        boolean boolean16 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (byte) 10);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = duration23.minus((long) 38222);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime10.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTime dateTime34 = dateTime29.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeUtils.getZone(dateTimeZone35);
        java.lang.String str38 = dateTimeZone36.getName((long) ' ');
        java.lang.String str40 = dateTimeZone36.getName((long) (short) -1);
        org.joda.time.DateTime dateTime41 = dateTime34.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(0);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime51 = dateTime45.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime45, chronology52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.millisOfDay();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime56.getMinuteOfDay();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(10L, chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        int int64 = dateTime62.get(dateTimeFieldType63);
        int int65 = dateTime56.get(dateTimeFieldType63);
        boolean boolean66 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime56);
        int int67 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime45.toMutableDateTime(dateTimeZone68);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime44, (org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusWeeks((int) (byte) 10);
        org.joda.time.Period period75 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Duration duration77 = period75.toDurationFrom(readableInstant76);
        long long78 = duration77.getMillis();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.plus((org.joda.time.ReadableDuration) duration77);
        long long80 = duration77.getMillis();
        java.lang.String str81 = duration77.toString();
        org.joda.time.Period period83 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Duration duration85 = period83.toDurationFrom(readableInstant84);
        org.joda.time.Seconds seconds86 = duration85.toStandardSeconds();
        long long87 = duration85.getStandardSeconds();
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.Duration duration89 = duration85.minus(readableDuration88);
        boolean boolean90 = duration77.isShorterThan((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Duration duration92 = duration70.withDurationAdded((org.joda.time.ReadableDuration) duration85, 155);
        boolean boolean93 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Duration duration95 = org.joda.time.Duration.standardSeconds((long) 16);
        org.joda.time.Duration duration96 = duration85.minus((org.joda.time.ReadableDuration) duration95);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 420 + "'", int32 == 420);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-213:00" + "'", str38, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-213:00" + "'", str40, "-213:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 420 + "'", int48 == 420);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 420 + "'", int59 == 420);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1969 + "'", int64 == 1969);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1969 + "'", int65 == 1969);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 35L + "'", long78 == 35L);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 35L + "'", long80 == 35L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT0.035S" + "'", str81, "PT0.035S");
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(seconds86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(duration96);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(3291028813394L, (long) 26184703);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        java.lang.String str6 = interval2.toString();
        org.joda.time.DateTime dateTime7 = interval2.getStart();
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) (byte) 1);
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        int int11 = property10.getMaximumValue();
        org.joda.time.DateTime dateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 187200000L + "'", long5 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str6, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514165763L);
        java.util.Date date2 = instant1.toDate();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime3.minusDays(12);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(382);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.LocalTime localTime14 = localTime12.withFields(readablePartial13);
        org.joda.time.LocalTime localTime16 = localTime14.withMillisOfDay(3);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (-1), chronology19);
        org.joda.time.Period period21 = period20.toPeriod();
        org.joda.time.LocalTime localTime22 = localTime17.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(10L, chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        int int27 = dateTime25.get(dateTimeFieldType26);
        boolean boolean28 = localTime22.isSupported(dateTimeFieldType26);
        boolean boolean29 = localTime16.isSupported(dateTimeFieldType26);
        int int30 = dateTime9.get(dateTimeFieldType26);
        org.joda.time.TimeOfDay timeOfDay31 = dateTime9.toTimeOfDay();
        org.joda.time.Duration duration33 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime9.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Instant instant36 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration33, 52459);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = period38.toDurationFrom(readableInstant39);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) 32772, (int) (byte) 10);
        java.lang.String str45 = duration40.toString();
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = period47.toDurationFrom(readableInstant48);
        boolean boolean50 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant51 = instant36.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekyear();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Sun Feb 13 10:16:05 GMT-E3:00 2022");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1587 + "'", int30 == 1587);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.035S" + "'", str45, "PT0.035S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localTime54);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        org.joda.time.DateTime.Property property5 = dateTime0.year();
        org.joda.time.DateTime dateTime7 = dateTime0.plusWeeks(26297538);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType10 = periodType9.withDaysRemoved();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(1645514161529L, periodType10, chronology15);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period19 = period16.withMonths(2404);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "P0M" + "'", str17, "P0M");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(26220156);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 827);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = dateTimeFormatter22.parseMutableDateTime("2074-04-17T01:39:22.034+35:00/2074-04-17T01:39:22.034+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableInterval5.setDurationBeforeEnd(readableDuration6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableInterval5.setPeriodAfterStart(readablePeriod8);
        long long10 = mutableInterval5.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        java.util.Date date1 = new java.util.Date((long) 44);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Dec 23 03:00:00 GMT-E3:00 1969");
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        java.lang.String str6 = interval2.toString();
        org.joda.time.DateTime dateTime7 = interval2.getStart();
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) (byte) 1);
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        int int11 = property10.getMaximumValue();
        org.joda.time.DateTime dateTime12 = property10.roundHalfFloorCopy();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property10.setCopy("PeriodType[YearDayTime]", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PeriodType[YearDayTime]\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 187200000L + "'", long5 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str6, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        int int24 = dateTimeField9.getMaximumValue(readablePartial23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDateTime25.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusYears(26151451);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        int int33 = period31.getValue(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (-1), chronology41);
        org.joda.time.Period period43 = period42.toPeriod();
        int int44 = period43.size();
        int int45 = period43.getMinutes();
        int[] intArray46 = period43.getValues();
        int int47 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39, intArray46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.minusSeconds(382);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime39.plusMinutes(814);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime39.minusMillis((int) 'x');
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Set<java.lang.String> strSet62 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.lang.String>) strSet62);
        java.util.Collection<java.util.Locale> localeCollection64 = null;
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, localeCollection64, filteringMode65);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, localeCollection64);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Set<java.lang.String> strSet71 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.lang.String>) strSet71);
        java.util.Collection<java.util.Locale> localeCollection73 = null;
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, localeCollection73, filteringMode74);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList75, filteringMode76);
        boolean boolean78 = localDateTime55.equals((java.lang.Object) filteringMode76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime55.withHourOfDay(438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 438 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode74.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(33, 8, 350, 26153527, 26217781, 28, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26153527 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundFloorCopy();
        org.joda.time.Chronology chronology3 = localDateTime2.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((int) 'a');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        java.util.Date date6 = new java.util.Date(292278969, 438, 5887724, 26176563, 5887724, 36976563);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Dec 21 04:34:11 GMT-E3:00 292248026");
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.text.DateFormatSymbols dateFormatSymbols1 = java.text.DateFormatSymbols.getInstance(locale0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("26161962");
        java.lang.String str7 = locale6.getDisplayVariant();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfDay();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.lang.String str12 = property9.getAsText(locale10);
        java.lang.String str13 = locale6.getDisplayLanguage(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = calendar2.getDisplayName(226, 5869929, locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateFormatSymbols1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514519070,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=21,SECOND=59,MILLISECOND=70,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "25200000" + "'", str12, "25200000");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        int int8 = dateTime0.getYear();
        org.joda.time.DateTime dateTime10 = dateTime0.plusYears(14);
        int int11 = dateTime10.getDayOfWeek();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime.Property property14 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime16 = dateTime12.withWeekOfWeekyear((int) (byte) 1);
        boolean boolean17 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime12);
        int int18 = dateTime12.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime12.toMutableDateTimeISO();
        org.joda.time.Instant instant20 = mutableDateTime19.toInstant();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval28.withPeriodAfterStart(readablePeriod31);
        java.lang.String str33 = interval28.toString();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks((int) (byte) 10);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = period39.toDurationFrom(readableInstant40);
        long long42 = duration41.getMillis();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plus((org.joda.time.ReadableDuration) duration41);
        mutableInterval34.setDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration45 = mutableInterval34.toDuration();
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableInterval34.contains(readableInstant46);
        java.lang.Object obj48 = mutableInterval34.clone();
        boolean boolean49 = interval28.isBefore((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.Chronology chronology50 = mutableInterval34.getChronology();
        long long51 = mutableInterval34.getStartMillis();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str33, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 35L + "'", long42 == 35L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "1969-12-23T03:00:00.000-213:00/1969-12-23T03:00:00.035-213:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1969-12-23T03:00:00.000-213:00/1969-12-23T03:00:00.035-213:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1969-12-23T03:00:00.000-213:00/1969-12-23T03:00:00.035-213:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        java.lang.String str14 = dateTimeZone10.getName((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645514182943L, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withFieldAdded(durationFieldType19, 1970);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        long long29 = interval26.getEndMillis();
        java.lang.String str30 = interval26.toString();
        org.joda.time.DateTime dateTime31 = interval26.getStart();
        org.joda.time.Chronology chronology32 = interval26.getChronology();
        org.joda.time.Period period33 = new org.joda.time.Period(0L, 1645514152681L, chronology32);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime21.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusDays(100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours((int) 'a');
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfHalfday();
        org.joda.time.DateTime dateTime49 = dateTime43.toDateTime(chronology47);
        org.joda.time.Period period50 = new org.joda.time.Period((long) 1, (long) ' ', periodType42, chronology47);
        org.joda.time.Period period51 = period50.negated();
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#');
        int int55 = period53.getValue(0);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        int int57 = period53.get(durationFieldType56);
        boolean boolean58 = period51.isSupported(durationFieldType56);
        boolean boolean59 = localDateTime36.isSupported(durationFieldType56);
        boolean boolean60 = dateTimeZone10.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime36.minusSeconds(382);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusDays(26153577);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 187200000L + "'", long6 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str7, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-213:00" + "'", str12, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-213:00" + "'", str14, "-213:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 187200000L + "'", long29 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str30, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String[] strArray53 = java.util.TimeZone.getAvailableIDs((int) '#');
        dateFormatSymbols51.setAmPmStrings(strArray53);
        java.lang.String[] strArray55 = dateFormatSymbols51.getShortWeekdays();
        java.lang.Object obj56 = dateFormatSymbols51.clone();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 420 + "'", int6 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25 + "'", int8 == 25);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 420 + "'", int30 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 69 + "'", int31 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 25 + "'", int32 == 25);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(obj56);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        java.lang.String str4 = interval3.toString();
        org.joda.time.DateTime dateTime5 = interval3.getEnd();
        org.joda.time.Chronology chronology6 = interval3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(0L, chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.Period period11 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        int int15 = periodType12.indexOf(durationFieldType14);
        java.lang.String str16 = periodType12.getName();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(chronology25);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, (long) ' ', periodType20, chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) chronology6, periodType12, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str4, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Days" + "'", str16, "Days");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(453);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.Period period3 = period1.negated();
        org.joda.time.Seconds seconds4 = period3.toStandardSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(seconds4);
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 54);
        org.joda.time.Minutes minutes2 = duration1.toStandardMinutes();
        long long3 = duration1.getStandardMinutes();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.Period period9 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.days();
        org.joda.time.Period period11 = period9.normalizedStandard(periodType10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.days();
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        int int17 = periodType14.indexOf(durationFieldType16);
        boolean boolean18 = periodType10.isSupported(durationFieldType16);
        int int19 = periodType6.indexOf(durationFieldType16);
        int int20 = periodType5.indexOf(durationFieldType16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.Period period25 = duration1.toPeriod(periodType5, chronology22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.centuryOfEra();
        java.lang.String str28 = property27.getName();
        org.joda.time.LocalDateTime localDateTime29 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundCeilingCopy();
        boolean boolean31 = periodType5.equals((java.lang.Object) property27);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 54L + "'", long3 == 54L);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "centuryOfEra" + "'", str28, "centuryOfEra");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2022);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) 32772, (int) (byte) 10);
        long long19 = duration18.getStandardHours();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusDays(41487);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone21.getName((long) ' ');
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        java.lang.String str27 = period26.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = period26.withDays(571);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-213:00" + "'", str23, "-213:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1S" + "'", str27, "PT1S");
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime6.plusHours((int) (byte) 100);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.Period period6 = duration1.toPeriod(chronology3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField9 = chronology3.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.era();
        org.joda.time.DurationField durationField11 = chronology3.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.dayOfYear();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        int int14 = localTime13.getMinuteOfHour();
        int int15 = localTime13.size();
        org.joda.time.LocalTime localTime17 = localTime13.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime localTime19 = localTime13.minusHours(2);
        int int20 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.DurationField durationField21 = dateTimeField12.getRangeDurationField();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.monthOfYear();
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = locale21.getDisplayScript(locale22);
        java.lang.String str24 = property20.getAsShortText(locale22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone21.getName((long) ' ');
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        int int31 = dateTimeField29.getLeapAmount((long) 26151451);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int34 = dateTimeField29.getMaximumShortTextLength(locale33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        int int42 = dateTime38.getYearOfCentury();
        int int43 = dateTime38.getDayOfMonth();
        org.joda.time.DateTime dateTime45 = dateTime38.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        int int48 = dateTimeField47.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks((int) (byte) 10);
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = period53.toDurationFrom(readableInstant54);
        long long56 = duration55.getMillis();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plus((org.joda.time.ReadableDuration) duration55);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime51, (int) (short) 1, locale59);
        int int61 = dateTimeField37.getMaximumTextLength(locale59);
        java.lang.String str62 = locale33.getDisplayLanguage(locale59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime66.getMinuteOfDay();
        int int70 = dateTime66.getYearOfCentury();
        int int71 = dateTime66.getDayOfMonth();
        org.joda.time.DateTime dateTime73 = dateTime66.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property74 = dateTime73.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField75 = property74.getField();
        int int76 = dateTimeField75.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusWeeks((int) (byte) 10);
        org.joda.time.Period period81 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.Duration duration83 = period81.toDurationFrom(readableInstant82);
        long long84 = duration83.getMillis();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime79.plus((org.joda.time.ReadableDuration) duration83);
        java.util.Locale locale87 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str88 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime79, (int) (short) 1, locale87);
        int int89 = dateTimeField65.getMaximumTextLength(locale87);
        java.lang.String str90 = locale33.getDisplayLanguage(locale87);
        java.util.Calendar calendar91 = dateTime24.toCalendar(locale33);
        calendar91.setLenient(false);
        java.util.Date date94 = calendar91.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int96 = calendar91.get(5966829);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5966829");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-213:00" + "'", str23, "-213:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 420 + "'", int41 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 69 + "'", int42 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 25 + "'", int43 == 25);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1439 + "'", int48 == 1439);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 35L + "'", long56 == 35L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 420 + "'", int69 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 69 + "'", int70 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 25 + "'", int71 == 25);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1439 + "'", int76 == 1439);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 35L + "'", long84 == 35L);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=792000000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date94);
// flaky:         org.junit.Assert.assertEquals(date94.toString(), "Thu Jan 01 07:00:00 GMT-E3:00 1970");
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.DateTime.Property property23 = dateTime16.monthOfYear();
        boolean boolean24 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(chronology34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, (long) ' ', periodType29, chronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra(2);
        long long43 = chronology34.set((org.joda.time.ReadablePartial) localDateTime39, (long) (short) 10);
        java.lang.String str44 = chronology34.toString();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 26151451, chronology34);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime48 = dateTime16.minusHours(74);
        org.joda.time.Chronology chronology49 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 187200000L + "'", long43 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[-213:00]" + "'", str44, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.DurationField durationField23 = dateTimeField9.getDurationField();
        long long25 = dateTimeField9.roundHalfFloor((long) (-292275054));
        org.joda.time.DurationField durationField26 = dateTimeField9.getDurationField();
        int int29 = dateTimeField9.getDifference(0L, (long) 26161182);
        boolean boolean31 = dateTimeField9.isLeap(1645514304459L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = period36.toDurationFrom(readableInstant37);
        long long39 = duration38.getMillis();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plus((org.joda.time.ReadableDuration) duration38);
        int int41 = localDateTime34.getHourOfDay();
        int int42 = localDateTime34.getDayOfYear();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.hourOfHalfday();
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(chronology51);
        org.joda.time.Period period54 = new org.joda.time.Period((long) 1, (long) ' ', periodType46, chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra(2);
        long long60 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) (short) 10);
        java.lang.String str61 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology51.millisOfSecond();
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getChronology(chronology51);
        org.joda.time.Period period65 = new org.joda.time.Period((long) '#');
        int int67 = period65.getValue(0);
        org.joda.time.Period period68 = period65.normalizedStandard();
        int[] intArray69 = period65.getValues();
        org.joda.time.Period period71 = period65.withWeeks(26181277);
        int[] intArray74 = chronology63.get((org.joda.time.ReadablePeriod) period71, 3291028500038L, 1646119108704L);
        int int75 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime34, intArray74);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(10L, chronology77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.weekyear();
        int int80 = dateTime78.get(dateTimeFieldType79);
        org.joda.time.Period period82 = new org.joda.time.Period((long) '#');
        int int84 = period82.getValue(0);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime85, (org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Duration duration88 = period82.toDurationTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadablePeriod) period82);
        org.joda.time.LocalDateTime localDateTime90 = dateTime78.toLocalDateTime();
        java.util.Date date91 = localDateTime90.toDate();
        org.joda.time.LocalDateTime.Property property92 = localDateTime90.era();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime90.plusDays(0);
        int int95 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime94);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-292260000L) + "'", long25 == (-292260000L));
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-436) + "'", int29 == (-436));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 35L + "'", long39 == 35L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 289 + "'", int42 == 289);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 187200000L + "'", long60 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[-213:00]" + "'", str61, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-52, -1, -2, 0, -7, -16, -31, -334]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1969 + "'", int80 == 1969);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(date91);
// flaky:         org.junit.Assert.assertEquals(date91.toString(), "Tue Dec 23 03:00:00 GMT-E3:00 1969");
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = property1.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField3 = property1.getDurationField();
        org.joda.time.DateTime dateTime4 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime5 = property1.withMinimumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        java.lang.String str14 = dateTimeZone10.getName((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645514182943L, dateTimeZone10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(26167);
        org.joda.time.DateTime dateTime20 = dateTime18.plusDays(107);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 187200000L + "'", long6 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str7, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-213:00" + "'", str12, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-213:00" + "'", str14, "-213:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.centuryOfEra();
        org.joda.time.DurationField durationField4 = chronology2.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.yearOfEra();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.minus((long) 10);
        org.joda.time.DateTime dateTime12 = dateTime0.minusYears(52675);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = org.joda.time.Period.years(10);
        org.joda.time.LocalTime localTime7 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 1);
        org.joda.time.Chronology chronology8 = localTime0.getChronology();
        org.joda.time.LocalTime localTime10 = localTime0.plusSeconds(814);
        org.joda.time.LocalTime localTime12 = localTime0.plusHours(26178);
        int int13 = localTime0.getMillisOfDay();
        org.joda.time.LocalTime localTime15 = localTime0.minusMinutes(711);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime0.get(dateTimeFieldType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25200000 + "'", int13 == 25200000);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("26210325");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("5965119");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(752, (-30696));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -30696");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime8 = dateTime2.toDateTime(chronology6);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.clockhourOfHalfday();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.Interval interval16 = localDate13.toInterval();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Interval interval23 = interval21.toInterval();
        long long24 = interval21.getEndMillis();
        java.lang.String str25 = interval21.toString();
        org.joda.time.DateTime dateTime26 = interval21.getStart();
        org.joda.time.Chronology chronology27 = interval21.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period(0L, 1645514152681L, chronology27);
        int[] intArray29 = period28.getValues();
        int int30 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate13, intArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = localDate13.withCenturyOfEra(36976563);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36976563 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 187200000L + "'", long24 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str25, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[52, 1, 3, 0, 7, 15, 52, 681]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.DurationField durationField25 = property24.getLeapDurationField();
        java.lang.String str26 = durationField25.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = durationField25.subtract(187200035L, 3291028444727L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -3291028444727 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "days" + "'", str26, "days");
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514176563L);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str5 = interval4.toString();
        org.joda.time.DateTime dateTime6 = interval4.getEnd();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) (byte) 10);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationFrom(readableInstant12);
        long long14 = duration13.getMillis();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plus((org.joda.time.ReadableDuration) duration13);
        boolean boolean16 = interval4.equals((java.lang.Object) duration13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Interval interval21 = interval19.toInterval();
        org.joda.time.MutableInterval mutableInterval22 = interval21.toMutableInterval();
        org.joda.time.Interval interval23 = interval4.gap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks((int) (byte) 10);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = period30.toDurationFrom(readableInstant31);
        long long33 = duration32.getMillis();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plus((org.joda.time.ReadableDuration) duration32);
        long long35 = duration32.getMillis();
        java.lang.String str36 = duration32.toString();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks((int) (byte) 10);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = period41.toDurationFrom(readableInstant42);
        long long44 = duration43.getMillis();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plus((org.joda.time.ReadableDuration) duration43);
        java.lang.String str46 = duration43.toString();
        boolean boolean47 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration43, 1970);
        org.joda.time.Interval interval50 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant51 = instant1.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutableDateTime mutableDateTime52 = instant1.toMutableDateTime();
        int int53 = mutableDateTime52.getWeekyear();
        boolean boolean54 = mutableDateTime52.isEqualNow();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str5, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNull(interval23);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 359 + "'", int25 == 359);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35L + "'", long33 == 35L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0.035S" + "'", str36, "PT0.035S");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35L + "'", long44 == 35L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.035S" + "'", str46, "PT0.035S");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = dateTimeField9.toString();
        int int11 = dateTimeField9.getMinimumValue();
        org.joda.time.DurationField durationField12 = dateTimeField9.getRangeDurationField();
        java.lang.String str14 = dateTimeField9.getAsShortText(4936510800000L);
        long long16 = dateTimeField9.remainder(660000L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 25 + "'", int5 == 25);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str10, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationField12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "960" + "'", str14, "960");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2074-04-15T14:34:27.354Z/2074-04-15T14:34:27.354Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2074-04-15T14:34:27.354Z/2074-04-1...\" is malformed at \"74-04-15T14:34:27.354Z/2074-04-1...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        boolean boolean2 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.withFields(readablePartial3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime4.withFieldAdded(durationFieldType5, 38270);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfSecond();
        int int9 = localTime7.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime7.withMinuteOfHour((-46));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -46 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = org.joda.time.Period.years(10);
        org.joda.time.LocalTime localTime7 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 1);
        org.joda.time.Chronology chronology8 = localTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        long long12 = dateTimeField10.roundHalfFloor((long) 174);
        long long14 = dateTimeField10.roundHalfEven(3291028451594L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3291028440000L + "'", long14 == 3291028440000L);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        int int3 = timeZone1.getRawOffset();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        int int5 = calendar4.getWeekYear();
        calendar4.setTimeInMillis(75600000L);
        java.util.Date date8 = calendar4.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar4.clear(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=75600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 24 00:00:00 GMT-E3:00 1969");
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYear(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds(58);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 187200000L + "'", long12 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str13, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter2.getParser();
        java.io.Writer writer26 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer26, (long) 5973558);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNull(dateTimeParser25);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = dateTimeField2.getAsShortText(26153877, locale8);
        long long11 = dateTimeField2.roundFloor((long) 1439);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(3);
        int int15 = localDateTime14.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.property(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis(16);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime22.getMinuteOfDay();
        int int26 = dateTime22.getYearOfCentury();
        int int27 = dateTime22.getDayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime22.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        int int32 = dateTimeField31.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks((int) (byte) 10);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = period37.toDurationFrom(readableInstant38);
        long long40 = duration39.getMillis();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plus((org.joda.time.ReadableDuration) duration39);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime35, (int) (short) 1, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale43.getDisplayLanguage(locale45);
        java.lang.String str47 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale45);
        java.text.DateFormatSymbols dateFormatSymbols48 = java.text.DateFormatSymbols.getInstance(locale45);
        java.lang.String[] strArray49 = dateFormatSymbols48.getMonths();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10" + "'", str6, "10");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26153877" + "'", str9, "26153877");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 359 + "'", int15 == 359);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 420 + "'", int25 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69 + "'", int26 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 25 + "'", int27 == 25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1439 + "'", int32 == 1439);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35L + "'", long40 == 35L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str46, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "11" + "'", str47, "11");
        org.junit.Assert.assertNotNull(dateFormatSymbols48);
        org.junit.Assert.assertNotNull(strArray49);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        int int3 = localDate2.getYear();
        int int4 = localDate2.getDayOfWeek();
        java.lang.String str5 = localDate2.toString();
        org.joda.time.Period period14 = new org.joda.time.Period(2, 41, 26160257, 1, 54, 26161182, 26228534, 2036);
        org.joda.time.LocalDate localDate15 = localDate2.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.junit.Assert.assertNotNull(localDate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 38269 + "'", int3 == 38269);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "38269-12-25" + "'", str5, "38269-12-25");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getISO3Language();
        java.util.Calendar.Builder builder13 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder17 = builder0.setDate(16, (int) 'a', 995);
        java.util.Calendar.Builder builder21 = builder17.setTimeOfDay(16, 26165, (int) '#');
        java.util.Calendar.Builder builder25 = builder21.setWeekDate(22, 11, 125);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder28 = builder21.setWeekDefinition(32769, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) 32772, (int) (byte) 10);
        java.lang.String str8 = duration3.toString();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = period10.toDurationFrom(readableInstant11);
        boolean boolean13 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime16.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime16.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime16.minus((long) 10);
        org.joda.time.Period period27 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks((int) (byte) 1);
        int int33 = property29.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = interval36.isAfter((long) 10);
        org.joda.time.Duration duration39 = interval36.toDuration();
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration42, 26160257);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        boolean boolean52 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration51);
        java.lang.String str53 = duration45.toString();
        int int54 = duration12.compareTo((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration56 = duration45.withMillis(3291028667875L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime60);
        int int62 = dateTime59.getMinuteOfDay();
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime65 = dateTime59.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime59.toDateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime59.minus((long) 10);
        org.joda.time.Period period70 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Seconds seconds71 = duration58.toStandardSeconds();
        long long72 = duration58.getStandardSeconds();
        boolean boolean73 = duration45.isEqual((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property75 = dateTime74.millisOfDay();
        org.joda.time.DateTime dateTime76 = dateTime74.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime79 = dateTime77.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property80 = dateTime79.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeUtils.getZone(dateTimeZone81);
        java.lang.String str84 = dateTimeZone82.getName((long) ' ');
        org.joda.time.DateTime dateTime85 = dateTime79.toDateTime(dateTimeZone82);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property87 = dateTime86.millisOfDay();
        org.joda.time.DateTime dateTime88 = dateTime86.withTimeAtStartOfDay();
        boolean boolean89 = dateTime79.isEqual((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime.Property property90 = dateTime88.weekyear();
        org.joda.time.Duration duration91 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Duration duration93 = duration91.minus(0L);
        boolean boolean94 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration91);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.035S" + "'", str8, "PT0.035S");
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 420 + "'", int19 == 420);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT26160256.999S" + "'", str53, "PT26160256.999S");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 420 + "'", int62 == 420);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(seconds71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-213:00" + "'", str84, "-213:00");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.minusSeconds(436);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime23.withDayOfWeek(25200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25200 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        int int40 = dateTime32.getYear();
        org.joda.time.DateTime dateTime42 = dateTime32.plusYears(14);
        boolean boolean43 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime42);
        long long44 = interval28.getStartMillis();
        long long45 = interval28.toDurationMillis();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(10L, chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        int int50 = dateTime48.get(dateTimeFieldType49);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        int int54 = period52.getValue(0);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration58 = period52.toDurationTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadablePeriod) period52);
        mutableInterval59.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getChronology(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfHalfday();
        org.joda.time.DateTime dateTime68 = dateTime62.toDateTime(chronology66);
        org.joda.time.DateTime.Property property69 = dateTime62.monthOfYear();
        boolean boolean70 = mutableInterval59.contains((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType75 = periodType74.withSecondsRemoved();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Chronology chronology80 = org.joda.time.DateTimeUtils.getChronology(chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology80.hourOfHalfday();
        org.joda.time.DateTime dateTime82 = dateTime76.toDateTime(chronology80);
        org.joda.time.Period period83 = new org.joda.time.Period((long) 1, (long) ' ', periodType75, chronology80);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime(dateTimeZone84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withCenturyOfEra(2);
        long long89 = chronology80.set((org.joda.time.ReadablePartial) localDateTime85, (long) (short) 10);
        java.lang.String str90 = chronology80.toString();
        org.joda.time.Period period91 = new org.joda.time.Period((long) 26151451, chronology80);
        org.joda.time.MutableInterval mutableInterval92 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadablePeriod) period91);
        org.joda.time.DateTime.Property property93 = dateTime62.minuteOfDay();
        boolean boolean94 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 420 + "'", int35 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 69 + "'", int36 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 25 + "'", int37 == 25);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 187200000L + "'", long44 == 187200000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1969 + "'", int50 == 1969);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localDateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 187200000L + "'", long89 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ISOChronology[-213:00]" + "'", str90, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.MutableInterval mutableInterval32 = interval28.toMutableInterval();
        long long33 = mutableInterval32.getStartMillis();
        org.joda.time.Interval interval34 = mutableInterval32.toInterval();
// flaky:         mutableInterval32.setEndMillis(1645514298723L);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str3, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableInterval32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 187200000L + "'", long33 == 187200000L);
        org.junit.Assert.assertNotNull(interval34);
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.lang.String str11 = property8.getAsText(locale9);
        org.joda.time.DateTime dateTime12 = property8.withMinimumValue();
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis(11);
        org.joda.time.DateTime dateTime18 = dateTime12.withDate(474, (int) (byte) 1, 5);
        boolean boolean19 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalDate localDate20 = dateTime12.toLocalDate();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate20.withFieldAdded(durationFieldType21, 52441);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 420 + "'", int3 == 420);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "25200000" + "'", str11, "25200000");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(durationFieldType21);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks((int) (byte) 1);
        int int14 = property10.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, (long) ' ', periodType19, chronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra(2);
        long long33 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) (short) 10);
        java.lang.String str34 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField35 = chronology24.millisOfSecond();
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTime dateTime37 = dateTime8.withChronology(chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime.Property property41 = dateTime39.weekyear();
        org.joda.time.DateTime dateTime43 = property41.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeUtils.getZone(dateTimeZone44);
        java.lang.String str47 = dateTimeZone45.getName((long) ' ');
        java.lang.String str49 = dateTimeZone45.getName((long) (short) -1);
        org.joda.time.DateTime dateTime50 = dateTime43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime53.getMinuteOfDay();
        int int57 = dateTime53.getYearOfCentury();
        int int58 = dateTime53.getDayOfMonth();
        org.joda.time.DateTime dateTime60 = dateTime53.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = property61.getField();
        int int63 = dateTimeField62.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusWeeks((int) (byte) 10);
        org.joda.time.Period period68 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Duration duration70 = period68.toDurationFrom(readableInstant69);
        long long71 = duration70.getMillis();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.plus((org.joda.time.ReadableDuration) duration70);
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str75 = dateTimeField62.getAsText((org.joda.time.ReadablePartial) localDateTime66, (int) (short) 1, locale74);
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.lang.String str77 = locale74.getDisplayLanguage(locale76);
        java.lang.String str78 = dateTimeZone45.getShortName((long) (short) 100, locale74);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime80 = dateTime37.toDateTime(dateTimeZone45);
        java.lang.String str82 = dateTimeZone45.getNameKey((long) 873);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) 52499944, dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 187200000L + "'", long6 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00" + "'", str7, "1969-12-25T07:00:00.000-213:00/1969-12-25T07:00:00.000-213:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 187200000L + "'", long33 == 187200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[-213:00]" + "'", str34, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-213:00" + "'", str47, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-213:00" + "'", str49, "-213:00");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 420 + "'", int56 == 420);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 69 + "'", int57 == 69);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 25 + "'", int58 == 25);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1439 + "'", int63 == 1439);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 35L + "'", long71 == 35L);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str77, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-213:00" + "'", str78, "-213:00");
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withDefaultYear(0);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(writer12, 1375201421L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.withFields(readablePartial3);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfDay(3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (-1), chronology9);
        org.joda.time.Period period11 = period10.toPeriod();
        org.joda.time.LocalTime localTime12 = localTime7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        boolean boolean18 = localTime12.isSupported(dateTimeFieldType16);
        boolean boolean19 = localTime6.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean21 = localTime6.isSupported(dateTimeFieldType20);
        org.joda.time.LocalTime.Property property22 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime23 = property22.withMinimumValue();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        boolean boolean30 = localTime24.isSupported(dateTimeFieldType28);
        org.joda.time.LocalTime.Property property31 = localTime24.minuteOfHour();
        org.joda.time.LocalTime localTime32 = property31.withMaximumValue();
        org.joda.time.LocalTime localTime33 = property31.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime35 = localTime33.minusSeconds(1640);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType37 = periodType36.withMillisRemoved();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime();
        int int39 = localTime38.getMinuteOfHour();
        int int40 = localTime38.size();
        org.joda.time.LocalTime localTime42 = localTime38.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property43 = localTime38.minuteOfHour();
        org.joda.time.LocalTime localTime44 = property43.withMinimumValue();
        org.joda.time.LocalTime localTime46 = property43.addCopy(122);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime47, (org.joda.time.ReadablePartial) localTime48, periodType49);
        org.joda.time.Period period51 = period50.negated();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (-1), chronology53);
        org.joda.time.Period period55 = period54.toPeriod();
        org.joda.time.Period period56 = period51.withFields((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getChronology(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        org.joda.time.DurationField durationField61 = durationFieldType57.getField(chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getChronology(chronology62);
        boolean boolean64 = durationFieldType57.isSupported(chronology63);
        boolean boolean65 = period51.isSupported(durationFieldType57);
        org.joda.time.LocalTime localTime67 = localTime46.withFieldAdded(durationFieldType57, 9);
        int int68 = periodType37.indexOf(durationFieldType57);
        org.joda.time.LocalTime localTime70 = localTime33.withFieldAdded(durationFieldType57, 3);
        org.joda.time.LocalTime localTime72 = localTime33.plusSeconds(1587);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(10L, chronology74);
        org.joda.time.DateTime dateTime77 = dateTime75.minus(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int79 = dateTime75.get(dateTimeFieldType78);
        org.joda.time.LocalTime.Property property80 = localTime72.property(dateTimeFieldType78);
        org.joda.time.LocalTime.Property property81 = localTime23.property(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1969 + "'", int29 == 1969);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        java.util.Date date5 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int6 = date5.getYear();
        date5.setHours(38270);
        java.time.Instant instant9 = date5.toInstant();
        date5.setYear(463456);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed May 12 14:14:00 GMT-E3:00 465356");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2782 + "'", int6 == 2782);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withPivotYear(57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withPivotYear(534);
        boolean boolean24 = dateTimeFormatter23.isParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimeParser20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter2.getZone();
        java.io.Writer writer11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(3);
        int int15 = localDateTime14.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.property(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(1439);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Interval interval25 = interval23.toInterval();
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) ' ', dateTimeZone28);
        int int30 = dateTime29.getYearOfCentury();
        org.joda.time.DateTime.Property property31 = dateTime29.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        org.joda.time.Interval interval33 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = interval33.toMutableInterval();
        org.joda.time.Interval interval35 = interval23.gap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration36 = interval23.toDuration();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime18.plus((org.joda.time.ReadableDuration) duration36);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer11, (org.joda.time.ReadablePartial) localDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 359 + "'", int15 == 359);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 69 + "'", int30 == 69);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(1645488109616L);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        int int27 = dateTime25.getDayOfYear();
        boolean boolean28 = interval18.contains((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        java.lang.String str32 = interval31.toString();
        org.joda.time.DateTime dateTime33 = interval31.getEnd();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks((int) (byte) 10);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = period38.toDurationFrom(readableInstant39);
        long long41 = duration40.getMillis();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plus((org.joda.time.ReadableDuration) duration40);
        boolean boolean43 = interval31.equals((java.lang.Object) duration40);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = interval46.isAfter((long) 10);
        org.joda.time.Interval interval49 = interval31.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.months();
        org.joda.time.Period period51 = interval31.toPeriod(periodType50);
        org.joda.time.DateTime dateTime52 = interval31.getStart();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Interval interval57 = interval55.toInterval();
        org.joda.time.MutableInterval mutableInterval58 = interval57.toMutableInterval();
        boolean boolean59 = interval31.isBefore((org.joda.time.ReadableInterval) interval57);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.Interval interval61 = interval57.withPeriodAfterStart(readablePeriod60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime62.getMinuteOfDay();
        org.joda.time.DateTime dateTime67 = dateTime62.minusHours((int) 'a');
        org.joda.time.DateTime dateTime68 = dateTime67.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime70 = dateTime67.withYear(38222);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime72);
        int int74 = dateTime71.getMinuteOfDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(10L, chronology76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        int int79 = dateTime77.get(dateTimeFieldType78);
        int int80 = dateTime71.get(dateTimeFieldType78);
        int int81 = dateTime67.get(dateTimeFieldType78);
        boolean boolean82 = interval57.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Interval interval83 = interval18.overlap((org.joda.time.ReadableInterval) interval57);
        boolean boolean84 = mutableInterval13.isBefore((org.joda.time.ReadableInterval) interval83);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = interval83.isBefore(868363380032L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 96 + "'", int27 == 96);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2074-04-06T10:23:50.143-213:00/2074-04-06T10:23:50.143-213:00" + "'", str32, "2074-04-06T10:23:50.143-213:00/2074-04-06T10:23:50.143-213:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 35L + "'", long41 == 35L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(interval49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(mutableInterval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(interval61);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 623 + "'", int65 == 623);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 623 + "'", int74 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1969 + "'", int79 == 1969);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2074 + "'", int80 == 2074);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2074 + "'", int81 == 2074);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = dateTime9.getDayOfYear();
        boolean boolean12 = interval2.contains((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Interval interval14 = interval2.withStartMillis(1645514155102L);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 96 + "'", int11 == 96);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime0.minuteOfHour();
        org.joda.time.DateTime dateTime10 = property8.addToCopy(38270);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(10L, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        int int19 = period17.getValue(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) period17);
        mutableInterval24.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(chronology31);
        org.joda.time.DateTime.Property property34 = dateTime27.monthOfYear();
        boolean boolean35 = mutableInterval24.contains((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getChronology(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DateTime dateTime47 = dateTime41.toDateTime(chronology45);
        org.joda.time.Period period48 = new org.joda.time.Period((long) 1, (long) ' ', periodType40, chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra(2);
        long long54 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) (short) 10);
        java.lang.String str55 = chronology45.toString();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 26151451, chronology45);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period56);
        long long58 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property60 = dateTime59.millisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime59.withTimeAtStartOfDay();
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#');
        int int65 = period63.getValue(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration69 = period63.toDurationTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded((long) 453, 436);
        org.joda.time.DateTime dateTime75 = dateTime67.minusWeeks(8);
        java.util.GregorianCalendar gregorianCalendar76 = dateTime75.toGregorianCalendar();
        boolean boolean77 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Instant instant78 = dateTime75.toInstant();
        org.joda.time.Instant instant81 = instant78.withDurationAdded((long) 87, 96);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3291002630196L + "'", long54 == 3291002630196L);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[-213:00]" + "'", str55, "ISOChronology[-213:00]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(gregorianCalendar76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(instant81);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean7 = interval2.equals((java.lang.Object) dateTimeFieldType6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTime dateTime12 = interval10.getEnd();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = interval10.equals((java.lang.Object) duration19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Interval interval28 = interval10.overlap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.months();
        org.joda.time.Period period30 = interval10.toPeriod(periodType29);
        org.joda.time.DateTime dateTime31 = interval10.getStart();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Interval interval36 = interval34.toInterval();
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        boolean boolean38 = interval10.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableInterval mutableInterval40 = interval36.toMutableInterval();
        long long41 = mutableInterval40.getStartMillis();
        org.joda.time.Interval interval42 = interval2.overlap((org.joda.time.ReadableInterval) mutableInterval40);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = interval42.toDurationMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3291002630254L + "'", long5 == 3291002630254L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2074-04-06T10:23:50.254-213:00/2074-04-06T10:23:50.254-213:00" + "'", str11, "2074-04-06T10:23:50.254-213:00/2074-04-06T10:23:50.254-213:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(interval28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableInterval40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3291002630254L + "'", long41 == 3291002630254L);
        org.junit.Assert.assertNull(interval42);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (-1), chronology8);
        org.joda.time.Period period10 = period9.toPeriod();
        int int11 = period10.size();
        int int12 = period10.getMinutes();
        int[] intArray13 = period10.getValues();
        org.joda.time.Period period15 = period10.withMonths(26155103);
        org.joda.time.Period period17 = period15.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(70);
        int int31 = property19.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime.Property property35 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime37 = property35.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeUtils.getZone(dateTimeZone38);
        java.lang.String str41 = dateTimeZone39.getName((long) ' ');
        java.lang.String str43 = dateTimeZone39.getName((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime47.getMinuteOfDay();
        int int51 = dateTime47.getYearOfCentury();
        int int52 = dateTime47.getDayOfMonth();
        org.joda.time.DateTime dateTime54 = dateTime47.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        int int57 = dateTimeField56.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks((int) (byte) 10);
        org.joda.time.Period period62 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Duration duration64 = period62.toDurationFrom(readableInstant63);
        long long65 = duration64.getMillis();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.plus((org.joda.time.ReadableDuration) duration64);
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str69 = dateTimeField56.getAsText((org.joda.time.ReadablePartial) localDateTime60, (int) (short) 1, locale68);
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.lang.String str71 = locale68.getDisplayLanguage(locale70);
        java.lang.String str72 = dateTimeZone39.getShortName((long) (short) 100, locale68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) 85613876040000L, dateTimeZone39);
        org.joda.time.DateTime dateTime74 = dateTime30.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime.Property property75 = dateTime30.year();
        org.joda.time.DateTime.Property property76 = dateTime30.era();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 96 + "'", int3 == 96);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 623 + "'", int23 == 623);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-756410) + "'", int31 == (-756410));
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-213:00" + "'", str41, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-213:00" + "'", str43, "-213:00");
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 623 + "'", int50 == 623);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 74 + "'", int51 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1439 + "'", int57 == 1439);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 35L + "'", long65 == 35L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(locale70);
// flaky:         org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str71, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-213:00" + "'", str72, "-213:00");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        java.lang.Object obj0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(obj0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Period period8 = interval6.toPeriod();
        org.joda.time.Interval interval9 = interval6.toInterval();
        boolean boolean10 = interval1.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str14 = interval13.toString();
        org.joda.time.DateTime dateTime15 = interval13.getEnd();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((int) (byte) 10);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plus((org.joda.time.ReadableDuration) duration22);
        boolean boolean25 = interval13.equals((java.lang.Object) duration22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Interval interval31 = interval13.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.months();
        org.joda.time.Period period33 = interval13.toPeriod(periodType32);
        org.joda.time.DateTime dateTime34 = interval13.getStart();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Interval interval39 = interval37.toInterval();
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        boolean boolean41 = interval13.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime43.getMinuteOfDay();
        int int47 = dateTime43.getYearOfCentury();
        int int48 = dateTime43.getDayOfMonth();
        org.joda.time.DateTime dateTime50 = dateTime43.minusWeeks((int) (short) 0);
        int int51 = dateTime43.getYear();
        org.joda.time.DateTime dateTime53 = dateTime43.plusYears(14);
        boolean boolean54 = interval39.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Duration duration61 = period59.toDurationFrom(readableInstant60);
        long long62 = duration61.getMillis();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plus((org.joda.time.ReadableDuration) duration61);
        long long64 = duration61.getMillis();
        java.lang.String str65 = duration61.toString();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration61);
        boolean boolean67 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        boolean boolean69 = mutableInterval66.isBefore(1028711L);
        long long70 = mutableInterval66.getStartMillis();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime.Property property74 = dateTime71.monthOfYear();
        boolean boolean76 = dateTime71.isBefore(1645514244376L);
        org.joda.time.DateTime dateTime78 = dateTime71.withMillis(3291028685644L);
        boolean boolean79 = mutableInterval66.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2074-04-06T10:23:50.320-213:00/2074-04-06T10:23:50.320-213:00" + "'", str14, "2074-04-06T10:23:50.320-213:00/2074-04-06T10:23:50.320-213:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 35L + "'", long23 == 35L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(interval31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 623 + "'", int46 == 623);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 74 + "'", int47 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2074 + "'", int51 == 2074);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 35L + "'", long62 == 35L);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 35L + "'", long64 == 35L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT0.035S" + "'", str65, "PT0.035S");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 3732852230320L + "'", long70 == 3732852230320L);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        int int3 = timeZone1.getRawOffset();
        timeZone1.setID("2022-02-22T07:15:55.773Z/2022-02-22T07:15:55.773Z");
        timeZone1.setRawOffset(26220156);
        boolean boolean8 = timeZone1.observesDaylightTime();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str17 = dateTimeField13.getAsShortText(1645514151873L, locale16);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = dateTimeField13.getAsShortText(26153877, locale19);
        java.util.Locale.Builder builder21 = builder10.setLocale(locale19);
        java.util.Locale locale22 = builder10.build();
        java.lang.String str23 = timeZone1.getDisplayName(locale22);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+07:17");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10" + "'", str17, "10");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "26153877" + "'", str20, "26153877");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GMT+07:17" + "'", str23, "GMT+07:17");
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime8 = dateTime2.toDateTime(chronology6);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfYear();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.String str14 = dateTimeField10.getAsShortText((int) '#', locale12);
        java.text.DateFormatSymbols dateFormatSymbols15 = new java.text.DateFormatSymbols(locale12);
        java.util.Set<java.lang.Character> charSet16 = locale12.getExtensionKeys();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "35" + "'", str14, "35");
        org.junit.Assert.assertNotNull(charSet16);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime11 = localTime9.plusMinutes(123);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 23 + "'", int1 == 23);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2022);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) 32772, (int) (byte) 10);
        long long19 = duration18.getStandardHours();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) -1);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = period27.toDurationFrom(readableInstant28);
        long long30 = duration29.getMillis();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plus((org.joda.time.ReadableDuration) duration29);
        mutableInterval22.setDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration33 = mutableInterval22.toDuration();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks((int) (byte) 10);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = period38.toDurationFrom(readableInstant39);
        long long41 = duration40.getMillis();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plus((org.joda.time.ReadableDuration) duration40);
        long long43 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration40);
        boolean boolean44 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = period50.toDurationFrom(readableInstant51);
        long long53 = duration52.getMillis();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plus((org.joda.time.ReadableDuration) duration52);
        mutableInterval45.setDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = mutableInterval45.toDuration();
        boolean boolean57 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = dateTime60.plusWeeks((int) (byte) 1);
        int int63 = property59.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = interval66.isAfter((long) 10);
        org.joda.time.Duration duration69 = interval66.toDuration();
        org.joda.time.Duration duration72 = duration69.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration74 = interval73.toDuration();
        boolean boolean75 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime10.plus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration78 = duration74.minus(1645514291060L);
        org.joda.time.Duration duration80 = duration78.minus((long) 156);
        org.joda.time.Seconds seconds81 = duration78.toStandardSeconds();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 35L + "'", long30 == 35L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 35L + "'", long41 == 35L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 35L + "'", long43 == 35L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(seconds81);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((int) (byte) 10);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationFrom(readableInstant8);
        long long10 = duration9.getMillis();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plus((org.joda.time.ReadableDuration) duration9);
        int int12 = localDateTime5.getHourOfDay();
        int int13 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime5);
        java.lang.String str14 = localDateTime5.toString();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMillis(0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.era();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(chronology29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) 1, (long) ' ', periodType24, chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra(2);
        long long38 = chronology29.set((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 10);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(chronology46);
        org.joda.time.Period period49 = duration41.toPeriod(chronology46);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.year();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int55 = localDateTime51.get(dateTimeFieldType54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime15.property(dateTimeFieldType54);
        org.joda.time.LocalDateTime.Property property57 = localDateTime5.property(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime5.plusWeeks(796387);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2074-01-26T10:23:50.551" + "'", str14, "2074-01-26T10:23:50.551");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3291002630551L + "'", long38 == 3291002630551L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.minus((long) 10);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet14 = locale13.getExtensionKeys();
        java.lang.String str15 = property12.getAsText(locale13);
        org.joda.time.DateTime dateTime17 = property12.setCopy((int) '#');
        boolean boolean18 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime10.withWeekyear(2);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        org.joda.time.Period period23 = org.joda.time.Period.minutes(13);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType25 = periodType24.withMinutesRemoved();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime26, (org.joda.time.ReadablePartial) localTime27, periodType28);
        org.joda.time.Period period30 = period29.negated();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (-1), chronology32);
        org.joda.time.Period period34 = period33.toPeriod();
        org.joda.time.Period period35 = period30.withFields((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.hours();
        boolean boolean37 = period30.isSupported(durationFieldType36);
        int int38 = periodType25.indexOf(durationFieldType36);
        int int39 = period23.indexOf(durationFieldType36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology(chronology40);
        org.joda.time.DurationField durationField42 = chronology41.years();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(chronology41);
        org.joda.time.DurationField durationField44 = durationFieldType36.getField(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.centuryOfEra();
        org.joda.time.DateTime dateTime46 = dateTime21.toDateTime(chronology41);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "37430592" + "'", str15, "37430592");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime3 = dateTime0.minusSeconds(13);
        org.joda.time.DateTime dateTime5 = dateTime0.plusHours((-914159));
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis(11);
        org.joda.time.DateTime dateTime9 = dateTime5.minus(16830719L);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime11.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str19 = dateTimeFieldType18.toString();
        int int20 = dateTime17.get(dateTimeFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime10.withField(dateTimeFieldType18, 5977299);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5977299 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "37430649" + "'", str4, "37430649");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 623 + "'", int14 == 623);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "millisOfSecond" + "'", str19, "millisOfSecond");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 685 + "'", int20 == 685);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime4 = dateTime1.minusMonths(26165);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.Period period9 = period6.normalizedStandard();
        org.joda.time.Period period11 = period6.plusSeconds((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime4.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime14 = dateTime4.withYearOfCentury(34);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale15.getDisplayScript();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        int int21 = dateTimeField19.getLeapAmount((long) 26151451);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int24 = dateTimeField19.getMaximumShortTextLength(locale23);
        java.lang.String str25 = locale15.getDisplayCountry(locale23);
        java.lang.String str26 = locale15.toLanguageTag();
        java.util.Set<java.lang.String> strSet27 = locale15.getUnicodeLocaleAttributes();
        java.util.Calendar calendar28 = dateTime14.toCalendar(locale15);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(10L, chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = dateTime38.get(dateTimeFieldType39);
        int int41 = dateTime32.get(dateTimeFieldType39);
        boolean boolean42 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime.Property property43 = dateTime32.weekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeUtils.getZone(dateTimeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone45);
        boolean boolean47 = dateTimeZone45.isFixed();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(3786912000000L, dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime14.withZone(dateTimeZone45);
        boolean boolean50 = dateTimeZone45.isFixed();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "China" + "'", str25, "China");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh-CN" + "'", str26, "zh-CN");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-66368306169332,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=135,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=313,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=23,SECOND=50,MILLISECOND=668,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 623 + "'", int35 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1969 + "'", int40 == 1969);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2074 + "'", int41 == 2074);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DateTime dateTime12 = dateTime6.toDateTime(chronology10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 1, (long) ' ', periodType5, chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(2);
        long long19 = chronology10.set((org.joda.time.ReadablePartial) localDateTime15, (long) (short) 10);
        org.joda.time.DurationField durationField20 = chronology10.seconds();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 2782, 60000L, chronology10);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime22.getMinuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(10L, chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = dateTime28.get(dateTimeFieldType29);
        int int31 = dateTime22.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime32.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(10L, chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        int int44 = dateTime42.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusMinutes((int) (short) 100);
        org.joda.time.Interval interval47 = duration39.toIntervalTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period21, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.PeriodFormatter periodFormatter49 = null;
        java.lang.String str50 = period21.toString(periodFormatter49);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3291002630723L + "'", long19 == 3291002630723L);
        org.junit.Assert.assertNotNull(durationField20);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 623 + "'", int25 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1969 + "'", int30 == 1969);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2074 + "'", int31 == 2074);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 623 + "'", int35 == 623);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1969 + "'", int44 == 1969);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT57.218S" + "'", str50, "PT57.218S");
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        long long20 = duration18.getStandardSeconds();
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(10L, chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.minus(100L);
        int int28 = dateTime27.getYear();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1969 + "'", int28 == 1969);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime.Property property16 = dateTime2.year();
        int int17 = dateTime2.getYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2074 + "'", int17 == 2074);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        long long11 = dateTimeZone7.nextTransition((long) 436);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMillis(0);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.Duration duration24 = duration20.withDurationAdded((long) 32772, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration24, 70);
        boolean boolean27 = dateTimeZone7.isLocalDateTimeGap(localDateTime12);
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeZone7.getName(1646119105967L, locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(639, 61, 6333845, 52678278, 1059, 39626148, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52678278 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-213:00" + "'", str9, "-213:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 436L + "'", long11 == 436L);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "-213:00" + "'", str30, "-213:00");
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime.Property property4 = dateTime0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime6 = dateTime0.plus(readablePeriod5);
        int int7 = dateTime0.getMillisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 829 + "'", int7 == 829);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        int int13 = localTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localTime10.equals((java.lang.Object) dateTimeFieldType17);
        int int20 = dateTime0.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime22 = dateTime0.minusYears((int) 'a');
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        org.joda.time.DurationField durationField24 = property23.getDurationField();
        org.joda.time.DurationField durationField25 = property23.getRangeDurationField();
        boolean boolean26 = durationField25.isSupported();
        java.lang.String str27 = durationField25.getName();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37430846 + "'", int13 == 37430846);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2074 + "'", int20 == 2074);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "years" + "'", str27, "years");
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getDisplayScript();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        int int26 = dateTimeField24.getLeapAmount((long) 26151451);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int29 = dateTimeField24.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale20.getDisplayCountry(locale28);
        java.lang.String str31 = locale20.getISO3Language();
        java.lang.String str32 = locale20.getDisplayName();
        java.util.Calendar calendar33 = dateTime17.toCalendar(locale20);
        int int34 = calendar33.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar33.set(21, (-2616751));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=3291002630861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2074,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=96,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=23,SECOND=50,MILLISECOND=861,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(435L);
        long long2 = duration1.getMillis();
        org.joda.time.Duration duration4 = duration1.minus((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours(1645514260921L);
        int int7 = duration4.compareTo((org.joda.time.ReadableDuration) duration6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes8 = duration6.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 98730855655260");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 26100000L + "'", long2 == 26100000L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(435);
        org.joda.time.Period period3 = period1.withMillis(38222);
        org.joda.time.format.PeriodFormatter periodFormatter4 = null;
        java.lang.String str5 = period3.toString(periodFormatter4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) 10);
        org.joda.time.Period period19 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plusWeeks((int) (byte) 1);
        int int25 = property21.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration7.withDurationAdded((org.joda.time.ReadableDuration) duration34, 26160257);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        boolean boolean44 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration43);
        java.lang.String str45 = duration43.toString();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfDay();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        int int51 = dateTime48.getMinuteOfDay();
        int int52 = dateTime48.getYearOfCentury();
        int int53 = dateTime48.getDayOfMonth();
        org.joda.time.DateTime dateTime55 = dateTime48.minusWeeks((int) (short) 0);
        boolean boolean56 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime48);
        int int57 = dateTime46.getDayOfYear();
        org.joda.time.Period period58 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period59 = period3.withFields((org.joda.time.ReadablePeriod) period58);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT473.222S" + "'", str5, "PT473.222S");
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 623 + "'", int11 == 623);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 623 + "'", int51 == 623);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 74 + "'", int52 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 96 + "'", int57 == 96);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        int int5 = localTime4.getMinuteOfHour();
        int int6 = localTime4.size();
        org.joda.time.LocalTime localTime8 = localTime4.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property9 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property9.addCopy(122);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime13, (org.joda.time.ReadablePartial) localTime14, periodType15);
        org.joda.time.Period period17 = period16.negated();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (-1), chronology19);
        org.joda.time.Period period21 = period20.toPeriod();
        org.joda.time.Period period22 = period17.withFields((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DurationField durationField27 = durationFieldType23.getField(chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getChronology(chronology28);
        boolean boolean30 = durationFieldType23.isSupported(chronology29);
        boolean boolean31 = period17.isSupported(durationFieldType23);
        org.joda.time.LocalTime localTime33 = localTime12.withFieldAdded(durationFieldType23, 9);
        int int34 = periodType3.indexOf(durationFieldType23);
        org.joda.time.PeriodType periodType35 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType36 = periodType3.withMillisRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 52442703, (long) 38270, periodType3);
        int int38 = periodType3.size();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withFieldAdded(durationFieldType4, 1970);
        boolean boolean7 = dateFormatSymbols1.equals((java.lang.Object) durationFieldType4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        java.lang.String str7 = dateTimeZone5.getName((long) ' ');
        long long9 = dateTimeZone5.previousTransition((long) (short) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) dateTime2, dateTimeZone5);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime13.getMinuteOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        int int22 = dateTime13.get(dateTimeFieldType20);
        boolean boolean23 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property24 = dateTime13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeUtils.getZone(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime13, dateTimeZone26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(10L, chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.DateMidnight dateMidnight33 = dateTime30.toDateMidnight();
        org.joda.time.DateTime dateTime34 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDate localDate36 = localDate27.plusYears((int) '4');
        org.joda.time.LocalDate localDate38 = localDate36.plusWeeks(16);
        org.joda.time.DateTime dateTime39 = localDate36.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(156);
        org.joda.time.DateTime dateTime42 = localDate36.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime10.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(0);
        org.joda.time.DateTime.Property property46 = dateTime45.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-213:00" + "'", str7, "-213:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 623 + "'", int16 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2074 + "'", int22 == 2074);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1969 + "'", int32 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate0.minusYears((int) '#');
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        int int8 = periodType6.indexOf(durationFieldType7);
        org.joda.time.LocalDate localDate10 = localDate4.withFieldAdded(durationFieldType7, 156);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate16 = localDate12.minusYears((int) '#');
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(10L, chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        int int27 = dateTime25.get(dateTimeFieldType26);
        int int28 = dateTime19.get(dateTimeFieldType26);
        boolean boolean29 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property30 = dateTime19.weekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone(dateTimeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, dateTimeZone32);
        boolean boolean34 = dateTimeZone32.isFixed();
        org.joda.time.DateMidnight dateMidnight35 = localDate16.toDateMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(3240000L, dateTimeZone32);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        int int40 = dateTime37.getMinuteOfDay();
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime43 = dateTime37.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateTime37.toDateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime37.minus((long) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths(7);
        boolean boolean51 = dateTime49.isBefore(1645514170000L);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDate localDate53 = localDate4.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.LocalDate.Property property54 = localDate4.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 623 + "'", int22 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1969 + "'", int27 == 1969);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2074 + "'", int28 == 2074);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateMidnight35);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 623 + "'", int40 == 623);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(38222);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(chronology15);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime8.toMutableDateTime(chronology15);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period26 = period24.minusHours(26155103);
        int[] intArray29 = chronology15.get((org.joda.time.ReadablePeriod) period26, 1645514177012L, (long) 21);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.centuryOfEra();
        org.joda.time.DurationField durationField34 = property33.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime35 = property33.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusHours(26228346);
        int int38 = localDateTime37.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusWeeks(52488713);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType46 = periodType45.withSecondsRemoved();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getChronology(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.hourOfHalfday();
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(chronology51);
        org.joda.time.Period period54 = new org.joda.time.Period((long) 1, (long) ' ', periodType46, chronology51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withCenturyOfEra(2);
        long long60 = chronology51.set((org.joda.time.ReadablePartial) localDateTime56, (long) (short) 10);
        java.lang.String str61 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField62 = chronology51.millisOfSecond();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 453, chronology51);
        org.joda.time.Period period65 = new org.joda.time.Period((long) (short) 10);
        int[] intArray67 = chronology51.get((org.joda.time.ReadablePeriod) period65, (long) 659);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField31.addWrapField((org.joda.time.ReadablePartial) localDateTime40, 809, intArray67, 25200);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 809");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-52, -1, -3, 0, -7, -16, -16, -991]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 66 + "'", int38 == 66);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3291002631059L + "'", long60 == 3291002631059L);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[-213:00]" + "'", str61, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 659]");
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.minus((long) 10);
        org.joda.time.DateTime dateTime12 = dateTime0.minusHours(7);
        org.joda.time.DateTime.Property property13 = dateTime0.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime16 = property13.roundFloorCopy();
        java.lang.String str17 = property13.getName();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfWeek" + "'", str17, "dayOfWeek");
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getISO3Language();
        java.util.Calendar.Builder builder13 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder17 = builder0.setDate(20, 26160257, 16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        int int22 = dateTimeField20.getLeapAmount((long) 26151451);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int25 = dateTimeField20.getMaximumShortTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        int int33 = dateTime29.getYearOfCentury();
        int int34 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime29.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        int int39 = dateTimeField38.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = period44.toDurationFrom(readableInstant45);
        long long47 = duration46.getMillis();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plus((org.joda.time.ReadableDuration) duration46);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime42, (int) (short) 1, locale50);
        int int52 = dateTimeField28.getMaximumTextLength(locale50);
        java.lang.String str53 = locale24.getDisplayLanguage(locale50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime57.getMinuteOfDay();
        int int61 = dateTime57.getYearOfCentury();
        int int62 = dateTime57.getDayOfMonth();
        org.joda.time.DateTime dateTime64 = dateTime57.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        int int67 = dateTimeField66.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks((int) (byte) 10);
        org.joda.time.Period period72 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Duration duration74 = period72.toDurationFrom(readableInstant73);
        long long75 = duration74.getMillis();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.plus((org.joda.time.ReadableDuration) duration74);
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str79 = dateTimeField66.getAsText((org.joda.time.ReadablePartial) localDateTime70, (int) (short) 1, locale78);
        int int80 = dateTimeField56.getMaximumTextLength(locale78);
        java.lang.String str81 = locale24.getDisplayLanguage(locale78);
        java.util.Calendar.Builder builder82 = builder17.setLocale(locale24);
        java.util.Calendar.Builder builder87 = builder82.setTimeOfDay((int) (byte) 10, 26153423, (int) (short) 0, 1640);
        java.util.Calendar.Builder builder91 = builder82.setDate(721, 52458322, 0);
        java.util.Calendar calendar92 = builder91.build();
        java.util.Calendar.Builder builder96 = builder91.setWeekDate(20, (int) (short) 10, 52503850);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder98 = builder91.setInstant(3291028675814L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 623 + "'", int32 == 623);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 74 + "'", int33 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1439 + "'", int39 == 1439);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35L + "'", long47 == 35L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 623 + "'", int60 == 623);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 74 + "'", int61 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1439 + "'", int67 == 1439);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 35L + "'", long75 == 35L);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=137917050744181640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4372387,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=122,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=23,SECOND=1,MILLISECOND=640,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(26153527);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) 0);
        int int13 = property7.getMinimumValueOverall();
        long long14 = property7.remainder();
        org.joda.time.LocalTime localTime15 = property7.withMaximumValue();
        int int16 = localTime15.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 51213L + "'", long14 == 51213L);
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        int int13 = localTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localTime10.equals((java.lang.Object) dateTimeFieldType17);
        int int20 = dateTime0.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime22 = dateTime0.minusYears((int) 'a');
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        org.joda.time.DurationField durationField24 = property23.getDurationField();
        org.joda.time.DurationField durationField25 = property23.getRangeDurationField();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.lang.String str27 = locale26.toLanguageTag();
        java.lang.String str28 = property23.getAsText(locale26);
        org.joda.time.DateTime dateTime29 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(51);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37431225 + "'", int13 == 37431225);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2074 + "'", int20 == 2074);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh-TW" + "'", str27, "zh-TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u56db\u6708" + "'", str28, "\u56db\u6708");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration7 = period1.toDurationTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        boolean boolean13 = duration7.isEqual((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(2);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period19.toDurationFrom(readableInstant20);
        org.joda.time.Seconds seconds22 = duration21.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration21, 2022);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) 32772, (int) (byte) 10);
        long long33 = duration32.getStandardHours();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) -1);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.plusWeeks((int) (byte) 1);
        int int41 = property37.compareTo((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean42 = duration32.equals((java.lang.Object) property37);
        org.joda.time.Duration duration43 = duration11.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration45 = duration43.withMillis(3291028504856L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        int int7 = period5.getValue(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration11 = period5.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology12);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) 2, chronology12);
        org.joda.time.LocalTime localTime18 = localTime16.minusMinutes(26207293);
        org.joda.time.LocalTime.Property property19 = localTime16.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = property19.setCopy("52669969");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52669969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime3 = dateTime0.plusWeeks(100);
        org.joda.time.Period period12 = new org.joda.time.Period(22, (int) (short) 10, (int) '#', (int) (short) 100, 32772, 3, 0, (int) ' ');
        org.joda.time.DateTime dateTime13 = dateTime0.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        int int20 = period18.getValue(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime26 = dateTime13.toDateTime(chronology25);
        java.lang.String str27 = dateTime13.toString();
        int int28 = dateTime13.getEra();
        org.joda.time.DateTime dateTime30 = dateTime13.plus(7983879302211L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2101-10-14T22:26:51.340-213:00" + "'", str27, "2101-10-14T22:26:51.340-213:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDateTime24.getFieldType((int) (short) 1);
        int int27 = localDateTime23.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        int int34 = period32.getValue(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded((long) 453, 436);
        org.joda.time.Chronology chronology43 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType26.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfDay();
        int int47 = dateTimeField45.get(93764293704000L);
        java.lang.String str49 = dateTimeField45.getAsShortText(1645514230885L);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3291002631333L + "'", long12 == 3291002631333L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2074-04-06T10:23:51.333-213:00/2074-04-06T10:23:51.333-213:00" + "'", str13, "2074-04-06T10:23:51.333-213:00/2074-04-06T10:23:51.333-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 504 + "'", int47 == 504);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "37030" + "'", str49, "37030");
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime9.era();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        boolean boolean32 = dateTime31.isEqualNow();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime9.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime36.getMinuteOfDay();
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime36.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime36.toDateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime36.minus((long) 10);
        boolean boolean47 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Chronology chronology51 = dateTimeFormatter50.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeUtils.getZone(dateTimeZone53);
        java.lang.String str56 = dateTimeZone54.getName((long) ' ');
        java.lang.String str58 = dateTimeZone54.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(0L, dateTimeZone54);
        long long62 = dateTimeZone54.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter50.withZone(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter50.withPivotYear(57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter66.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser68 = dateTimeFormatter67.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = dateTime9.toString(dateTimeFormatter67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 623 + "'", int39 == 623);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "-213:00" + "'", str56, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-213:00" + "'", str58, "-213:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645514153208L + "'", long62 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNull(dateTimeParser68);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeField5.set(1645514384142L, 1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        long long11 = duration7.getMillis();
        org.joda.time.Period period12 = duration7.toPeriod();
        org.joda.time.Duration duration15 = duration7.withDurationAdded(1645514260921L, 45);
        java.lang.String str16 = duration15.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT74048141741.480S" + "'", str16, "PT74048141741.480S");
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        boolean boolean8 = localTime2.isSupported(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundHalfCeilingCopy();
        boolean boolean12 = calendar1.after((java.lang.Object) property9);
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        int int14 = property9.getMaximumValueOverall();
        org.joda.time.LocalTime localTime16 = property9.addCopy(9);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = property9.setCopy("", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514521805,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=1,MILLISECOND=805,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfDay(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = localTime0.withMinuteOfHour(5905484);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5905484 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 23 + "'", int1 == 23);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DurationField durationField4 = chronology3.years();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.hourOfDay();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 10074, 1645514199442L, chronology3);
        java.lang.String str7 = chronology3.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology3.getDateTimeMillis(5956623, (-756393), 5876009, 0, 118, 26301292, 52459);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 118 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[-213:00]" + "'", str7, "ISOChronology[-213:00]");
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.LocalDate localDate7 = localDate4.withYear(38270);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        long long11 = dateTimeField9.roundHalfFloor(1645514220576L);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeUtils.getZone(dateTimeZone16);
        java.lang.String str19 = dateTimeZone17.getName((long) ' ');
        long long21 = dateTimeZone17.previousTransition((long) (short) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) dateTime14, dateTimeZone17);
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = dateTimeZone17.getShortName(1645514170416L, locale24);
        int int27 = dateTimeField9.getMaximumTextLength(locale24);
        boolean boolean28 = dateTimeField9.isLenient();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 946684800000L + "'", long11 == 946684800000L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-213:00" + "'", str19, "-213:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-213:00" + "'", str26, "-213:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        java.lang.String str10 = interval9.toString();
        org.joda.time.DateTime dateTime11 = interval9.getEnd();
        org.joda.time.Chronology chronology12 = interval9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.seconds();
        org.joda.time.DurationField durationField14 = chronology12.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(68400000, (-1089239880), 6015213, 24, 26178, 26176, 108, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2074-04-06T10:23:51.533-213:00/2074-04-06T10:23:51.533-213:00" + "'", str10, "2074-04-06T10:23:51.533-213:00/2074-04-06T10:23:51.533-213:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 10, chronology1);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusWeeks((int) (byte) 10);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = period8.toDurationFrom(readableInstant9);
        long long11 = duration10.getMillis();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plus((org.joda.time.ReadableDuration) duration10);
        mutableInterval3.setDurationAfterStart((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration14 = mutableInterval3.toDuration();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (byte) 10);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period19.toDurationFrom(readableInstant20);
        long long22 = duration21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plus((org.joda.time.ReadableDuration) duration21);
        long long24 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration21);
        boolean boolean25 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration21);
        long long26 = duration21.getStandardDays();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        java.lang.String str30 = interval29.toString();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.Chronology chronology32 = interval29.getChronology();
        org.joda.time.Period period33 = duration21.toPeriod(chronology32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime2.withChronology(chronology32);
        int int36 = dateTime2.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2074-04-06T10:23:51.584-213:00/2074-04-06T10:23:51.584-213:00" + "'", str30, "2074-04-06T10:23:51.584-213:00/2074-04-06T10:23:51.584-213:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        int int5 = calendar1.getWeekYear();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514522013,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=2,MILLISECOND=13,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514522013L + "'", long2 == 1645514522013L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        java.util.Locale locale2 = new java.util.Locale("2022-02-22T07:17:06.216Z/2022-02-22T07:17:06.216Z", "2074-04-06T17:39:37.901-213:00/2074-04-06T17:39:37.901-213:00");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-22t07:17:06.216z/2022-02-22t07:17:06.216z_2074-04-06T17:39:37.901-213:00/2074-04-06T17:39:37.901-213:00");
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        int int9 = dateTime7.getYear();
        int int10 = dateTime7.getEra();
        org.joda.time.DateTime dateTime12 = dateTime7.withYearOfCentury(21);
        org.joda.time.DateTime dateTime14 = dateTime7.withDayOfYear(90);
        org.joda.time.LocalDateTime localDateTime15 = dateTime7.toLocalDateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        int int20 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime.Property property21 = dateTime16.year();
        org.joda.time.DateTime dateTime22 = property21.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withFieldAdded(durationFieldType25, 1970);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Interval interval34 = interval32.toInterval();
        long long35 = interval32.getEndMillis();
        java.lang.String str36 = interval32.toString();
        org.joda.time.DateTime dateTime37 = interval32.getStart();
        org.joda.time.Chronology chronology38 = interval32.getChronology();
        org.joda.time.Period period39 = new org.joda.time.Period(0L, 1645514152681L, chronology38);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusDays(100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDateTime47.getFieldType((int) (short) 1);
        int int50 = localDateTime46.get(dateTimeFieldType49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property52 = dateTime51.millisOfDay();
        org.joda.time.DateTime dateTime53 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        int int57 = period55.getValue(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration61 = period55.toDurationTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime65 = dateTime59.withDurationAdded((long) 453, 436);
        org.joda.time.Chronology chronology66 = dateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType49.getField(chronology66);
        boolean boolean68 = dateTime22.isSupported(dateTimeFieldType49);
        boolean boolean69 = localDateTime15.isSupported(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType70 = dateTimeFieldType49.getDurationType();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2074 + "'", int9 == 2074);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 623 + "'", int19 == 623);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 74 + "'", int20 == 74);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3291002631673L + "'", long35 == 3291002631673L);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2074-04-06T10:23:51.673-213:00/2074-04-06T10:23:51.673-213:00" + "'", str36, "2074-04-06T10:23:51.673-213:00/2074-04-06T10:23:51.673-213:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(durationFieldType70);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval2);
        mutableInterval2.setEndMillis(1645514221950L);
        org.joda.time.Duration duration7 = mutableInterval2.toDuration();
        org.joda.time.MutableInterval mutableInterval8 = mutableInterval2.toMutableInterval();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (-1), chronology10);
        org.joda.time.Period period12 = period11.toPeriod();
        int int13 = period12.size();
        int int14 = period12.getMinutes();
        int[] intArray15 = period12.getValues();
        org.joda.time.Period period17 = period12.withMonths(26155103);
        org.joda.time.Period period19 = period17.minusDays((-292275054));
        java.lang.String str20 = period17.toString();
        org.joda.time.Period period22 = period17.plusYears(122);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period22);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P26155103MT0.001S" + "'", str20, "P26155103MT0.001S");
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withYear(26151451);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusSeconds((int) (byte) 1);
        int int27 = localDateTime26.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withCenturyOfEra(87);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 26 + "'", int27 == 26);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property7 = localDate4.dayOfYear();
        org.joda.time.LocalDate localDate9 = localDate4.minusDays(26160257);
        org.joda.time.Period period11 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.days();
        org.joda.time.Period period13 = period11.normalizedStandard(periodType12);
        org.joda.time.LocalDate localDate14 = localDate4.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateMidnight dateMidnight15 = localDate4.toDateMidnight();
        org.joda.time.LocalDate localDate17 = localDate4.plusYears(37430846);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval6 = localDate2.toInterval();
        int int7 = localDate2.getYearOfEra();
        int int8 = localDate2.getDayOfYear();
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(5869107);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 38274 + "'", int7 == 38274);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 96 + "'", int8 == 96);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = interval11.isAfter((long) 10);
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        boolean boolean18 = duration8.isEqual((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration20 = duration14.plus((long) 'x');
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean25 = interval23.isAfter((long) 10);
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        boolean boolean39 = duration29.isEqual((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration41 = duration35.plus((long) 'x');
        boolean boolean42 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Days days43 = duration14.toStandardDays();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(days43);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.withMaximumValue();
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.LocalDate localDate9 = localDate6.withDayOfYear((int) (short) 10);
        java.util.Date date10 = localDate9.toDate();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        java.util.Date date12 = localDate11.toDate();
        date12.setMinutes(1969);
        java.time.Instant instant15 = date12.toInstant();
        boolean boolean16 = date10.before(date12);
        int int17 = date10.getDay();
        int int18 = date10.getDay();
        java.lang.String str19 = date10.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 10 00:00:00 GMT-E3:00 292278993");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sat Apr 07 08:49:00 GMT-E3:00 2074");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Thu Jan 10 00:00:00 GMT-E3:00 292278993" + "'", str19, "Thu Jan 10 00:00:00 GMT-E3:00 292278993");
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.Period period6 = duration1.toPeriod(chronology3);
        java.lang.String str7 = period6.toString();
        org.joda.time.Period period9 = period6.minusHours(2023);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.001S" + "'", str7, "PT0.001S");
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean7 = interval2.equals((java.lang.Object) dateTimeFieldType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = interval2.contains(readableInstant8);
        java.lang.Object obj10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval(obj10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval14.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.Period period18 = interval16.toPeriod();
        org.joda.time.Interval interval19 = interval16.toInterval();
        boolean boolean20 = interval11.isAfter((org.joda.time.ReadableInterval) interval19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        java.lang.String str24 = interval23.toString();
        boolean boolean25 = interval23.isAfterNow();
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime27, (org.joda.time.ReadablePartial) localTime28, periodType29);
        org.joda.time.Period period31 = period30.negated();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (-1), chronology33);
        org.joda.time.Period period35 = period34.toPeriod();
        org.joda.time.Period period36 = period31.withFields((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.days();
        org.joda.time.Period period40 = period38.normalizedStandard(periodType39);
        boolean boolean42 = periodType39.equals((java.lang.Object) 6);
        org.joda.time.Period period43 = period36.normalizedStandard(periodType39);
        org.joda.time.Interval interval44 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period46 = period43.minusYears(0);
        org.joda.time.Interval interval47 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        boolean boolean48 = interval2.overlaps((org.joda.time.ReadableInterval) interval47);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime51 = localTime49.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.LocalTime localTime53 = localTime51.withFields(readablePartial52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology55);
        int int57 = localTime56.getSecondOfMinute();
        org.joda.time.Period period58 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime51, (org.joda.time.ReadablePartial) localTime56);
        org.joda.time.LocalTime localTime60 = localTime51.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.millisOfDay();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        int int66 = dateTime63.getMinuteOfDay();
        int int67 = dateTime63.getYearOfCentury();
        int int68 = dateTime63.getDayOfMonth();
        org.joda.time.DateTime dateTime70 = dateTime63.minusWeeks((int) (short) 0);
        boolean boolean71 = dateTime61.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime.Property property72 = dateTime61.weekOfWeekyear();
        org.joda.time.DateTime dateTime73 = property72.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime74 = localTime51.toDateTime((org.joda.time.ReadableInstant) dateTime73);
        int int75 = dateTime74.getMillisOfSecond();
        org.joda.time.DateTime dateTime77 = dateTime74.plus(3291028498134L);
        boolean boolean78 = interval47.isAfter((org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3291002631963L + "'", long5 == 3291002631963L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2074-04-06T10:23:51.963-213:00/2074-04-06T10:23:51.963-213:00" + "'", str24, "2074-04-06T10:23:51.963-213:00/2074-04-06T10:23:51.963-213:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property62);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 623 + "'", int66 == 623);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 74 + "'", int67 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 960 + "'", int75 == 960);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(26229);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) 10);
        org.joda.time.Period period13 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        int int19 = property15.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration28, 26160257);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.minusDays(12);
        org.joda.time.DateTime dateTime38 = dateTime36.minusYears(382);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withField(dateTimeFieldType39, 21);
        org.joda.time.DateTime dateTime42 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadableDuration readableDuration44 = null;
        boolean boolean45 = duration31.isEqual(readableDuration44);
        org.joda.time.Period period46 = duration31.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 623 + "'", int5 == 623);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.joda.time.Period period1 = org.joda.time.Period.millis(814);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime2.minusDays(12);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = period1.multipliedBy(38048);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.minusSeconds(436);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTime();
        java.lang.String str27 = dateTime25.toString();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.minus(readablePeriod28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime25.withYearOfCentury(359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 359 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:52.091-213:00/2074-04-06T10:23:52.091-213:00" + "'", str3, "2074-04-06T10:23:52.091-213:00/2074-04-06T10:23:52.091-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2074-04-06T10:16:36.091-213:00" + "'", str27, "2074-04-06T10:16:36.091-213:00");
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 1, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField26.getMaximumValue(readablePartial40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusYears(26151451);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        int int50 = period48.getValue(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        int int61 = period60.size();
        int int62 = period60.getMinutes();
        int[] intArray63 = period60.getValues();
        int int64 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray63);
        int[] intArray66 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDateTime15, 6, intArray63, 0);
        java.util.Calendar.Builder builder67 = builder0.setFields(intArray66);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale68);
        long long70 = calendar69.getTimeInMillis();
        long long71 = calendar69.getTimeInMillis();
        int int73 = calendar69.getMinimum(0);
        calendar69.set((int) (short) 10, (int) (short) 10, (-292275054), 26153423, 32772, 26178);
        java.util.TimeZone timeZone81 = calendar69.getTimeZone();
        java.util.Calendar.Builder builder82 = builder0.setTimeZone(timeZone81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = timeZone81.getDisplayName(true, 5869929);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 5869929");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 623 + "'", int20 == 623);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 74 + "'", int21 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=10,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=-292275054,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=26153423,MINUTE=32772,SECOND=26178,MILLISECOND=485,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514522485L + "'", long70 == 1645514522485L);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645514522485L + "'", long71 == 1645514522485L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "GMT-E3:00");
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = interval11.isAfter((long) 10);
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        boolean boolean18 = duration8.isEqual((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration20 = duration14.plus((long) 'x');
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        int int24 = period22.getValue(0);
        org.joda.time.Period period25 = period22.normalizedStandard();
        org.joda.time.Period period27 = period22.plusSeconds((int) ' ');
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfYear();
        boolean boolean34 = periodType28.equals((java.lang.Object) dateTimeField33);
        org.joda.time.Period period35 = duration20.toPeriod(periodType28);
        int int36 = period35.getMillis();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 120 + "'", int36 == 120);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String str52 = dateFormatSymbols51.getLocalPatternChars();
        java.lang.String[] strArray53 = dateFormatSymbols51.getWeekdays();
        java.lang.String[] strArray54 = dateFormatSymbols51.getMonths();
        java.lang.String[] strArray55 = dateFormatSymbols51.getShortWeekdays();
        java.lang.String[] strArray56 = dateFormatSymbols51.getShortWeekdays();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 623 + "'", int6 == 623);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74 + "'", int7 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 623 + "'", int30 == 623);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 74 + "'", int31 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str52, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(100);
        int int3 = localDate0.getEra();
        java.lang.String str4 = localDate0.toString();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay(1645514152681L);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localTime7.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property14 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime17 = localTime15.minusSeconds(2782);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (-1), chronology19);
        org.joda.time.Period period21 = period20.toPeriod();
        int int22 = period21.size();
        int int23 = period21.getMinutes();
        int[] intArray24 = period21.getValues();
        org.joda.time.Duration duration25 = period21.toStandardDuration();
        org.joda.time.LocalTime localTime27 = localTime15.withPeriodAdded((org.joda.time.ReadablePeriod) period21, 0);
        org.joda.time.LocalTime localTime29 = localTime15.withMillisOfSecond(12);
        int int30 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime15);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = localDate0.isAfter((org.joda.time.ReadablePartial) localTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2074-04-06" + "'", str4, "2074-04-06");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1969 + "'", int12 == 1969);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Duration duration22 = duration18.withDurationAdded((long) 32772, (int) (byte) 10);
        long long23 = duration22.getStandardSeconds();
        int int24 = duration11.compareTo((org.joda.time.ReadableDuration) duration22);
        java.lang.String str25 = duration22.toString();
        org.joda.time.Duration duration26 = duration22.toDuration();
        long long27 = duration22.getStandardHours();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:52.245-213:00/2074-04-06T10:23:52.245-213:00" + "'", str3, "2074-04-06T10:23:52.245-213:00/2074-04-06T10:23:52.245-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 327L + "'", long23 == 327L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT327.755S" + "'", str25, "PT327.755S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology1);
        int int3 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime5 = localTime2.minusMinutes(2022);
        org.joda.time.LocalTime localTime7 = localTime5.minusSeconds(9);
        org.joda.time.LocalTime localTime9 = localTime5.plusSeconds(1970);
        boolean boolean10 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime localTime12 = localTime5.plusMillis(457072);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localTime5.getFieldType(3888);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3888");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        int int3 = localDate0.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate0.withDayOfWeek(5884928);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5884928 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        java.lang.String str14 = dateTimeZone10.getName((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645514182943L, dateTimeZone10);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.plusWeeks((int) (byte) 1);
        int int23 = property19.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        int int40 = period38.getValue(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration44 = period38.toDurationTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean46 = interval33.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime();
        int int48 = localTime47.getMinuteOfHour();
        int int49 = localTime47.size();
        org.joda.time.LocalTime localTime51 = localTime47.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime localTime53 = localTime47.plusMinutes(0);
        org.joda.time.DateTime dateTime54 = localTime47.toDateTimeToday();
        boolean boolean55 = dateTime36.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime36.withDurationAdded(3291028760112L, 714);
        int int59 = property17.getDifference((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3291002632274L + "'", long6 == 3291002632274L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2074-04-06T10:23:52.274-213:00/2074-04-06T10:23:52.274-213:00" + "'", str7, "2074-04-06T10:23:52.274-213:00/2074-04-06T10:23:52.274-213:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-213:00" + "'", str12, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-213:00" + "'", str14, "-213:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 23 + "'", int48 == 23);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-27215740) + "'", int59 == (-27215740));
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology1);
        int int3 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime5 = localTime2.minusMinutes(2022);
        org.joda.time.LocalTime localTime7 = localTime5.minusSeconds(9);
        org.joda.time.LocalTime localTime9 = localTime5.plusSeconds(1970);
        int int10 = localTime9.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime9.minusMillis(2036);
        org.joda.time.LocalTime localTime14 = localTime9.minusHours(52445959);
        org.joda.time.LocalTime localTime16 = localTime9.minusSeconds(0);
        int int17 = localTime9.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.Period period12 = duration7.toPeriod(chronology9);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeUtils.getZone(dateTimeZone15);
        boolean boolean18 = dateTimeZone16.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology19 = chronology9.withZone(dateTimeZone16);
        boolean boolean20 = calendar1.after((java.lang.Object) chronology9);
        calendar1.setLenient(false);
        calendar1.set((int) 'a', (int) 'u', 817, 26171, 52458322, 4);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = calendar1.getTimeInMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=97,MONTH=117,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=817,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=26171,MINUTE=52458322,SECOND=4,MILLISECOND=784,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514522784L + "'", long2 == 1645514522784L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514522784L + "'", long3 == 1645514522784L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(3291022800000L);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 886, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        java.lang.String str14 = dateTimeZone10.getName((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645514182943L, dateTimeZone10);
        long long18 = dateTimeZone10.convertUTCToLocal((-292260000L));
        int int20 = dateTimeZone10.getOffset(1645514201717L);
        long long24 = dateTimeZone10.convertLocalToUTC((long) 30864, false, (long) 26184703);
        java.util.TimeZone timeZone25 = dateTimeZone10.toTimeZone();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone25);
        // The following exception was thrown during execution in test generation
        try {
            calendar26.set(6017, 174);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6017");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3291002632517L + "'", long6 == 3291002632517L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2074-04-06T10:23:52.517-213:00/2074-04-06T10:23:52.517-213:00" + "'", str7, "2074-04-06T10:23:52.517-213:00/2074-04-06T10:23:52.517-213:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-213:00" + "'", str12, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-213:00" + "'", str14, "-213:00");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1059060000L) + "'", long18 == (-1059060000L));
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-766800000) + "'", int20 == (-766800000));
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 766830864L + "'", long24 == 766830864L);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT-E3:00");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514522901,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=2,MILLISECOND=901,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        boolean boolean12 = mutableInterval0.containsNow();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str16 = interval15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str20 = interval19.toString();
        org.joda.time.DateTime dateTime21 = interval19.getEnd();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks((int) (byte) 10);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        long long29 = duration28.getMillis();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plus((org.joda.time.ReadableDuration) duration28);
        boolean boolean31 = interval19.equals((java.lang.Object) duration28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Interval interval37 = interval19.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = interval19.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = interval19.getStart();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Interval interval45 = interval43.toInterval();
        org.joda.time.MutableInterval mutableInterval46 = interval45.toMutableInterval();
        boolean boolean47 = interval19.isBefore((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval45);
        org.joda.time.MutableInterval mutableInterval49 = interval45.toMutableInterval();
        long long50 = mutableInterval49.getStartMillis();
        org.joda.time.Interval interval51 = interval15.gap((org.joda.time.ReadableInterval) mutableInterval49);
        boolean boolean52 = mutableInterval0.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(10L, chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        int int57 = dateTime55.get(dateTimeFieldType56);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        int int61 = period59.getValue(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration65 = period59.toDurationTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) period59);
        boolean boolean67 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = interval70.getEnd();
        org.joda.time.Interval interval72 = interval70.toInterval();
        org.joda.time.MutableInterval mutableInterval73 = interval72.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval74 = mutableInterval73.toMutableInterval();
        boolean boolean76 = mutableInterval73.isBefore(1645514177812L);
        long long77 = mutableInterval73.getEndMillis();
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardMinutes(435L);
        long long80 = duration79.getMillis();
        org.joda.time.Duration duration82 = duration79.minus((long) (byte) 1);
        mutableInterval73.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration79);
        boolean boolean84 = mutableInterval66.isBefore((org.joda.time.ReadableInterval) mutableInterval73);
        boolean boolean85 = mutableInterval73.containsNow();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2074-04-06T10:23:52.534-213:00/2074-04-06T10:23:52.534-213:00" + "'", str16, "2074-04-06T10:23:52.534-213:00/2074-04-06T10:23:52.534-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2074-04-06T10:23:52.534-213:00/2074-04-06T10:23:52.534-213:00" + "'", str20, "2074-04-06T10:23:52.534-213:00/2074-04-06T10:23:52.534-213:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(interval37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableInterval49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3291002632534L + "'", long50 == 3291002632534L);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1969 + "'", int57 == 1969);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertNotNull(mutableInterval74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 3291002632534L + "'", long77 == 3291002632534L);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 26100000L + "'", long80 == 26100000L);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval28.withPeriodAfterStart(readablePeriod31);
        org.joda.time.Period period33 = interval28.toPeriod();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        int int40 = period38.getValue(0);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration44 = period38.toDurationTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime48 = dateTime42.withDurationAdded((long) 453, 436);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfEra(3);
        int int52 = localDateTime51.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.property(dateTimeFieldType53);
        org.joda.time.LocalDateTime localDateTime55 = property54.getLocalDateTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (-1), chronology57);
        org.joda.time.Period period59 = period58.toPeriod();
        int int60 = period59.size();
        int int61 = period59.getMinutes();
        int[] intArray62 = period59.getValues();
        org.joda.time.Period period64 = period59.withMonths(26155103);
        org.joda.time.Period period66 = period64.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime67 = localDateTime55.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.LocalDateTime.Property property68 = localDateTime55.dayOfWeek();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property70 = dateTime69.year();
        org.joda.time.DateTime dateTime71 = property70.roundHalfFloorCopy();
        int int72 = dateTime71.getEra();
        int int73 = property68.getDifference((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Duration duration75 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = dateTime71.withMonthOfYear(26201588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26201588 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:52.578-213:00/2074-04-06T10:23:52.578-213:00" + "'", str3, "2074-04-06T10:23:52.578-213:00/2074-04-06T10:23:52.578-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 96 + "'", int52 == 96);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-756331) + "'", int73 == (-756331));
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(duration75);
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withYear(26151451);
        int int25 = localDateTime13.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime13.withDate(44, 999, 52678312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        int int15 = period14.size();
        int int16 = period14.getMinutes();
        int[] intArray17 = period14.getValues();
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        org.joda.time.LocalTime localTime20 = localTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-1), chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period30 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        boolean boolean32 = period25.isSupported(durationFieldType31);
        org.joda.time.Period period34 = period25.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime35 = localTime8.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalTime.Property property36 = localTime8.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int38 = localTime8.indexOf(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getRangeDurationType();
        java.lang.String str40 = durationFieldType39.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "halfdays" + "'", str40, "halfdays");
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.Seconds seconds4 = duration3.toStandardSeconds();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) 32772, (int) (byte) 10);
        long long8 = duration7.getStandardHours();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime9.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime9.plusWeeks(3);
        org.joda.time.DateTime dateTime21 = dateTime19.plusHours(20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.days();
        org.joda.time.Period period25 = period23.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(10L, chronology29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime30.toYearMonthDay();
        boolean boolean34 = periodType24.equals((java.lang.Object) yearMonthDay33);
        org.joda.time.Period period35 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21, periodType24);
        org.joda.time.DateTime dateTime37 = dateTime21.plusDays(26184703);
        org.joda.time.DateTime.Property property38 = dateTime21.yearOfCentury();
        int int39 = dateTime21.getMinuteOfDay();
        org.joda.time.DateTime dateTime41 = dateTime21.minusHours(26297538);
        org.joda.time.DateTime dateTime43 = dateTime41.minusSeconds(366);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(seconds4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 623 + "'", int12 == 623);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1969 + "'", int32 == 1969);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 383 + "'", int39 == 383);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = org.joda.time.Period.years(10);
        org.joda.time.LocalTime localTime7 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 1);
        org.joda.time.Chronology chronology8 = localTime0.getChronology();
        org.joda.time.LocalTime localTime10 = localTime0.plusSeconds(814);
        org.joda.time.LocalTime localTime12 = localTime0.plusHours(26178);
        org.joda.time.LocalTime.Property property13 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundCeilingCopy();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.joda.time.Period period1 = org.joda.time.Period.days(52682759);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) dateTime2, dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime23 = localDate16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean25 = localDate16.isSupported(dateTimeFieldType24);
        java.lang.String str26 = dateTimeFieldType24.toString();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 623 + "'", int5 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2074 + "'", int11 == 2074);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "dayOfMonth" + "'", str26, "dayOfMonth");
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        java.util.Date date5 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int6 = date5.getYear();
        date5.setMinutes((int) '4');
        date5.setHours(436);
        java.lang.String str11 = date5.toGMTString();
        int int12 = date5.getSeconds();
        date5.setSeconds(6);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra(3);
        int int18 = localDateTime17.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.property(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime21 = property20.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks(1439);
        boolean boolean24 = date5.equals((java.lang.Object) localDateTime23);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jan 17 04:52:06 GMT-E3:00 4683");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2782 + "'", int6 == 2782);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26 Jan 4683 01:52:00 GMT" + "'", str11, "26 Jan 4683 01:52:00 GMT");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 96 + "'", int18 == 96);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays((int) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = localDate12.withYear(38270);
        boolean boolean16 = charSet4.contains((java.lang.Object) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int18 = localDate12.get(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = localDate12.withYearOfEra(877);
        org.joda.time.LocalDate localDate22 = localDate20.withYearOfEra(57);
        org.joda.time.LocalDate localDate24 = localDate20.minusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtStartOfDay(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime26.withEra(15334917);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15334917 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 382 + "'", int18 == 382);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Interval interval8 = interval6.toInterval();
        long long9 = interval6.getEndMillis();
        java.lang.String str10 = interval6.toString();
        org.joda.time.DateTime dateTime11 = interval6.getStart();
        org.joda.time.Chronology chronology12 = interval6.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period(0L, 1645514152681L, chronology12);
        org.joda.time.Period period14 = new org.joda.time.Period(3291028448537L, (long) 74, chronology12);
        org.joda.time.Chronology chronology15 = chronology12.withUTC();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra(3);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime28.getMinuteOfDay();
        int int32 = dateTime28.getYearOfCentury();
        int int33 = dateTime28.getDayOfMonth();
        org.joda.time.DateTime dateTime35 = dateTime28.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        int int38 = dateTimeField37.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusWeeks((int) (byte) 10);
        org.joda.time.Period period43 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = period43.toDurationFrom(readableInstant44);
        long long46 = duration45.getMillis();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.plus((org.joda.time.ReadableDuration) duration45);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str50 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDateTime41, (int) (short) 1, locale49);
        int int51 = dateTimeField27.getMaximumTextLength(locale49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        int int55 = dateTime52.getMinuteOfDay();
        int int56 = dateTime52.getYearOfCentury();
        int int57 = dateTime52.getDayOfMonth();
        org.joda.time.DateTime dateTime59 = dateTime52.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property60 = dateTime59.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField61 = property60.getField();
        int int62 = dateTimeField61.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusWeeks((int) (byte) 10);
        org.joda.time.Period period67 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Duration duration69 = period67.toDurationFrom(readableInstant68);
        long long70 = duration69.getMillis();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.plus((org.joda.time.ReadableDuration) duration69);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str74 = dateTimeField61.getAsText((org.joda.time.ReadablePartial) localDateTime65, (int) (short) 1, locale73);
        java.lang.String str75 = locale49.getDisplayLanguage(locale73);
        java.text.DateFormatSymbols dateFormatSymbols76 = new java.text.DateFormatSymbols(locale49);
        java.lang.String str77 = dateTimeZone22.getName((long) (short) 0, locale49);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(3291028457002L, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeUtils.getZone(dateTimeZone22);
        org.joda.time.Chronology chronology80 = chronology12.withZone(dateTimeZone22);
        long long84 = chronology80.add(1645566862099L, (long) 5869107, 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3291002632757L + "'", long9 == 3291002632757L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2074-04-06T10:23:52.757-213:00/2074-04-06T10:23:52.757-213:00" + "'", str10, "2074-04-06T10:23:52.757-213:00/2074-04-06T10:23:52.757-213:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 623 + "'", int31 == 623);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 74 + "'", int32 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1439 + "'", int38 == 1439);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 35L + "'", long46 == 35L);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 623 + "'", int55 == 623);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 74 + "'", int56 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1439 + "'", int62 == 1439);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 35L + "'", long70 == 35L);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u4e2d\u6587" + "'", str75, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1645566862099L + "'", long84 == 1645566862099L);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.joda.time.Period period8 = new org.joda.time.Period(22, (int) (short) 10, (int) '#', (int) (short) 100, 32772, 3, 0, (int) ' ');
        org.joda.time.Period period10 = period8.withHours((int) (short) 10);
        org.joda.time.Period period12 = period8.withMillis(26217781);
        org.joda.time.Period period13 = period8.toPeriod();
        boolean boolean15 = period13.equals((java.lang.Object) "Taiwan");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2074-04-15T14:35:01.246");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime2.minuteOfHour();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime11.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime11.minus((long) 10);
        org.joda.time.DateTime dateTime23 = dateTime11.minusHours(7);
        int int24 = dateTime11.getMinuteOfHour();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean26 = dateTime2.isBeforeNow();
        int int27 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime29 = dateTime1.minusSeconds(2111);
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 623 + "'", int5 == 623);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 623 + "'", int14 == 623);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period5 = period1.plusWeeks(1969);
        org.joda.time.Duration duration6 = period5.toStandardDuration();
        org.joda.time.Period period7 = period5.toPeriod();
        int int8 = period5.getMillis();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate14 = localDate10.minusYears((int) '#');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        int int26 = dateTime17.get(dateTimeFieldType24);
        boolean boolean27 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property28 = dateTime17.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeUtils.getZone(dateTimeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone30);
        boolean boolean32 = dateTimeZone30.isFixed();
        org.joda.time.DateMidnight dateMidnight33 = localDate14.toDateMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(3240000L, dateTimeZone30);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime41 = dateTime35.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime35.minus((long) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths(7);
        boolean boolean49 = dateTime47.isBefore(1645514170000L);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period51 = period5.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period60 = new org.joda.time.Period(26155103, 7, 14, 10, 2, (int) '#', 11, 1640);
        org.joda.time.Period period61 = period51.withFields((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period63 = period61.minusMonths(55);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime64.getMinuteOfDay();
        int int68 = dateTime64.getYearOfCentury();
        int int69 = dateTime64.getDayOfMonth();
        org.joda.time.DateTime dateTime71 = dateTime64.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property72 = dateTime64.minuteOfHour();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime74);
        int int76 = dateTime73.getMinuteOfDay();
        org.joda.time.Period period78 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime79 = dateTime73.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = dateTime73.toDateTime(chronology80);
        org.joda.time.DateTime dateTime83 = dateTime73.minus((long) 10);
        org.joda.time.DateTime dateTime85 = dateTime73.minusHours(7);
        int int86 = dateTime73.getMinuteOfHour();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime73);
        boolean boolean88 = dateTime64.isBeforeNow();
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period61, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Chronology chronology90 = dateTime64.getChronology();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 623 + "'", int20 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1969 + "'", int25 == 1969);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2074 + "'", int26 == 2074);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateMidnight33);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 623 + "'", int38 == 623);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 623 + "'", int67 == 623);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 74 + "'", int68 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 623 + "'", int76 == 623);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23 + "'", int86 == 23);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property11 = dateTime0.weekOfWeekyear();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology20);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfMinute();
        org.joda.time.DateTime dateTime27 = dateTime24.minusYears(38274);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 623 + "'", int5 == 623);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645514472246L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        org.joda.time.Period period4 = new org.joda.time.Period(975, (int) (byte) 100, 52499404, 2000);
        int int5 = period4.getDays();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.256Z/2022-02-22T07:16:00.256Z");
        timeZone1.setID("2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime6.getMinuteOfDay();
        int int10 = dateTime6.getYearOfCentury();
        int int11 = dateTime6.getDayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime6.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = dateTimeField15.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (byte) 10);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plus((org.joda.time.ReadableDuration) duration23);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime19, (int) (short) 1, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale27.getDisplayLanguage(locale29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone5, locale29);
        int int32 = timeZone5.getRawOffset();
        timeZone5.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        int int39 = dateTime35.getYearOfCentury();
        int int40 = dateTime35.getDayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime35.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        int int45 = dateTimeField44.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = period50.toDurationFrom(readableInstant51);
        long long53 = duration52.getMillis();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plus((org.joda.time.ReadableDuration) duration52);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime48, (int) (short) 1, locale56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone5, locale56);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone1, locale56);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId62 = timeZone61.toZoneId();
        calendar59.setTimeZone(timeZone61);
        // The following exception was thrown during execution in test generation
        try {
            calendar59.roll(667, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 623 + "'", int9 == 623);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74 + "'", int10 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1439 + "'", int16 == 1439);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str30, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514523395,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=3,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 623 + "'", int38 == 623);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 74 + "'", int39 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1439 + "'", int45 == 1439);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514523395,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=3,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645514523395,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=3,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId62);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks(1439);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withWeekyear(0);
        int int11 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property12.getFieldType();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayScript();
        int int16 = property12.getMaximumTextLength(locale14);
        org.joda.time.LocalDateTime localDateTime17 = property12.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 96 + "'", int3 == 96);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(26220156);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 827);
        boolean boolean23 = dateTimeFormatter20.isParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        int int7 = dateTime0.getSecondOfMinute();
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = period14.toDurationFrom(readableInstant15);
        long long17 = duration16.getMillis();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plus((org.joda.time.ReadableDuration) duration16);
        mutableInterval9.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = mutableInterval9.toDuration();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks((int) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        long long28 = duration27.getMillis();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plus((org.joda.time.ReadableDuration) duration27);
        long long30 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration27);
        boolean boolean31 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime33 = dateTime8.toDateTime();
        int int34 = dateTime8.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = dateTime37.plusWeeks((int) (byte) 1);
        int int40 = property36.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = interval43.isAfter((long) 10);
        org.joda.time.Duration duration46 = interval43.toDuration();
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTime dateTime51 = interval50.getStart();
        int int52 = dateTime51.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime51);
        java.lang.Class<?> wildcardClass54 = mutableInterval53.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 35L + "'", long28 == 35L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 35L + "'", long30 == 35L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 74 + "'", int52 == 74);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(453);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.Period period4 = period1.withYears(6013102);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = period4.getValue(26151451);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26151451");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime5.withZone(dateTimeZone7);
        int int13 = dateTime5.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime5.withHourOfDay(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-213:00" + "'", str9, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-213:00" + "'", str11, "-213:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(2022, 0, 65822503, 38270, 52505);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38270 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getISO3Language();
        java.util.Calendar.Builder builder13 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder17 = builder0.setDate(20, 26160257, 16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        int int22 = dateTimeField20.getLeapAmount((long) 26151451);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int25 = dateTimeField20.getMaximumShortTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        int int33 = dateTime29.getYearOfCentury();
        int int34 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime29.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        int int39 = dateTimeField38.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = period44.toDurationFrom(readableInstant45);
        long long47 = duration46.getMillis();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plus((org.joda.time.ReadableDuration) duration46);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime42, (int) (short) 1, locale50);
        int int52 = dateTimeField28.getMaximumTextLength(locale50);
        java.lang.String str53 = locale24.getDisplayLanguage(locale50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime57.getMinuteOfDay();
        int int61 = dateTime57.getYearOfCentury();
        int int62 = dateTime57.getDayOfMonth();
        org.joda.time.DateTime dateTime64 = dateTime57.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        int int67 = dateTimeField66.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks((int) (byte) 10);
        org.joda.time.Period period72 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Duration duration74 = period72.toDurationFrom(readableInstant73);
        long long75 = duration74.getMillis();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.plus((org.joda.time.ReadableDuration) duration74);
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str79 = dateTimeField66.getAsText((org.joda.time.ReadablePartial) localDateTime70, (int) (short) 1, locale78);
        int int80 = dateTimeField56.getMaximumTextLength(locale78);
        java.lang.String str81 = locale24.getDisplayLanguage(locale78);
        java.util.Calendar.Builder builder82 = builder17.setLocale(locale24);
        java.util.Calendar.Builder builder87 = builder82.setTimeOfDay((int) (byte) 10, 26153423, (int) (short) 0, 1640);
        java.util.Calendar.Builder builder89 = builder82.setLenient(true);
        java.util.Calendar.Builder builder91 = builder89.setLenient(false);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 623 + "'", int32 == 623);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 74 + "'", int33 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1439 + "'", int39 == 1439);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35L + "'", long47 == 35L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 623 + "'", int60 == 623);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 74 + "'", int61 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1439 + "'", int67 == 1439);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 35L + "'", long75 == 35L);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withDefaultYear(0);
        boolean boolean12 = dateTimeFormatter11.isPrinter();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period4 = period1.normalizedStandard();
        int[] intArray5 = period1.getValues();
        org.joda.time.Period period7 = period1.withWeeks(26181277);
        int int8 = period1.getDays();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1203664563115L);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.Instant instant4 = instant1.plus((long) 420);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(instant4);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy(7);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDate localDate8 = property3.addWrapFieldToCopy((int) (short) 1);
        java.lang.String str10 = localDate8.toString("\u516c\u5143");
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u516c\u5143" + "'", str10, "\u516c\u5143");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(26228346);
        org.joda.time.LocalDate localDate10 = localDate8.minusYears((-30504959));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusHours(26155103);
        java.lang.String str6 = period3.toString();
        org.joda.time.Period period8 = period3.withMillis(70);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusYears(26200719);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withMillisOfSecond(26176563);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26176563 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3291002633270L + "'", long12 == 3291002633270L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2074-04-06T10:23:53.270-213:00/2074-04-06T10:23:53.270-213:00" + "'", str13, "2074-04-06T10:23:53.270-213:00/2074-04-06T10:23:53.270-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getISO3Language();
        java.util.Calendar.Builder builder13 = builder0.setLocale(locale1);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        long long16 = calendar15.getTimeInMillis();
        long long17 = calendar15.getTimeInMillis();
        int int19 = calendar15.getMinimum(0);
        org.joda.time.Duration duration21 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.Period period26 = duration21.toPeriod(chronology23);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeUtils.getZone(dateTimeZone29);
        boolean boolean32 = dateTimeZone30.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology33 = chronology23.withZone(dateTimeZone30);
        boolean boolean34 = calendar15.after((java.lang.Object) chronology23);
        org.joda.time.DateTimeField dateTimeField35 = chronology23.era();
        org.joda.time.DateTimeField dateTimeField36 = chronology23.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) builder13, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Calendar$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514523664,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=3,MILLISECOND=664,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514523664L + "'", long16 == 1645514523664L);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514523664L + "'", long17 == 1645514523664L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, dateTimeZone7);
        long long15 = dateTimeZone7.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withPivotYear(26220156);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.parse("5887001", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-213:00" + "'", str9, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-213:00" + "'", str11, "-213:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514153208L + "'", long15 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime4 = dateTime1.minusMonths(26165);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.Period period9 = period6.normalizedStandard();
        org.joda.time.Period period11 = period6.plusSeconds((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime4.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime14 = dateTime4.withYearOfCentury(34);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = locale15.getDisplayScript();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        int int21 = dateTimeField19.getLeapAmount((long) 26151451);
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int24 = dateTimeField19.getMaximumShortTextLength(locale23);
        java.lang.String str25 = locale15.getDisplayCountry(locale23);
        java.lang.String str26 = locale15.toLanguageTag();
        java.util.Set<java.lang.String> strSet27 = locale15.getUnicodeLocaleAttributes();
        java.util.Calendar calendar28 = dateTime14.toCalendar(locale15);
        java.util.Set<java.lang.String> strSet29 = locale15.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "China" + "'", str25, "China");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh-CN" + "'", str26, "zh-CN");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-66368306166669,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=135,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=313,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=23,SECOND=53,MILLISECOND=331,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(99, 29);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        int int2 = date1.getYear();
        int int3 = date1.getMinutes();
        int int4 = date1.getDate();
        date1.setHours(2074);
        int int7 = date1.getSeconds();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Sun Jul 01 10:00:00 GMT-E3:00 2074");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 174 + "'", int2 == 174);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.DurationField durationField23 = dateTimeField9.getDurationField();
        long long25 = dateTimeField9.roundHalfFloor((long) (-292275054));
        org.joda.time.DurationField durationField26 = dateTimeField9.getDurationField();
        int int29 = durationField26.getDifference(3291028815291L, 1645514201139L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-292260000L) + "'", long25 == (-292260000L));
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 27425243 + "'", int29 == 27425243);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2074-04-17T01:37:51.312+35:00/2074-04-17T01:37:51.312+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        int int40 = dateTime32.getYear();
        org.joda.time.DateTime dateTime42 = dateTime32.plusYears(14);
        boolean boolean43 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime42);
        long long44 = interval28.getStartMillis();
        boolean boolean46 = interval28.isBefore((long) 26160257);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        java.lang.String str50 = interval49.toString();
        org.joda.time.DateTime dateTime51 = interval49.getEnd();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusWeeks((int) (byte) 10);
        org.joda.time.Period period56 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Duration duration58 = period56.toDurationFrom(readableInstant57);
        long long59 = duration58.getMillis();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.plus((org.joda.time.ReadableDuration) duration58);
        boolean boolean61 = interval49.equals((java.lang.Object) duration58);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Interval interval66 = interval64.toInterval();
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.Interval interval68 = interval49.gap((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 10, chronology70);
        boolean boolean72 = interval49.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.ReadableInterval readableInterval73 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Period period74 = interval49.toPeriod();
        boolean boolean75 = interval28.abuts((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Interval interval76 = interval28.toInterval();
        org.joda.time.DateTime dateTime77 = interval76.getStart();
        org.joda.time.Interval interval78 = interval76.toInterval();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:53.402-213:00/2074-04-06T10:23:53.402-213:00" + "'", str3, "2074-04-06T10:23:53.402-213:00/2074-04-06T10:23:53.402-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 623 + "'", int35 == 623);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 74 + "'", int36 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2074 + "'", int40 == 2074);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3291002633402L + "'", long44 == 3291002633402L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2074-04-06T10:23:53.402-213:00/2074-04-06T10:23:53.402-213:00" + "'", str50, "2074-04-06T10:23:53.402-213:00/2074-04-06T10:23:53.402-213:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 35L + "'", long59 == 35L);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(mutableInterval67);
// flaky:         org.junit.Assert.assertNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(readableInterval73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval78);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime4.getMinuteOfDay();
        int int8 = dateTime4.getYearOfCentury();
        int int9 = dateTime4.getDayOfMonth();
        org.joda.time.DateTime dateTime11 = dateTime4.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTimeField13.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (byte) 10);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period19.toDurationFrom(readableInstant20);
        long long22 = duration21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plus((org.joda.time.ReadableDuration) duration21);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime17, (int) (short) 1, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale25.getDisplayLanguage(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone3, locale27);
        int int30 = timeZone3.getRawOffset();
        timeZone3.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone3, locale33);
        java.util.Locale.Builder builder35 = builder0.setLocale(locale33);
        java.util.Locale.Builder builder36 = builder0.clearExtensions();
        java.util.Locale.Builder builder37 = builder0.clear();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((java.lang.Object) builder37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Locale$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 623 + "'", int7 == 623);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1439 + "'", int14 == 1439);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str28, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514523912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=3,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514523912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=3,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-22T07:16:35.900Z/2022-02-22T07:16:35.900Z");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2022-02-22T07:16:45.936Z/2022-02-22T07:16:45.936Z");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone10 = provider0.getZone("26184703");
        org.joda.time.DateTimeZone dateTimeZone12 = provider0.getZone("2126-06-09T08:54:57.532+35:00/2126-06-09T08:54:57.532+35:00");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNull(dateTimeZone12);
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval28.withPeriodAfterStart(readablePeriod31);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId35 = timeZone34.toZoneId();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone(zoneId35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone(zoneId35);
        boolean boolean38 = interval32.equals((java.lang.Object) zoneId35);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.months();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology40.getDateTimeMillis(104, 18967807, 619, 1934);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18967807 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:53.562-213:00/2074-04-06T10:23:53.562-213:00" + "'", str3, "2074-04-06T10:23:53.562-213:00/2074-04-06T10:23:53.562-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.lang.String str8 = property1.getAsShortText(locale7);
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.lang.String str10 = locale9.getDisplayScript();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        int int15 = dateTimeField13.getLeapAmount((long) 26151451);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int18 = dateTimeField13.getMaximumShortTextLength(locale17);
        java.lang.String str19 = locale9.getDisplayCountry(locale17);
        java.lang.String str20 = locale9.toLanguageTag();
        java.util.Set<java.lang.String> strSet21 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str22 = property1.getAsShortText(locale9);
        int int23 = property1.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u897f\u66a6" + "'", str8, "\u897f\u66a6");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "China" + "'", str19, "China");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-CN" + "'", str20, "zh-CN");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u516c\u5143" + "'", str22, "\u516c\u5143");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(100);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        int int4 = period3.getMonths();
        org.joda.time.LocalDate localDate6 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period3, 26167);
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.withFields(readablePartial7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate6.withWeekOfWeekyear((int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval2);
        boolean boolean5 = mutableInterval2.containsNow();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime7.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime7.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime7.minus((long) 10);
        org.joda.time.Period period18 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.plusWeeks((int) (byte) 1);
        int int24 = property20.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration6.withDurationAdded((org.joda.time.ReadableDuration) duration33, 26160257);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) period37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 623 + "'", int10 == 623);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears(54);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths(45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withCenturyOfEra(7576734);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7576734 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3291002633666L + "'", long12 == 3291002633666L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2074-04-06T10:23:53.666-213:00/2074-04-06T10:23:53.666-213:00" + "'", str13, "2074-04-06T10:23:53.666-213:00/2074-04-06T10:23:53.666-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, dateTimeZone7);
        long long15 = dateTimeZone7.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withPivotYear(26220156);
        org.joda.time.Chronology chronology21 = dateTimeFormatter3.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        int int28 = dateTime24.getYearOfCentury();
        int int29 = dateTime24.getDayOfMonth();
        org.joda.time.DateTime dateTime31 = dateTime24.minusWeeks((int) (short) 0);
        boolean boolean32 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime24);
        java.lang.String str33 = dateTime22.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType36 = periodType35.withDaysRemoved();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.Period period42 = new org.joda.time.Period(1645514161529L, periodType36, chronology41);
        org.joda.time.DurationField durationField43 = chronology41.years();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime22.toMutableDateTime(chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter3.withChronology(chronology41);
        org.joda.time.format.DateTimeParser dateTimeParser46 = dateTimeFormatter3.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.parse("5955414", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-213:00" + "'", str9, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-213:00" + "'", str11, "-213:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514153208L + "'", long15 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 623 + "'", int27 == 623);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 74 + "'", int28 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2074-04-06T10:23:53.677-213:00" + "'", str33, "2074-04-06T10:23:53.677-213:00");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(dateTimeParser46);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime31.getMinuteOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime31.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime31.plusWeeks(3);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(20);
        org.joda.time.Interval interval44 = interval28.withEnd((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Interval interval49 = interval47.toInterval();
        org.joda.time.Interval interval51 = interval49.withStartMillis((long) (short) 1);
        boolean boolean52 = interval28.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Period period53 = interval28.toPeriod();
        org.joda.time.Period period55 = period53.minusMillis(52488);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:53.691-213:00/2074-04-06T10:23:53.691-213:00" + "'", str3, "2074-04-06T10:23:53.691-213:00/2074-04-06T10:23:53.691-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 623 + "'", int34 == 623);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime12.getMinuteOfDay();
        int int16 = dateTime12.getYearOfCentury();
        int int17 = dateTime12.getDayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime12.minusWeeks((int) (short) 0);
        boolean boolean20 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime12);
        boolean boolean21 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(13);
        org.joda.time.Interval interval24 = interval6.withPeriodAfterStart((org.joda.time.ReadablePeriod) period23);
        boolean boolean25 = interval1.abuts((org.joda.time.ReadableInterval) interval6);
        org.joda.time.Interval interval26 = interval6.toInterval();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 623 + "'", int15 == 623);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74 + "'", int16 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(3291028442286L);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime4 = property2.addCopy(32070593);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        org.joda.time.DurationField durationField7 = chronology6.years();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(chronology6);
        org.joda.time.Period period10 = org.joda.time.Period.millis(101);
        int[] intArray12 = chronology6.get((org.joda.time.ReadablePeriod) period10, 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) property2, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.Period period3 = new org.joda.time.Period(22560257L, 1645514161708L, periodType2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(10L, chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 10, chronology10);
        boolean boolean12 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        boolean boolean15 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, (long) ' ', periodType19, chronology24);
        org.joda.time.DateTime dateTime28 = dateTime13.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime.Property property29 = dateTime13.era();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = localDate32.toDateTimeAtStartOfDay();
        boolean boolean36 = dateTime35.isEqualNow();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        org.joda.time.Period period41 = period39.normalizedStandard(periodType40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        int int43 = periodType40.indexOf(durationFieldType42);
        org.joda.time.DateTime dateTime45 = dateTime35.withFieldAdded(durationFieldType42, 435);
        int int46 = period3.get(durationFieldType42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime47.getMinuteOfDay();
        int int51 = dateTime47.getYearOfCentury();
        int int52 = dateTime47.getDayOfMonth();
        org.joda.time.DateTime dateTime54 = dateTime47.minusWeeks((int) (short) 0);
        int int55 = dateTime47.getYear();
        org.joda.time.DateTime dateTime57 = dateTime47.plusYears(14);
        org.joda.time.DateTime.Property property58 = dateTime57.weekyear();
        org.joda.time.DateTime dateTime59 = property58.withMinimumValue();
        org.joda.time.Period period61 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Duration duration63 = period61.toDurationFrom(readableInstant62);
        org.joda.time.Seconds seconds64 = duration63.toStandardSeconds();
        org.joda.time.DateTime dateTime66 = dateTime59.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) 'a');
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(10L, chronology68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        int int71 = dateTime69.get(dateTimeFieldType70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 10, chronology73);
        boolean boolean75 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property77 = dateTime76.era();
        boolean boolean78 = dateTime74.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType82 = periodType81.withSecondsRemoved();
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime83, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Chronology chronology87 = org.joda.time.DateTimeUtils.getChronology(chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology87.hourOfHalfday();
        org.joda.time.DateTime dateTime89 = dateTime83.toDateTime(chronology87);
        org.joda.time.Period period90 = new org.joda.time.Period((long) 1, (long) ' ', periodType82, chronology87);
        org.joda.time.DateTime dateTime91 = dateTime76.plus((org.joda.time.ReadablePeriod) period90);
        int int92 = dateTime66.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Duration duration93 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime.Property property94 = dateTime76.millisOfDay();
        org.joda.time.DateTime dateTime95 = property94.roundCeilingCopy();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 623 + "'", int50 == 623);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 74 + "'", int51 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2074 + "'", int55 == 2074);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1969 + "'", int71 == 1969);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        java.util.Date date5 = new java.util.Date(26151451, 721, 16, (int) (byte) 100, 2782);
        int int6 = date5.getHours();
        date5.setMonth(45);
        date5.setDate(210);
        date5.setYear(1140);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Apr 28 02:22:00 GMT-E3:00 3041");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        boolean boolean4 = interval2.isAfterNow();
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7, periodType8);
        org.joda.time.Period period10 = period9.negated();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        org.joda.time.Period period15 = period10.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        org.joda.time.Period period19 = period17.normalizedStandard(periodType18);
        boolean boolean21 = periodType18.equals((java.lang.Object) 6);
        org.joda.time.Period period22 = period15.normalizedStandard(periodType18);
        org.joda.time.Interval interval23 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period25 = period22.minusYears(0);
        org.joda.time.MutablePeriod mutablePeriod26 = period22.toMutablePeriod();
        int int27 = period22.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period29 = period22.plusMinutes((-756410));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:53.851-213:00/2074-04-06T10:23:53.851-213:00" + "'", str3, "2074-04-06T10:23:53.851-213:00/2074-04-06T10:23:53.851-213:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = property3.addWrapFieldToCopy(5956623);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths(5874555);
        int int10 = localDate7.size();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-22T07:16:35.900Z/2022-02-22T07:16:35.900Z");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2022-02-22T07:16:45.936Z/2022-02-22T07:16:45.936Z");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = instant0.getChronology();
        org.joda.time.Instant instant3 = instant0.withMillis(4936542893761L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(instant3);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property3.addWrapFieldToCopy(38222);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime(chronology12);
        org.joda.time.Period period15 = new org.joda.time.Period((long) 1, (long) ' ', periodType7, chronology12);
        org.joda.time.DurationField durationField16 = chronology12.weeks();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) 10, 1645514153096L, chronology12);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(1645514161529L, chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.hourOfDay();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 26303, chronology12);
        org.joda.time.Days days21 = period20.toStandardDays();
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(days21);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        int int13 = localTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localTime10.equals((java.lang.Object) dateTimeFieldType17);
        int int20 = dateTime0.get(dateTimeFieldType17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, readableInstant21);
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        int int30 = period28.getValue(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration34 = period28.toDurationTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded((long) 453, 436);
        org.joda.time.DateTime dateTime40 = dateTime32.minusWeeks(8);
        boolean boolean42 = dateTime40.isAfter(1645514160806L);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Interval interval47 = interval45.toInterval();
        org.joda.time.MutableInterval mutableInterval48 = interval47.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval49 = mutableInterval48.toMutableInterval();
        boolean boolean51 = mutableInterval48.isBefore(1645514177812L);
        long long52 = mutableInterval48.getEndMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes(435L);
        long long55 = duration54.getMillis();
        org.joda.time.Duration duration57 = duration54.minus((long) (byte) 1);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration54);
        mutableInterval23.setDurationAfterStart((org.joda.time.ReadableDuration) duration54);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37433922 + "'", int13 == 37433922);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2074 + "'", int20 == 2074);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3291002633922L + "'", long52 == 3291002633922L);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 26100000L + "'", long55 == 26100000L);
        org.junit.Assert.assertNotNull(duration57);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        long long6 = mutableInterval5.getStartMillis();
        java.lang.Object obj7 = mutableInterval5.clone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        int int21 = localTime18.getMillisOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(10L, chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = dateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localTime18.equals((java.lang.Object) dateTimeFieldType25);
        int int28 = dateTime8.get(dateTimeFieldType25);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, readableInstant29);
        org.joda.time.Duration duration31 = interval30.toDuration();
        boolean boolean32 = mutableInterval5.isAfter((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime33 = interval30.getEnd();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Interval interval38 = interval36.toInterval();
        long long39 = interval36.getEndMillis();
        org.joda.time.Period period40 = interval36.toPeriod();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Interval interval45 = interval43.toInterval();
        org.joda.time.Interval interval47 = interval45.withStartMillis((long) (short) 1);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval47);
        boolean boolean49 = interval36.isAfter((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Interval interval50 = interval30.gap((org.joda.time.ReadableInterval) interval47);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3291002633962L + "'", long6 == 3291002633962L);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "2074-04-06T10:23:53.962-213:00/2074-04-06T10:23:53.962-213:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "2074-04-06T10:23:53.962-213:00/2074-04-06T10:23:53.962-213:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "2074-04-06T10:23:53.962-213:00/2074-04-06T10:23:53.962-213:00");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 623 + "'", int11 == 623);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37433962 + "'", int21 == 37433962);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2074 + "'", int28 == 2074);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3291002633962L + "'", long39 == 3291002633962L);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(interval50);
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        java.text.DateFormatSymbols dateFormatSymbols0 = java.text.DateFormatSymbols.getInstance();
        java.lang.String[] strArray2 = java.util.TimeZone.getAvailableIDs((int) '#');
        dateFormatSymbols0.setEras(strArray2);
        dateFormatSymbols0.setLocalPatternChars("2022-02-22T07:17:00.576Z/2022-02-22T07:17:00.576Z");
        java.lang.String[] strArray6 = dateFormatSymbols0.getShortWeekdays();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        int int14 = dateTime10.getYearOfCentury();
        int int15 = dateTime10.getDayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime10.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        int int20 = dateTimeField19.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks((int) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        long long28 = duration27.getMillis();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plus((org.joda.time.ReadableDuration) duration27);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime23, (int) (short) 1, locale31);
        int int33 = dateTimeField9.getMaximumTextLength(locale31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime34.getMinuteOfDay();
        int int38 = dateTime34.getYearOfCentury();
        int int39 = dateTime34.getDayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime34.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        int int44 = dateTimeField43.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        long long52 = duration51.getMillis();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus((org.joda.time.ReadableDuration) duration51);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime47, (int) (short) 1, locale55);
        java.lang.String str57 = locale31.getDisplayLanguage(locale55);
        java.text.DateFormatSymbols dateFormatSymbols58 = new java.text.DateFormatSymbols(locale31);
        java.lang.String str59 = dateFormatSymbols58.getLocalPatternChars();
        java.lang.String[] strArray60 = dateFormatSymbols58.getWeekdays();
        java.lang.String[] strArray61 = dateFormatSymbols58.getMonths();
        java.text.DateFormatSymbols dateFormatSymbols62 = java.text.DateFormatSymbols.getInstance();
        java.lang.String[] strArray64 = java.util.TimeZone.getAvailableIDs((int) '#');
        dateFormatSymbols62.setEras(strArray64);
        java.lang.String[] strArray66 = dateFormatSymbols62.getAmPmStrings();
        dateFormatSymbols58.setShortWeekdays(strArray66);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale68);
        java.text.DateFormatSymbols dateFormatSymbols70 = java.text.DateFormatSymbols.getInstance(locale68);
        java.lang.String[] strArray71 = dateFormatSymbols70.getMonths();
        java.lang.String str72 = dateFormatSymbols70.getLocalPatternChars();
        java.lang.String[] strArray73 = dateFormatSymbols70.getWeekdays();
        dateFormatSymbols58.setMonths(strArray73);
        java.lang.String[] strArray75 = dateFormatSymbols58.getShortMonths();
        dateFormatSymbols0.setShortMonths(strArray75);
        org.junit.Assert.assertNotNull(dateFormatSymbols0);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 623 + "'", int13 == 623);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74 + "'", int14 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1439 + "'", int20 == 1439);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 35L + "'", long28 == 35L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 623 + "'", int37 == 623);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 74 + "'", int38 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1439 + "'", int44 == 1439);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u4e2d\u6587" + "'", str57, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str59, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(dateFormatSymbols62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645514524435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=4,MILLISECOND=435,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateFormatSymbols70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str72, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray75);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str8 = dateTimeField4.getAsShortText(1645514151873L, locale7);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = dateTimeField4.getAsShortText(26153877, locale10);
        java.util.Locale.Builder builder12 = builder1.setLocale(locale10);
        java.util.Locale locale13 = builder1.build();
        java.util.Locale.Builder builder15 = builder1.addUnicodeLocaleAttribute("26220768");
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder15.setLanguage("2074-04-15T14:34:47.435Z/2074-04-15T14:34:47.435Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2074-04-15T14:34:47.435Z/2074-04-15T14:34:47.435Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26153877" + "'", str11, "26153877");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DateTime dateTime12 = dateTime6.toDateTime(chronology10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 1, (long) ' ', periodType5, chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(2);
        long long19 = chronology10.set((org.joda.time.ReadablePartial) localDateTime15, (long) (short) 10);
        org.joda.time.DurationField durationField20 = chronology10.seconds();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) 1439, 1645514163115L, chronology10);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.clockhourOfHalfday();
        java.lang.String str24 = dateTimeField22.getAsText(0L);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("26161962");
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField22.set(1645514269075L, "14:34:51.395", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14:34:51.395\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3291002634121L + "'", long19 == 3291002634121L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "3" + "'", str24, "3");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(110, 5875, 52678749, 32, 52, 15778080, 32770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        int int3 = timeZone1.getRawOffset();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.withFields(readablePartial8);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(3);
        boolean boolean12 = calendar4.before((java.lang.Object) localTime11);
        calendar4.set((int) 'u', 32772, 52);
        java.util.Date date17 = calendar4.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar4.get(976);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 976");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=27713085724580,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2848,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=71,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=4,MILLISECOND=580,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Mon Mar 02 10:22:04 GMT-E3:00 2848");
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
        int int2 = date0.getYear();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sun Feb 13 10:22:04 GMT-E3:00 2022");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 122 + "'", int2 == 122);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        java.lang.String str12 = dateTimeField9.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime13.getMinuteOfDay();
        int int17 = dateTime13.getYearOfCentury();
        int int18 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime13.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        int int24 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str32 = dateTimeField28.getAsShortText(1645514151873L, locale31);
        java.lang.String str33 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime23, 0, locale31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        int int37 = period35.getValue(0);
        org.joda.time.Period period39 = period35.plusWeeks(1969);
        org.joda.time.LocalTime localTime41 = localTime23.withPeriodAdded((org.joda.time.ReadablePeriod) period35, (int) (byte) 100);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = dateTime44.plusWeeks((int) (byte) 1);
        int int47 = property43.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = interval50.isAfter((long) 10);
        org.joda.time.Duration duration53 = interval50.toDuration();
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTime dateTime59 = dateTime44.withWeekyear(382);
        org.joda.time.DateTime dateTime60 = localTime41.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = dateTime44.isAfter(readableInstant61);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "180" + "'", str12, "180");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 623 + "'", int16 == 623);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74 + "'", int17 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String str52 = dateFormatSymbols51.getLocalPatternChars();
        java.lang.String[] strArray53 = dateFormatSymbols51.getWeekdays();
        java.lang.String[] strArray54 = dateFormatSymbols51.getWeekdays();
        java.lang.String[] strArray55 = dateFormatSymbols51.getWeekdays();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 623 + "'", int6 == 623);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74 + "'", int7 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 623 + "'", int30 == 623);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 74 + "'", int31 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str52, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(26179754, 46, 26176563);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        calendar1.setMinimalDaysInFirstWeek(149);
        java.lang.String str9 = calendar1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=828352849908124753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=149,ERA=1,YEAR=26251426,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=303,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=4,MILLISECOND=753,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.util.GregorianCalendar[time=828352849908124753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=149,ERA=1,YEAR=26251426,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=303,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=4,MILLISECOND=753,ZONE_OFFSET=-766800000,DST_OFFSET=0]" + "'", str9, "java.util.GregorianCalendar[time=828352849908124753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=149,ERA=1,YEAR=26251426,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=303,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=4,MILLISECOND=753,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = periodType0.getFieldType(921);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 921");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.DurationField durationField13 = chronology8.months();
        org.joda.time.DurationField durationField14 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfSecond();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getScript();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "it_IT" + "'", str2, "it_IT");
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        org.joda.time.DurationField durationField5 = durationFieldType1.getField(chronology3);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.DateTime dateTime14 = dateTime8.toDateTime(chronology12);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfYear();
        org.joda.time.DurationField durationField17 = durationFieldType1.getField(chronology12);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(1645514173137L, chronology12);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        int int20 = localDate18.getMonthOfYear();
        org.joda.time.LocalDate localDate22 = localDate18.minusYears(0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfEra(3);
        int int26 = localDateTime25.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.property(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property29 = localDate22.property(dateTimeFieldType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 96 + "'", int26 == 96);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 157);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withDefaultYear(65967598);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        org.joda.time.Seconds seconds5 = period3.toStandardSeconds();
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertNotNull(seconds5);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        java.util.Date date6 = new java.util.Date(12, 100, (-292275054), (-1), 436, (int) '#');
        date6.setMonth(2782);
        date6.setYear(26165);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Nov 04 06:16:35 GMT-E3:00 28065");
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        int int14 = property13.getMinimumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-213:00" + "'", str9, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-213:00" + "'", str11, "-213:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundFloorCopy();
        boolean boolean3 = property1.isLeap();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = localDate1.toDateMidnight(dateTimeZone2);
        int int4 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate1.era();
        int int6 = localDate1.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate1.withCenturyOfEra(26308130);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26308130 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(36000004L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        int int15 = period14.size();
        int int16 = period14.getMinutes();
        int[] intArray17 = period14.getValues();
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        org.joda.time.LocalTime localTime20 = localTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-1), chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period30 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        boolean boolean32 = period25.isSupported(durationFieldType31);
        org.joda.time.Period period34 = period25.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime35 = localTime8.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period37 = period25.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(chronology46);
        org.joda.time.Period period49 = new org.joda.time.Period((long) 1, (long) ' ', periodType41, chronology46);
        int int50 = period49.getWeeks();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property52 = dateTime51.era();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.plusWeeks((int) (byte) 1);
        int int56 = property52.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isAfter((long) 10);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = dateTime67.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property70 = dateTime69.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeUtils.getZone(dateTimeZone71);
        java.lang.String str74 = dateTimeZone72.getName((long) ' ');
        org.joda.time.DateTime dateTime75 = dateTime69.toDateTime(dateTimeZone72);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.time();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime75, periodType76);
        boolean boolean78 = period49.equals((java.lang.Object) dateTime75);
        org.joda.time.Period period80 = period49.withYears(0);
        org.joda.time.Period period81 = period25.minus((org.joda.time.ReadablePeriod) period80);
        int[] intArray82 = period25.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-213:00" + "'", str74, "-213:00");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationFrom(readableInstant5);
        long long7 = duration6.getMillis();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plus((org.joda.time.ReadableDuration) duration6);
        long long9 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours10 = duration6.toStandardHours();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime11.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime11.plusWeeks(3);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(20);
        org.joda.time.DateTime dateTime25 = dateTime21.minusHours(26153877);
        org.joda.time.DateTime dateTime27 = dateTime21.withMillis((long) 10074);
        org.joda.time.Period period28 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTime dateTime34 = dateTime29.minusHours((int) 'a');
        int int35 = dateTime29.getYear();
        java.lang.Character[] charArray39 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet40 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet40, charArray39);
        boolean boolean43 = charSet40.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate48 = localDate46.plusDays((int) (byte) 10);
        org.joda.time.Interval interval49 = localDate48.toInterval();
        org.joda.time.LocalDate localDate51 = localDate48.withYear(38270);
        boolean boolean52 = charSet40.contains((java.lang.Object) localDate48);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int54 = localDate48.get(dateTimeFieldType53);
        boolean boolean55 = dateTime29.isSupported(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 623 + "'", int14 == 623);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 623 + "'", int32 == 623);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2074 + "'", int35 == 2074);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 382 + "'", int54 == 382);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) 0);
        int int13 = property7.getMinimumValueOverall();
        long long14 = property7.remainder();
        org.joda.time.LocalTime localTime15 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property7.addCopy(5884398);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 55006L + "'", long14 == 55006L);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        long long4 = calendar3.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = calendar3.get(5964);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5964");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514525404,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=5,MILLISECOND=404,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514525404L + "'", long4 == 1645514525404L);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(26220156);
        org.joda.time.Chronology chronology20 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeUtils.getZone(dateTimeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) 1645514161708L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        java.util.Date date0 = new java.util.Date();
        date0.setMinutes((int) (short) -1);
        int int3 = date0.getDay();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sun Feb 13 09:59:05 GMT-E3:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime.Property property5 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime7 = property5.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone9.getName((long) ' ');
        java.lang.String str13 = dateTimeZone9.getName((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime7.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Interval interval15 = localDate0.toInterval(dateTimeZone9);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, (long) ' ', periodType19, chronology24);
        int int28 = period27.getWeeks();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.plusWeeks((int) (byte) 1);
        int int34 = property30.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        org.joda.time.Duration duration40 = interval37.toDuration();
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = dateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property48 = dateTime47.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeUtils.getZone(dateTimeZone49);
        java.lang.String str52 = dateTimeZone50.getName((long) ' ');
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(dateTimeZone50);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.time();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime53, periodType54);
        boolean boolean56 = period27.equals((java.lang.Object) dateTime53);
        org.joda.time.Interval interval57 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        int int58 = period27.getDays();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-213:00" + "'", str11, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-213:00" + "'", str13, "-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-213:00" + "'", str52, "-213:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        int int4 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime dateTime6 = dateTime1.minusHours((int) 'a');
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(38222);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        int int19 = dateTime10.get(dateTimeFieldType17);
        int int20 = dateTime6.get(dateTimeFieldType17);
        int int21 = localDateTime0.get(dateTimeFieldType17);
        int int22 = localDateTime0.getYearOfCentury();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 623 + "'", int4 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 623 + "'", int13 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2074 + "'", int19 == 2074);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2074 + "'", int20 == 2074);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2074 + "'", int21 == 2074);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 74 + "'", int22 == 74);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone21.getName((long) ' ');
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths((int) (byte) 0);
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = property29.setCopy(26198934);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26198934 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-213:00" + "'", str23, "-213:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getMinuteOfDay();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime11 = dateTime5.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime5, chronology12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(10L, chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        int int24 = dateTime22.get(dateTimeFieldType23);
        int int25 = dateTime16.get(dateTimeFieldType23);
        boolean boolean26 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime16);
        int int27 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime5.toMutableDateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime29.getZone();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime29, "\u5fb7\u6587\u5fb7\u56fd)", 36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 623 + "'", int8 == 623);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 623 + "'", int19 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2074 + "'", int25 == 2074);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.MutableInterval mutableInterval32 = interval28.toMutableInterval();
        long long33 = mutableInterval32.getStartMillis();
        org.joda.time.Interval interval34 = mutableInterval32.toInterval();
        boolean boolean36 = interval34.isBefore((long) 18967807);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2074-04-06T10:23:55.164-213:00/2074-04-06T10:23:55.164-213:00" + "'", str3, "2074-04-06T10:23:55.164-213:00/2074-04-06T10:23:55.164-213:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableInterval32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3291002635164L + "'", long33 == 3291002635164L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime4 = dateTime0.minusDays(12);
        org.joda.time.DateTime.Property property5 = dateTime4.weekyear();
        org.joda.time.Chronology chronology6 = dateTime4.getChronology();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.text.DateFormatSymbols dateFormatSymbols8 = new java.text.DateFormatSymbols(locale7);
        boolean boolean9 = dateTime4.equals((java.lang.Object) locale7);
        java.text.DateFormatSymbols dateFormatSymbols10 = new java.text.DateFormatSymbols(locale7);
        java.util.Locale.setDefault(locale7);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str8 = dateTimeField4.getAsShortText(1645514151873L, locale7);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = dateTimeField4.getAsShortText(26153877, locale10);
        java.util.Locale.Builder builder12 = builder1.setLocale(locale10);
        java.util.Locale locale13 = builder1.build();
        java.util.Locale.Builder builder15 = builder1.setRegion("366");
        java.util.Locale.Builder builder16 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setVariant("70");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 70 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "10" + "'", str8, "10");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26153877" + "'", str11, "26153877");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-1), chronology1);
        int int3 = period2.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = period2.getValue(26787000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26787000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYear(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3291002635248L + "'", long12 == 3291002635248L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2074-04-06T10:23:55.248-213:00/2074-04-06T10:23:55.248-213:00" + "'", str13, "2074-04-06T10:23:55.248-213:00/2074-04-06T10:23:55.248-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusMonths(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusMonths((-436));
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks((int) (byte) 10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationFrom(readableInstant14);
        long long16 = duration15.getMillis();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plus((org.joda.time.ReadableDuration) duration15);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfDay();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime0.minus((org.joda.time.ReadableDuration) duration22);
        long long29 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        int int33 = dateTime30.getMinuteOfDay();
        org.joda.time.DateTime dateTime35 = dateTime30.minusHours((int) 'a');
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime38 = dateTime35.withYear(38222);
        int int39 = dateTime38.getDayOfMonth();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str43 = interval42.toString();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        long long52 = duration51.getMillis();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus((org.joda.time.ReadableDuration) duration51);
        boolean boolean54 = interval42.equals((java.lang.Object) duration51);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = interval57.isAfter((long) 10);
        org.joda.time.Interval interval60 = interval42.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.months();
        org.joda.time.Period period62 = interval42.toPeriod(periodType61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType64 = periodType63.withMillisRemoved();
        org.joda.time.Period period65 = interval42.toPeriod(periodType64);
        org.joda.time.PeriodType periodType66 = periodType64.withSecondsRemoved();
        org.joda.time.Period period67 = duration22.toPeriodTo((org.joda.time.ReadableInstant) dateTime38, periodType66);
        org.joda.time.Period period68 = duration22.toPeriod();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35L + "'", long16 == 35L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 623 + "'", int33 == 623);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2074-04-06T10:23:55.267-213:00/2074-04-06T10:23:55.267-213:00" + "'", str43, "2074-04-06T10:23:55.267-213:00/2074-04-06T10:23:55.267-213:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.withMaximumValue();
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        java.lang.String str9 = localDate6.toString("26181425");
        org.joda.time.LocalDate.Property property10 = localDate6.dayOfMonth();
        org.joda.time.LocalDate localDate11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = localDate11.minusYears(874);
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.LocalDate localDate15 = property14.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26181425" + "'", str9, "26181425");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localDate2.isSupported(durationFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.minusWeeks(26178719);
        org.joda.time.LocalDate localDate8 = localDate6.withCenturyOfEra(26167);
        int int9 = localDate8.getWeekyear();
        org.joda.time.LocalDate.Property property10 = localDate8.year();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localTime13.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime.Property property20 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime21 = property20.withMaximumValue();
        org.joda.time.LocalTime localTime23 = localTime21.minusSeconds(2782);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (-1), chronology25);
        org.joda.time.Period period27 = period26.toPeriod();
        int int28 = period27.size();
        int int29 = period27.getMinutes();
        int[] intArray30 = period27.getValues();
        org.joda.time.Duration duration31 = period27.toStandardDuration();
        org.joda.time.LocalTime localTime33 = localTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 0);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime34, (org.joda.time.ReadablePartial) localTime35, periodType36);
        org.joda.time.Period period38 = period37.negated();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (-1), chronology40);
        org.joda.time.Period period42 = period41.toPeriod();
        org.joda.time.Period period43 = period38.withFields((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        boolean boolean45 = period38.isSupported(durationFieldType44);
        org.joda.time.Period period47 = period38.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime48 = localTime21.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.LocalTime.Property property49 = localTime21.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int51 = localTime21.indexOf(dateTimeFieldType50);
        org.joda.time.LocalTime.Property property52 = localTime21.hourOfDay();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.millisOfDay();
        org.joda.time.DateTime dateTime55 = dateTime53.withTimeAtStartOfDay();
        org.joda.time.Period period57 = new org.joda.time.Period((long) '#');
        int int59 = period57.getValue(0);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration63 = period57.toDurationTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.millisOfDay();
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale67);
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleKeys();
        java.lang.String str70 = dateTimeField65.getAsShortText(26167, locale67);
        java.lang.String str71 = property52.getAsShortText(locale67);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.Locale locale73 = java.util.Locale.US;
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone72, locale73);
        java.lang.String str75 = locale67.getDisplayLanguage(locale73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate76 = property10.setCopy("2022-02-22T07:16:46.968Z/2022-02-22T07:16:46.968Z", locale67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:16:46.968Z/2022-02-22T07:16:46.968Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-2616751) + "'", int9 == (-2616751));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "26167" + "'", str70, "26167");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "10" + "'", str71, "10");
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT-E3:00");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645514525732,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=5,MILLISECOND=732,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Japanese" + "'", str75, "Japanese");
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        java.util.Date date5 = new java.util.Date(51, 0, 86399999, 2022, 26219625);
        date5.setYear((int) 'x');
        java.lang.String str8 = date5.toLocaleString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 29 07:45:00 GMT-E3:00 2020");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2020/03/29 7:45:00" + "'", str8, "2020/03/29 7:45:00");
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        int int7 = period5.getValue(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration11 = period5.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 7, chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localDate16.toString("2074-04-15T14:34:51.755Z/2074-04-15T14:34:51.755Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        org.joda.time.Period period8 = new org.joda.time.Period(22, (int) (short) 10, (int) '#', (int) (short) 100, 32772, 3, 0, (int) ' ');
        java.lang.String str9 = period8.toString();
        org.joda.time.Period period11 = period8.withYears(995);
        org.joda.time.Period period13 = org.joda.time.Period.seconds((int) (byte) 1);
        org.joda.time.Period period14 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period16 = period14.plusYears(131820000);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P22Y10M35W100DT32772H3M0.032S" + "'", str9, "P22Y10M35W100DT32772H3M0.032S");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime8 = localTime6.minusSeconds((int) '#');
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(21795);
        org.joda.time.LocalTime localTime12 = localTime10.plusMillis(26178719);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localTime12.getFields();
        org.joda.time.LocalTime localTime15 = localTime12.plusHours(49558440);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 37435440 + "'", int4 == 37435440);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        boolean boolean8 = dateTimeZone6.equals((java.lang.Object) 1645514161708L);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtStartOfDay(dateTimeZone6);
        int int10 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate2.minusMonths(2074);
        org.joda.time.LocalDate localDate14 = localDate12.minusYears((int) (byte) 1);
        java.lang.String str15 = localDate12.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDate12.getValue(62222);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 62222");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 382 + "'", int10 == 382);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "38101-06-06" + "'", str15, "38101-06-06");
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((-27215740), 52492086, 162, 0, 6017127, 649, 874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6017127 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime13 = dateTime7.toDateTime(chronology11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, (long) ' ', periodType6, chronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra(2);
        long long20 = chronology11.set((org.joda.time.ReadablePartial) localDateTime16, (long) (short) 10);
        org.joda.time.DurationField durationField21 = chronology11.seconds();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 2782, 60000L, chronology11);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime23.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime23, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMonthOfYear(5);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusMonths(999);
        int[] intArray37 = chronology11.get((org.joda.time.ReadablePartial) localDateTime31, (long) (byte) 100);
        org.joda.time.DurationField durationField38 = chronology11.minutes();
        boolean boolean39 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#');
        int int48 = period46.getValue(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (-292275054), (long) (short) 0, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.millisOfSecond();
        org.joda.time.DurationField durationField56 = durationFieldType0.getField(chronology53);
        org.joda.time.DurationField durationField57 = chronology53.minutes();
        org.joda.time.DurationField durationField58 = chronology53.centuries();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3291002635486L + "'", long20 == 3291002635486L);
        org.junit.Assert.assertNotNull(durationField21);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 623 + "'", int26 == 623);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1969, 12, 23, 10800100]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        long long5 = dateTimeField2.getDifferenceAsLong(3291028486957L, 3291028498410L);
        int int6 = dateTimeField2.getMaximumValue();
        long long9 = dateTimeField2.getDifferenceAsLong(0L, (-10L));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        int int9 = property8.getMinimumValueOverall();
        int int10 = property8.getMaximumValue();
        org.joda.time.DateTime dateTime11 = property8.roundHalfFloorCopy();
        org.joda.time.DurationField durationField12 = property8.getLeapDurationField();
        org.joda.time.DateTime dateTime14 = property8.addWrapFieldToCopy(26208878);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        java.util.Date date16 = dateTime14.toDate();
        int int17 = date16.getSeconds();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Apr 06 01:01:55 GMT-E3:00 2074");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 55 + "'", int17 == 55);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 1645514280100L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withDayOfWeek(36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        int int4 = dateTimeField2.getLeapAmount((long) 26151451);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int7 = dateTimeField2.getMaximumShortTextLength(locale6);
        long long10 = dateTimeField2.addWrapField((long) 26160257, 26155103);
        int int13 = dateTimeField2.getDifference(1645514216624L, 1645514166004L);
        long long16 = dateTimeField2.add(1645534800000L, 38104);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 22560257L + "'", long10 == 22560257L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1782709200000L + "'", long16 == 1782709200000L);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getDisplayScript();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        int int26 = dateTimeField24.getLeapAmount((long) 26151451);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int29 = dateTimeField24.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale20.getDisplayCountry(locale28);
        java.lang.String str31 = locale20.getISO3Language();
        java.lang.String str32 = locale20.getDisplayName();
        java.util.Calendar calendar33 = dateTime17.toCalendar(locale20);
        calendar33.add((int) (short) 10, 13);
        java.util.Date date43 = new java.util.Date(12, 100, (-292275054), (-1), 436, (int) '#');
        int int44 = date43.getDay();
        int int45 = date43.getSeconds();
        int int46 = date43.getMonth();
        calendar33.setTime(date43);
        java.lang.String str48 = date43.toLocaleString();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.getISO3Country();
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale49);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType57 = periodType56.withSecondsRemoved();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.hourOfHalfday();
        org.joda.time.DateTime dateTime64 = dateTime58.toDateTime(chronology62);
        org.joda.time.Period period65 = new org.joda.time.Period((long) 1, (long) ' ', periodType57, chronology62);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withCenturyOfEra(2);
        long long71 = chronology62.set((org.joda.time.ReadablePartial) localDateTime67, (long) (short) 10);
        org.joda.time.DurationField durationField72 = chronology62.seconds();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 2782, 60000L, chronology62);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime75);
        int int77 = dateTime74.getMinuteOfDay();
        org.joda.time.Period period79 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime80 = dateTime74.plus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime74, chronology81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withMonthOfYear(5);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.minusMonths(999);
        int[] intArray88 = chronology62.get((org.joda.time.ReadablePartial) localDateTime82, (long) (byte) 100);
        boolean boolean89 = dateFormatSymbols51.equals((java.lang.Object) chronology62);
        boolean boolean90 = date43.equals((java.lang.Object) boolean89);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str32, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-25254130308205000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=798287,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=16,SECOND=35,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Wed Nov 04 06:16:35 GMT-E3:00 798287");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "798287/11/04 6:16:35" + "'", str48, "798287/11/04 6:16:35");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "JPN" + "'", str50, "JPN");
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3291002635582L + "'", long71 == 3291002635582L);
        org.junit.Assert.assertNotNull(durationField72);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 623 + "'", int77 == 623);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1969, 12, 23, 10800100]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.joda.time.Period period1 = new org.joda.time.Period(1645514502701L);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-22T07:18:26.708Z/2022-02-22T07:18:26.708Z");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime4.getMinuteOfDay();
        int int8 = dateTime4.getYearOfCentury();
        int int9 = dateTime4.getDayOfMonth();
        org.joda.time.DateTime dateTime11 = dateTime4.minusWeeks((int) (short) 0);
        boolean boolean12 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime.Property property13 = dateTime2.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime14.toTimeOfDay();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        boolean boolean17 = mutableInterval1.isAfter((org.joda.time.ReadableInstant) instant16);
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 623 + "'", int7 == 623);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("2022-02-22T07:17:04.138Z/2022-02-22T07:17:04.138Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((java.lang.Object) "2022-02-22T07:17:04.138Z/2022-02-22T07:17:04.138Z");
        org.junit.Assert.assertNotNull(mutableInterval1);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        java.util.Date date5 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int6 = date5.getYear();
        date5.setHours(38270);
        int int9 = date5.getDate();
        long long10 = date5.getTime();
        date5.setMonth(90);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jul 12 14:14:00 GMT-E3:00 4694");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2782 + "'", int6 == 2782);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 85752386040000L + "'", long10 == 85752386040000L);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        int int20 = dateTime16.getYearOfCentury();
        int int21 = dateTime16.getDayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime16.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        int int26 = dateTimeField25.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((int) (byte) 10);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = period31.toDurationFrom(readableInstant32);
        long long34 = duration33.getMillis();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plus((org.joda.time.ReadableDuration) duration33);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime29, (int) (short) 1, locale37);
        org.joda.time.ReadablePartial readablePartial39 = null;
        int int40 = dateTimeField25.getMaximumValue(readablePartial39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDateTime41.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusYears(26151451);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        int int49 = period47.getValue(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime45.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (-1), chronology57);
        org.joda.time.Period period59 = period58.toPeriod();
        int int60 = period59.size();
        int int61 = period59.getMinutes();
        int[] intArray62 = period59.getValues();
        int int63 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55, intArray62);
        int[] intArray65 = dateTimeField12.addWrapPartial((org.joda.time.ReadablePartial) localDateTime14, 6, intArray62, 0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime14.plusDays((int) (byte) -1);
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.lang.String str70 = localDateTime14.toString("26196638", locale69);
        java.lang.String str71 = locale69.getDisplayName();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 623 + "'", int19 == 623);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 74 + "'", int20 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1439 + "'", int40 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "26196638" + "'", str70, "26196638");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str71, "\u65e5\u672c\u8a9e\u65e5\u672c)");
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYear(10);
        int int26 = localDateTime25.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusYears(914);
        int int29 = localDateTime25.getMonthOfYear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3291002635672L + "'", long12 == 3291002635672L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2074-04-06T10:23:55.672-213:00/2074-04-06T10:23:55.672-213:00" + "'", str13, "2074-04-06T10:23:55.672-213:00/2074-04-06T10:23:55.672-213:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime0, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMonthOfYear(5);
        int int11 = localDateTime8.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withEra(52673);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52673 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 96 + "'", int11 == 96);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 'u', (long) 26161182);
        boolean boolean4 = interval2.contains(3291028672615L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(37435440, 26218444, (int) (byte) 1, 52682759, 18468);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52682759 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        java.lang.Object obj1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period(obj1, chronology13);
        org.joda.time.Period period17 = period15.withMonths(474);
        org.joda.time.Period period18 = period15.toPeriod();
        org.joda.time.Period period20 = period15.withDays(52);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        int int32 = dateTime23.get(dateTimeFieldType30);
        boolean boolean33 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property34 = dateTime23.weekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeUtils.getZone(dateTimeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(10L, chronology39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyear();
        int int42 = dateTime40.get(dateTimeFieldType41);
        org.joda.time.DateMidnight dateMidnight43 = dateTime40.toDateMidnight();
        org.joda.time.DateTime dateTime44 = localDate37.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDate localDate46 = localDate37.plusYears((int) '4');
        org.joda.time.LocalDate localDate48 = localDate46.plusWeeks(16);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (-1), chronology50);
        org.joda.time.Period period52 = period51.toPeriod();
        int int53 = period52.size();
        int int54 = period52.getMinutes();
        int[] intArray55 = period52.getValues();
        org.joda.time.Period period57 = period52.withMonths(26155103);
        org.joda.time.Period period59 = period57.minusDays((-292275054));
        int int60 = period57.getHours();
        org.joda.time.Period period62 = period57.withMinutes(914);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Chronology chronology65 = org.joda.time.DateTimeUtils.getChronology(chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology65.hourOfHalfday();
        org.joda.time.DurationField durationField67 = durationFieldType63.getField(chronology65);
        boolean boolean68 = period57.isSupported(durationFieldType63);
        boolean boolean69 = localDate48.isSupported(durationFieldType63);
        org.joda.time.Period period71 = period20.withFieldAdded(durationFieldType63, 2);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Chronology chronology73 = org.joda.time.DateTimeUtils.getChronology(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology73.hourOfHalfday();
        org.joda.time.Chronology chronology75 = org.joda.time.DateTimeUtils.getChronology(chronology73);
        org.joda.time.DurationField durationField76 = chronology75.weekyears();
        org.joda.time.DurationField durationField77 = durationFieldType63.getField(chronology75);
        org.joda.time.DateTimeZone dateTimeZone78 = chronology75.getZone();
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(1645514366041010L, dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeUtils.getZone(dateTimeZone78);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 623 + "'", int26 == 623);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1969 + "'", int31 == 1969);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2074 + "'", int32 == 2074);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1969 + "'", int42 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = dateTimeField2.getAsShortText(26153877, locale8);
        long long11 = dateTimeField2.roundHalfEven((long) 382);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime12.getMinuteOfDay();
        int int16 = dateTime12.getYearOfCentury();
        int int17 = dateTime12.getDayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime12.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        int int22 = dateTimeField21.getMaximumValue();
        java.lang.String str24 = dateTimeField21.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        int int29 = dateTime25.getYearOfCentury();
        int int30 = dateTime25.getDayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime25.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now();
        int int36 = dateTimeField34.getMaximumValue((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str44 = dateTimeField40.getAsShortText(1645514151873L, locale43);
        java.lang.String str45 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime35, 0, locale43);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        int int49 = period47.getValue(0);
        org.joda.time.Period period51 = period47.plusWeeks(1969);
        org.joda.time.LocalTime localTime53 = localTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period47, (int) (byte) 100);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime55, (org.joda.time.ReadablePartial) localTime56, periodType57);
        org.joda.time.Period period60 = period58.minusHours(26155103);
        org.joda.time.Period period61 = period60.toPeriod();
        int[] intArray62 = period60.getValues();
        int[] intArray64 = dateTimeField2.set((org.joda.time.ReadablePartial) localTime53, (int) (byte) 1, intArray62, 0);
        org.joda.time.LocalTime localTime66 = localTime53.withHourOfDay(11);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        boolean boolean68 = localTime66.isSupported(durationFieldType67);
        int int69 = localTime66.getSecondOfMinute();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "10" + "'", str6, "10");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26153877" + "'", str9, "26153877");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 623 + "'", int15 == 623);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74 + "'", int16 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1439 + "'", int22 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "180" + "'", str24, "180");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 623 + "'", int28 == 623);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 74 + "'", int29 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1439 + "'", int36 == 1439);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "10" + "'", str44, "10");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime.Property property27 = dateTime25.weekyear();
        int int28 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.plusMinutes(474);
        long long31 = dateTime25.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime25.withDayOfYear(5875167);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5875167 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3291002635809L + "'", long31 == 3291002635809L);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("+00:00:00.117");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00:00.117\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property7 = localDate4.yearOfEra();
        org.joda.time.Chronology chronology8 = localDate4.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.months();
        java.lang.String str10 = durationField9.getName();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "months" + "'", str10, "months");
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayScript();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        int int6 = dateTimeField4.getLeapAmount((long) 26151451);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int9 = dateTimeField4.getMaximumShortTextLength(locale8);
        java.lang.String str10 = locale0.getDisplayCountry(locale8);
        java.lang.String str11 = locale8.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = locale8.getUnicodeLocaleType("2074-04-15T14:34:55.252Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2074-04-15T14:34:55.252Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "China" + "'", str10, "China");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks(1439);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withWeekyear(0);
        int int11 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusWeeks(26181277);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        int int17 = localDateTime15.getDayOfYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfWeek();
        org.joda.time.Chronology chronology19 = localDateTime15.getChronology();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 96 + "'", int3 == 96);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 347 + "'", int17 == 347);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = durationFieldType5.getField(chronology7);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) instant3, chronology7);
        org.joda.time.Instant instant13 = instant3.withDurationAdded(1645514154223L, 100);
        org.joda.time.Instant instant15 = instant3.minus((long) (byte) -1);
        org.joda.time.DateTime dateTime16 = instant3.toDateTimeISO();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.hourOfDay();
        org.joda.time.DurationField durationField23 = chronology20.years();
        org.joda.time.DateTime dateTime24 = instant3.toDateTime(chronology20);
        org.joda.time.MutableDateTime mutableDateTime25 = instant3.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime4 = property2.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime4.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        int int18 = dateTime14.getYearOfCentury();
        int int19 = dateTime14.getDayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime14.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        int int24 = dateTimeField23.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks((int) (byte) 10);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationFrom(readableInstant30);
        long long32 = duration31.getMillis();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plus((org.joda.time.ReadableDuration) duration31);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str36 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime27, (int) (short) 1, locale35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale35.getDisplayLanguage(locale37);
        java.lang.String str39 = dateTimeZone6.getShortName((long) (short) 100, locale35);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusDays(26153577);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-213:00" + "'", str8, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-213:00" + "'", str10, "-213:00");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 623 + "'", int17 == 623);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 74 + "'", int18 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 35L + "'", long32 == 35L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str38, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-213:00" + "'", str39, "-213:00");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        java.lang.String str5 = interval4.toString();
        org.joda.time.DateTime dateTime6 = interval4.getEnd();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) (byte) 10);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationFrom(readableInstant12);
        long long14 = duration13.getMillis();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plus((org.joda.time.ReadableDuration) duration13);
        boolean boolean16 = interval4.equals((java.lang.Object) duration13);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusMonths(10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusWeeks(38270);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTime dateTime30 = dateTime25.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone(dateTimeZone31);
        java.lang.String str34 = dateTimeZone32.getName((long) ' ');
        java.lang.String str36 = dateTimeZone32.getName((long) (short) -1);
        org.joda.time.DateTime dateTime37 = dateTime30.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime38 = localDateTime24.toDateTime(dateTimeZone32);
        org.joda.time.Period period40 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.days();
        org.joda.time.Period period42 = period40.normalizedStandard(periodType41);
        org.joda.time.Period period44 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.Period period46 = period44.normalizedStandard(periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        int int48 = periodType45.indexOf(durationFieldType47);
        boolean boolean49 = periodType41.isSupported(durationFieldType47);
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType41);
        org.joda.time.Period period51 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime38, periodType41);
        org.joda.time.Period period52 = new org.joda.time.Period(4936626000000L, 1645514251979L, periodType41);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2074-04-06T10:23:55.911-213:00/2074-04-06T10:23:55.911-213:00" + "'", str5, "2074-04-06T10:23:55.911-213:00/2074-04-06T10:23:55.911-213:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 623 + "'", int28 == 623);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-213:00" + "'", str34, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-213:00" + "'", str36, "-213:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology1);
        int int3 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime localTime5 = localTime2.minusMinutes(2022);
        org.joda.time.LocalTime localTime7 = localTime5.minusSeconds(9);
        org.joda.time.LocalTime localTime9 = localTime5.plusSeconds(1970);
        org.joda.time.Duration duration11 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.Period period16 = duration11.toPeriod(chronology13);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeUtils.getZone(dateTimeZone19);
        boolean boolean22 = dateTimeZone20.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = localTime5.toDateTimeToday(dateTimeZone24);
        org.joda.time.LocalTime.Property property26 = localTime5.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.LocalTime localTime28 = localTime5.withFields(readablePartial27);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.joda.time.Period period1 = new org.joda.time.Period(1645514171181L);
        org.joda.time.Period period3 = period1.withMonths(26175498);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        boolean boolean5 = period3.isSupported(durationFieldType4);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.Period period3 = period1.normalizedStandard(periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withYearsRemoved();
        java.lang.String str5 = periodType4.getName();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Days" + "'", str5, "Days");
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        java.lang.Object[] objArray8 = charSet4.toArray();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (-1), chronology10);
        org.joda.time.Period period12 = period11.toPeriod();
        int int13 = period12.size();
        int int14 = period12.getMinutes();
        int[] intArray15 = period12.getValues();
        org.joda.time.Period period17 = period12.withMonths(26155103);
        boolean boolean18 = charSet4.equals((java.lang.Object) 26155103);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = locale19.getDisplayScript();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        int int25 = dateTimeField23.getLeapAmount((long) 26151451);
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int28 = dateTimeField23.getMaximumShortTextLength(locale27);
        java.lang.String str29 = locale19.getDisplayCountry(locale27);
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime31.getMinuteOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime31.plus((org.joda.time.ReadablePeriod) period36);
        int int38 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean40 = dateTime31.isSupported(dateTimeFieldType39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType39 };
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = charSet30.toArray(dateTimeFieldTypeArray41);
        boolean boolean43 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet30);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[#,  , 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[#,  , 4]");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "China" + "'", str29, "China");
        org.junit.Assert.assertNotNull(charSet30);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 623 + "'", int34 == 623);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 55 + "'", int38 == 55);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        int int12 = period10.getValue(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.years();
        org.joda.time.Interval interval20 = interval2.withChronology(chronology17);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology17);
        int int22 = localTime21.getMillisOfSecond();
        int int23 = localTime21.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 37436024 + "'", int23 == 37436024);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DurationField durationField3 = chronology2.years();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 26167, chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField6 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        java.lang.String str12 = dateTimeField9.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime13.getMinuteOfDay();
        int int17 = dateTime13.getYearOfCentury();
        int int18 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime13.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        int int24 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str32 = dateTimeField28.getAsShortText(1645514151873L, locale31);
        java.lang.String str33 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime23, 0, locale31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        int int37 = period35.getValue(0);
        org.joda.time.Period period39 = period35.plusWeeks(1969);
        org.joda.time.LocalTime localTime41 = localTime23.withPeriodAdded((org.joda.time.ReadablePeriod) period35, (int) (byte) 100);
        org.joda.time.Chronology chronology42 = localTime23.getChronology();
        org.joda.time.LocalTime localTime44 = localTime23.plusHours(304);
        org.joda.time.LocalTime localTime46 = localTime44.minusSeconds(15778080);
        int int47 = localTime46.getMillisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 623 + "'", int3 == 623);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "180" + "'", str12, "180");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 623 + "'", int16 == 623);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74 + "'", int17 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "10" + "'", str32, "10");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 41756044 + "'", int47 == 41756044);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:15:55.265Z/2022-02-22T07:15:...\" is malformed at \"T07:15:55.265Z/2022-02-22T07:15:...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period4 = new org.joda.time.Period(3291028778288L, 4228631568000L, periodType2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 937602789712");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-1), chronology1);
        org.joda.time.Period period3 = period2.toPeriod();
        int int4 = period3.size();
        org.joda.time.Period period6 = period3.minusHours(26181277);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#');
        int int10 = period8.getValue(0);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        int int12 = period8.get(durationFieldType11);
        java.lang.String str13 = durationFieldType11.getName();
        org.joda.time.Period period15 = period3.withField(durationFieldType11, 24);
        int int16 = period15.size();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.Period period12 = duration7.toPeriod(chronology9);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeUtils.getZone(dateTimeZone15);
        boolean boolean18 = dateTimeZone16.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology19 = chronology9.withZone(dateTimeZone16);
        boolean boolean20 = calendar1.after((java.lang.Object) chronology9);
        calendar1.setLenient(false);
        calendar1.set((int) 'a', (int) 'u', 817, 26171, 52458322, 4);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfHalfday();
        org.joda.time.DateTime dateTime39 = dateTime33.toDateTime(chronology37);
        org.joda.time.Period period40 = duration32.toPeriod(chronology37);
        org.joda.time.Days days41 = duration32.toStandardDays();
        org.joda.time.Period period42 = days41.toPeriod();
        org.joda.time.Period period44 = period42.minusYears(1970);
        boolean boolean45 = calendar1.after((java.lang.Object) period42);
        calendar1.set(814, 721, 34, 12, 586, 26213693);
        java.util.Date date53 = new java.util.Date();
        calendar1.setTime(date53);
        calendar1.set(6017515, 26181277, 41);
        java.lang.String str59 = calendar1.getCalendarType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6017515,MONTH=26181277,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=41,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=6,MILLISECOND=479,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514526478L + "'", long2 == 1645514526478L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514526478L + "'", long3 == 1645514526478L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(days41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Sun Feb 13 10:22:06 GMT-E3:00 2022");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "gregory" + "'", str59, "gregory");
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = property7.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(26153877);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26153877 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 23 + "'", int1 == 23);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        long long6 = dateTimeZone4.convertUTCToLocal((long) 1970);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(1375201439L, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra(3);
        int int12 = localDateTime11.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.property(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DurationField durationField18 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str23 = dateTimeField19.getAsText((int) (byte) 0, locale21);
        java.lang.String str24 = property14.getAsShortText(locale21);
        java.lang.String str25 = dateTimeZone4.getShortName(1645514178829L, locale21);
        java.util.Locale.setDefault(category0, locale21);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1970L + "'", long6 == 1970L);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 96 + "'", int12 == 96);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10" + "'", str24, "10");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        int int15 = period14.size();
        int int16 = period14.getMinutes();
        int[] intArray17 = period14.getValues();
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        org.joda.time.LocalTime localTime20 = localTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-1), chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period30 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        boolean boolean32 = period25.isSupported(durationFieldType31);
        org.joda.time.Period period34 = period25.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime35 = localTime8.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalTime.Property property36 = localTime8.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int38 = localTime8.indexOf(dateTimeFieldType37);
        org.joda.time.LocalTime.Property property39 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime40 = property39.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = property39.setCopy("2074-04-15T14:34:14.636Z/2074-04-15T14:34:14.636Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2074-04-15T14:34:14.636Z/2074-04-15T14:34:14.636Z\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(1645514280100L);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        int int5 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withDayOfMonth((int) (byte) 10);
        int int8 = localDateTime7.getWeekOfWeekyear();
        boolean boolean10 = localDateTime7.equals((java.lang.Object) 1646119028438L);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withMinuteOfHour(4);
        int int13 = localDateTime7.getMinuteOfHour();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 40 + "'", int13 == 40);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.withFields(readablePartial3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology6);
        int int8 = localTime7.getSecondOfMinute();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime2.withSecondOfMinute(5954374);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5954374 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = dateTimeFormatter2.parseLocalTime("2074-04-17T01:39:24.211+35:00/2074-04-17T01:39:24.211+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = localDateTime0.getFieldType((int) (short) 1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        boolean boolean6 = dateTimeFieldType2.isSupported(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.millisOfSecond();
        java.util.Locale locale11 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField8.set(868363380032L, "2126-06-09T08:54:32.698+35:00/2126-06-09T08:54:32.698+35:00", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2126-06-09T08:54:32.698+35:00/2126-06-09T08:54:32.698+35:00\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.joda.time.Period period1 = org.joda.time.Period.millis(814);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial5 = null;
        org.joda.time.LocalTime localTime6 = localTime4.withFields(readablePartial5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology8);
        int int10 = localTime9.getSecondOfMinute();
        org.joda.time.Period period11 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime9);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.Period period13 = period1.normalizedStandard(periodType12);
        java.lang.Class<?> wildcardClass14 = period1.getClass();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String[] strArray53 = java.util.TimeZone.getAvailableIDs((int) '#');
        dateFormatSymbols51.setAmPmStrings(strArray53);
        java.lang.String[] strArray55 = dateFormatSymbols51.getShortWeekdays();
        java.lang.String[] strArray56 = dateFormatSymbols51.getMonths();
        java.lang.String[] strArray57 = dateFormatSymbols51.getMonths();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1060 + "'", int6 == 1060);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74 + "'", int7 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1060 + "'", int30 == 1060);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 74 + "'", int31 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.joda.time.DateTimeUtils.setCurrentMillisFixed(3291633242703L);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        int int9 = dateTime7.getYear();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.LocalTime localTime14 = localTime12.withFields(readablePartial13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology16);
        int int18 = localTime17.getSecondOfMinute();
        org.joda.time.Period period19 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime12, (org.joda.time.ReadablePartial) localTime17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Period period21 = period19.plus(readablePeriod20);
        org.joda.time.DateTime dateTime22 = dateTime7.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis(1645514153096L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime23.withMinuteOfHour(5874067);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5874067 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1054 + "'", int3 == 1054);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2074 + "'", int9 == 2074);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        int int16 = period14.getValue(0);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        int int18 = period14.get(durationFieldType17);
        boolean boolean19 = period12.isSupported(durationFieldType17);
        int int20 = period12.getDays();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTime(chronology7);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfYear();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.Period period13 = new org.joda.time.Period(1739830583545L, chronology7);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology7.getDateTimeMillis(1645514170915L, 42, 34, 796387, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.DurationField durationField23 = dateTimeField9.getDurationField();
        long long24 = durationField23.getUnitMillis();
        long long26 = durationField23.getValueAsLong(327L);
        long long28 = durationField23.getMillis(54);
        long long31 = durationField23.getValueAsLong((-292260000L), (long) 53);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        int int42 = dateTimeField41.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = period47.toDurationFrom(readableInstant48);
        long long50 = duration49.getMillis();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plus((org.joda.time.ReadableDuration) duration49);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDateTime45, (int) (short) 1, locale53);
        org.joda.time.DurationField durationField55 = dateTimeField41.getDurationField();
        long long56 = durationField55.getUnitMillis();
        long long58 = durationField55.getValueAsLong(327L);
        long long60 = durationField55.getMillis(54);
        long long63 = durationField55.getValueAsLong((-292260000L), (long) 53);
        int int64 = durationField23.compareTo(durationField55);
        int int67 = durationField23.getDifference((long) (short) -1, 1645514333327L);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType70 = periodType69.withDaysRemoved();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.Chronology chronology75 = dateTime74.getChronology();
        org.joda.time.Period period76 = new org.joda.time.Period(1645514161529L, periodType70, chronology75);
        org.joda.time.DurationField durationField77 = chronology75.seconds();
        int int78 = durationField23.compareTo(durationField77);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1054 + "'", int3 == 1054);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 74 + "'", int4 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 13 + "'", int5 == 13);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3240000L + "'", long28 == 3240000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-4871L) + "'", long31 == (-4871L));
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1054 + "'", int35 == 1054);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 74 + "'", int36 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 13 + "'", int37 == 13);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1439 + "'", int42 == 1439);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 35L + "'", long50 == 35L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 60000L + "'", long56 == 60000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3240000L + "'", long60 == 3240000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-4871L) + "'", long63 == (-4871L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-27425238) + "'", int67 == (-27425238));
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy(7);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDate localDate8 = property3.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate9 = property3.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property3.roundHalfFloorCopy();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Period period16 = period12.plusWeeks(1969);
        org.joda.time.Days days17 = period16.toStandardDays();
        org.joda.time.Period period19 = org.joda.time.Period.days(26171);
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = period20.negated();
        int int22 = period21.getHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) period21, 6017127);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -26171 * 6017127");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        java.util.Date date3 = new java.util.Date(5884928, 26151451, 6015213);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Sep 02 00:00:00 GMT-E3:00 8082584");
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime localTime6 = localTime0.minusHours(2);
        int int7 = localTime0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 34 + "'", int1 == 34);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        int int7 = period5.getValue(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration11 = period5.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.Period period14 = new org.joda.time.Period(obj0, chronology12);
        org.joda.time.Period period16 = period14.withMonths(474);
        org.joda.time.Period period17 = period14.toPeriod();
        org.joda.time.Period period19 = period14.withDays(52);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime22.getMinuteOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(10L, chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = dateTime28.get(dateTimeFieldType29);
        int int31 = dateTime22.get(dateTimeFieldType29);
        boolean boolean32 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property33 = dateTime22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeUtils.getZone(dateTimeZone34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, dateTimeZone35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(10L, chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DateMidnight dateMidnight42 = dateTime39.toDateMidnight();
        org.joda.time.DateTime dateTime43 = localDate36.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDate localDate45 = localDate36.plusYears((int) '4');
        org.joda.time.LocalDate localDate47 = localDate45.plusWeeks(16);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (-1), chronology49);
        org.joda.time.Period period51 = period50.toPeriod();
        int int52 = period51.size();
        int int53 = period51.getMinutes();
        int[] intArray54 = period51.getValues();
        org.joda.time.Period period56 = period51.withMonths(26155103);
        org.joda.time.Period period58 = period56.minusDays((-292275054));
        int int59 = period56.getHours();
        org.joda.time.Period period61 = period56.withMinutes(914);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        org.joda.time.DurationField durationField66 = durationFieldType62.getField(chronology64);
        boolean boolean67 = period56.isSupported(durationFieldType62);
        boolean boolean68 = localDate47.isSupported(durationFieldType62);
        org.joda.time.Period period70 = period19.withFieldAdded(durationFieldType62, 2);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Chronology chronology72 = org.joda.time.DateTimeUtils.getChronology(chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology72.hourOfHalfday();
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getChronology(chronology72);
        org.joda.time.DurationField durationField75 = chronology74.weekyears();
        org.joda.time.DurationField durationField76 = durationFieldType62.getField(chronology74);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.plusYears(382);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.dayOfYear();
        org.joda.time.LocalDateTime localDateTime83 = property82.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime84 = property82.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime85 = property82.roundCeilingCopy();
        int[] intArray86 = null;
        // The following exception was thrown during execution in test generation
        try {
            chronology74.validate((org.joda.time.ReadablePartial) localDateTime85, intArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1054 + "'", int25 == 1054);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1969 + "'", int30 == 1969);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2074 + "'", int31 == 2074);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1969 + "'", int41 == 1969);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        java.lang.String str5 = durationField4.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        int int13 = dateTime9.getYearOfCentury();
        int int14 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime9.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        int int19 = dateTimeField18.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = period24.toDurationFrom(readableInstant25);
        long long27 = duration26.getMillis();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plus((org.joda.time.ReadableDuration) duration26);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime22, (int) (short) 1, locale30);
        int int32 = dateTimeField8.getMaximumTextLength(locale30);
        org.joda.time.DurationField durationField33 = dateTimeField8.getRangeDurationField();
        long long36 = durationField33.getValueAsLong(1645514219549L, (long) 1969);
        int int37 = durationField4.compareTo(durationField33);
        long long40 = durationField33.subtract((long) 46, 35);
        boolean boolean41 = durationField33.isPrecise();
        long long42 = durationField33.getUnitMillis();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DurationField[hours]" + "'", str5, "DurationField[hours]");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1054 + "'", int12 == 1054);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 74 + "'", int13 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 13 + "'", int14 == 13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1439 + "'", int19 == 1439);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35L + "'", long27 == 35L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 38090L + "'", long36 == 38090L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1511999954L) + "'", long40 == (-1511999954L));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 43200000L + "'", long42 == 43200000L);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks((int) (byte) 1);
        int int14 = property10.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, (long) ' ', periodType19, chronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra(2);
        long long33 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) (short) 10);
        java.lang.String str34 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField35 = chronology24.millisOfSecond();
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTime dateTime37 = dateTime8.withChronology(chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.DateTime.Property property41 = dateTime39.weekyear();
        org.joda.time.DateTime dateTime43 = property41.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeUtils.getZone(dateTimeZone44);
        java.lang.String str47 = dateTimeZone45.getName((long) ' ');
        java.lang.String str49 = dateTimeZone45.getName((long) (short) -1);
        org.joda.time.DateTime dateTime50 = dateTime43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime53.getMinuteOfDay();
        int int57 = dateTime53.getYearOfCentury();
        int int58 = dateTime53.getDayOfMonth();
        org.joda.time.DateTime dateTime60 = dateTime53.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField62 = property61.getField();
        int int63 = dateTimeField62.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusWeeks((int) (byte) 10);
        org.joda.time.Period period68 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Duration duration70 = period68.toDurationFrom(readableInstant69);
        long long71 = duration70.getMillis();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.plus((org.joda.time.ReadableDuration) duration70);
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str75 = dateTimeField62.getAsText((org.joda.time.ReadablePartial) localDateTime66, (int) (short) 1, locale74);
        java.util.Locale locale76 = java.util.Locale.getDefault();
        java.lang.String str77 = locale74.getDisplayLanguage(locale76);
        java.lang.String str78 = dateTimeZone45.getShortName((long) (short) 100, locale74);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime80 = dateTime37.toDateTime(dateTimeZone45);
        java.lang.String str82 = dateTimeZone45.getNameKey((long) 873);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((-126000000L), dateTimeZone45);
        int int84 = dateTime83.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3291633242703L + "'", long6 == 3291633242703L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2074-04-13T17:34:02.703-213:00/2074-04-13T17:34:02.703-213:00" + "'", str7, "2074-04-13T17:34:02.703-213:00/2074-04-13T17:34:02.703-213:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3291633242703L + "'", long33 == 3291633242703L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[-213:00]" + "'", str34, "ISOChronology[-213:00]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-213:00" + "'", str47, "-213:00");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-213:00" + "'", str49, "-213:00");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1054 + "'", int56 == 1054);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 74 + "'", int57 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 13 + "'", int58 == 13);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1439 + "'", int63 == 1439);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 35L + "'", long71 == 35L);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(locale76);
// flaky:         org.junit.Assert.assertEquals(locale76.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Chinese" + "'", str77, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-213:00" + "'", str78, "-213:00");
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertNull(str82);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 7 + "'", int84 == 7);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.clear();
        calendar1.set(1, 2022);
        calendar1.add((int) (short) 0, 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str16 = interval15.toString();
        org.joda.time.DateTime dateTime17 = interval15.getEnd();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks((int) (byte) 10);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        long long25 = duration24.getMillis();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plus((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = interval15.equals((java.lang.Object) duration24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks((int) (byte) 1);
        int int33 = property29.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = interval36.isAfter((long) 10);
        org.joda.time.Duration duration39 = interval36.toDuration();
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration42);
        boolean boolean44 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = dateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property48 = dateTime47.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeUtils.getZone(dateTimeZone49);
        java.lang.String str52 = dateTimeZone50.getName((long) ' ');
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.era();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.plusWeeks((int) (byte) 1);
        int int59 = property55.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval62.isAfter((long) 10);
        org.joda.time.Duration duration65 = interval62.toDuration();
        org.joda.time.Duration duration68 = duration65.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime72 = dateTime70.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property73 = dateTime72.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeUtils.getZone(dateTimeZone74);
        java.lang.String str77 = dateTimeZone75.getName((long) ' ');
        org.joda.time.DateTime dateTime78 = dateTime72.toDateTime(dateTimeZone75);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.time();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime78, periodType79);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType82 = periodType81.withDaysRemoved();
        org.joda.time.Period period83 = period80.normalizedStandard(periodType82);
        org.joda.time.Period period84 = duration42.toPeriodTo((org.joda.time.ReadableInstant) dateTime53, periodType82);
        boolean boolean85 = calendar1.before((java.lang.Object) duration42);
        java.lang.String str86 = calendar1.toString();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514527348L + "'", long2 == 1645514527348L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2074-04-13T17:34:02.703-213:00/2074-04-13T17:34:02.703-213:00" + "'", str16, "2074-04-13T17:34:02.703-213:00/2074-04-13T17:34:02.703-213:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35L + "'", long25 == 35L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-213:00" + "'", str52, "-213:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-213:00" + "'", str77, "-213:00");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]" + "'", str86, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTimeISO();
        org.joda.time.Instant instant11 = instant7.withDurationAdded((-1L), 21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) instant11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        long long20 = duration18.getStandardSeconds();
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        int int27 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime.Property property28 = dateTime23.year();
        boolean boolean29 = mutableInterval2.equals((java.lang.Object) dateTime23);
        mutableInterval2.setDurationAfterStart((long) 26218);
        mutableInterval2.setDurationBeforeEnd(1645326283349L);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1054 + "'", int26 == 1054);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 74 + "'", int27 == 74);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate0.minusMonths(7);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate9 = localDate5.minusYears((int) '#');
        org.joda.time.LocalDate.Property property10 = localDate9.centuryOfEra();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        int int13 = periodType11.indexOf(durationFieldType12);
        org.joda.time.LocalDate localDate15 = localDate9.withFieldAdded(durationFieldType12, 156);
        boolean boolean16 = localDate0.isSupported(durationFieldType12);
        org.joda.time.DateTime dateTime17 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property18 = localDate0.era();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate20 = property18.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(52673, 6013102, 26228534, (-43), 474);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -43 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration7 = period1.toDurationTo((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMinutes(436);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfDay();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.String str14 = property11.getAsText(locale12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime15.getMinuteOfDay();
        int int19 = dateTime15.getYearOfCentury();
        int int20 = dateTime15.getDayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime15.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        int int24 = property11.compareTo((org.joda.time.ReadableInstant) dateTime23);
        java.lang.Character[] charArray28 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet29 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet29, charArray28);
        boolean boolean32 = charSet29.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays((int) (byte) 10);
        org.joda.time.Interval interval38 = localDate37.toInterval();
        org.joda.time.LocalDate localDate40 = localDate37.withYear(38270);
        boolean boolean41 = charSet29.contains((java.lang.Object) localDate37);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int43 = localDate37.get(dateTimeFieldType42);
        org.joda.time.DateTime.Property property44 = dateTime23.property(dateTimeFieldType42);
        int int45 = dateTime9.get(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(charSet13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "63242703" + "'", str14, "63242703");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1054 + "'", int18 == 1054);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 74 + "'", int19 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 382 + "'", int43 == 382);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        boolean boolean8 = localTime2.isSupported(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundHalfCeilingCopy();
        boolean boolean12 = calendar1.after((java.lang.Object) property9);
        calendar1.set(0, 20, 6);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId19 = timeZone18.toZoneId();
        int int20 = timeZone18.getRawOffset();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18);
        int int22 = calendar21.getWeekYear();
        calendar21.set(59, 1969, 3, 26183771, 14);
        boolean boolean29 = calendar1.before((java.lang.Object) 59);
        int int30 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = calendar1.getActualMinimum(5977299);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5977299");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=-213:00,offset=-766800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=20,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=6,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=7,MILLISECOND=537,ZONE_OFFSET=-766800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=59,MONTH=1969,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=3,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=26183771,MINUTE=14,SECOND=7,MILLISECOND=537,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property11 = dateTime0.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime0.withDurationAdded(54L, 30864);
        org.joda.time.LocalDate localDate15 = dateTime14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.plusWeeks(26175498);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = localDate17.withDayOfWeek(52441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52441 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1054 + "'", int5 == 1054);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 74 + "'", int6 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        boolean boolean8 = dateTimeZone6.equals((java.lang.Object) 1645514161708L);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtStartOfDay(dateTimeZone6);
        int int10 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate12 = localDate2.minusMonths(2074);
        org.joda.time.LocalDate localDate14 = localDate12.minusYears((int) (byte) 1);
        org.joda.time.LocalDate localDate16 = localDate12.minusYears(26208878);
        java.lang.String str18 = localDate16.toString("52448497");
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 382 + "'", int10 == 382);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "52448497" + "'", str18, "52448497");
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("26207456");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setExtension('u', "2074-04-15T14:37:47.045Z/2074-04-15T14:37:47.045Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 15T14:37:47.045Z/2074 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus((org.joda.time.ReadableDuration) duration18);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration18);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks((int) (byte) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationFrom(readableInstant29);
        long long31 = duration30.getMillis();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plus((org.joda.time.ReadableDuration) duration30);
        mutableInterval23.setDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = mutableInterval23.toDuration();
        boolean boolean35 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration36 = duration34.toDuration();
        long long37 = duration36.getMillis();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfDay();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfSecond();
        org.joda.time.DateTime dateTime43 = dateTime40.withCenturyOfEra(9);
        org.joda.time.Interval interval44 = duration36.toIntervalTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime45 = interval44.getStart();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 35L + "'", long31 == 35L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        org.joda.time.ReadablePartial readablePartial0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = org.joda.time.DateTimeUtils.isContiguous(readablePartial0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        org.joda.time.Period period2 = new org.joda.time.Period(0L, (long) 26153877);
        org.joda.time.Period period4 = period2.withYears(32769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType6 = period2.getFieldType(26184703);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = localDate2.toString("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", locale4);
        org.joda.time.LocalDate localDate7 = localDate2.withYear(21);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone9.getName((long) ' ');
        boolean boolean12 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime13 = localDate7.toDateTimeAtMidnight(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate7.withDayOfYear(1640);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1640 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str5, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfDay();
        long long15 = dateTimeField12.add(3291028678025L, 0L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(10L, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        int int24 = period22.getValue(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime localDateTime30 = dateTime18.toLocalDateTime();
        java.util.Date date31 = localDateTime30.toDate();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.year();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (-1), chronology37);
        org.joda.time.Period period39 = period38.toPeriod();
        int int40 = period39.size();
        int int41 = period39.getMinutes();
        int[] intArray42 = period39.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = dateTimeField12.set((org.joda.time.ReadablePartial) localDateTime30, 5885470, intArray42, 457072);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457072 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3291028678025L + "'", long15 == 3291028678025L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Fri Jan 02 11:00:00 GMT+14:34 1970");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, -1]");
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.DateTime.Property property23 = dateTime16.monthOfYear();
        boolean boolean24 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Interval interval29 = interval27.toInterval();
        org.joda.time.Interval interval31 = interval29.withStartMillis((long) (short) 1);
        boolean boolean32 = mutableInterval13.equals((java.lang.Object) interval31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfDay();
        boolean boolean39 = interval31.equals((java.lang.Object) chronology36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str43 = interval42.toString();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        long long52 = duration51.getMillis();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus((org.joda.time.ReadableDuration) duration51);
        boolean boolean54 = interval42.equals((java.lang.Object) duration51);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = interval57.isAfter((long) 10);
        org.joda.time.Interval interval60 = interval42.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.months();
        org.joda.time.Period period62 = interval42.toPeriod(periodType61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType64 = periodType63.withMillisRemoved();
        org.joda.time.Period period65 = interval42.toPeriod(periodType64);
        int[] intArray66 = period65.getValues();
        org.joda.time.Interval interval67 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Interval interval68 = interval67.toInterval();
        org.joda.time.ReadableInterval readableInterval69 = null;
        boolean boolean70 = interval67.isAfter(readableInterval69);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str43, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        boolean boolean8 = localTime2.isSupported(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundHalfCeilingCopy();
        boolean boolean12 = calendar1.after((java.lang.Object) property9);
        calendar1.set(0, 20, 6);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plusWeeks((int) (byte) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(10L, chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        int int24 = dateTime22.get(dateTimeFieldType23);
        int int25 = dateTime17.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime27 = dateTime17.minusYears(26220156);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime28.withMillisOfSecond(453);
        org.joda.time.DateTime.Property property33 = dateTime28.era();
        org.joda.time.DateTime dateTime35 = dateTime28.plusMonths(2023);
        boolean boolean36 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean37 = calendar1.after((java.lang.Object) dateTime17);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = calendar1.getGreatestMinimum(52454297);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52454297");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=20,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=6,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=9,MILLISECOND=42,ZONE_OFFSET=52499944,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime13 = dateTime7.toDateTime(chronology11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1, (long) ' ', periodType6, chronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra(2);
        long long20 = chronology11.set((org.joda.time.ReadablePartial) localDateTime16, (long) (short) 10);
        org.joda.time.DurationField durationField21 = chronology11.seconds();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 2782, 60000L, chronology11);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime23.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime23, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMonthOfYear(5);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusMonths(999);
        int[] intArray37 = chronology11.get((org.joda.time.ReadablePartial) localDateTime31, (long) (byte) 100);
        org.joda.time.DurationField durationField38 = chronology11.minutes();
        boolean boolean39 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone40);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withFieldAdded(durationFieldType42, 1970);
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.centuryOfEra();
        boolean boolean47 = durationFieldType0.isSupported(chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.minuteOfHour();
        org.joda.time.DurationField durationField49 = chronology45.seconds();
        java.lang.String str50 = durationField49.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645566858165L + "'", long20 == 1645566858165L);
        org.junit.Assert.assertNotNull(durationField21);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 534 + "'", int26 == 534);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1970, 1, 2, 39600100]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DurationField[seconds]" + "'", str50, "DurationField[seconds]");
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getISO3Language();
        java.util.Calendar.Builder builder13 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder17 = builder0.setDate(20, 26160257, 16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        int int22 = dateTimeField20.getLeapAmount((long) 26151451);
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int25 = dateTimeField20.getMaximumShortTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        int int33 = dateTime29.getYearOfCentury();
        int int34 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime29.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        int int39 = dateTimeField38.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = period44.toDurationFrom(readableInstant45);
        long long47 = duration46.getMillis();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plus((org.joda.time.ReadableDuration) duration46);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime42, (int) (short) 1, locale50);
        int int52 = dateTimeField28.getMaximumTextLength(locale50);
        java.lang.String str53 = locale24.getDisplayLanguage(locale50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime57.getMinuteOfDay();
        int int61 = dateTime57.getYearOfCentury();
        int int62 = dateTime57.getDayOfMonth();
        org.joda.time.DateTime dateTime64 = dateTime57.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property65 = dateTime64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        int int67 = dateTimeField66.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusWeeks((int) (byte) 10);
        org.joda.time.Period period72 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Duration duration74 = period72.toDurationFrom(readableInstant73);
        long long75 = duration74.getMillis();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.plus((org.joda.time.ReadableDuration) duration74);
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str79 = dateTimeField66.getAsText((org.joda.time.ReadablePartial) localDateTime70, (int) (short) 1, locale78);
        int int80 = dateTimeField56.getMaximumTextLength(locale78);
        java.lang.String str81 = locale24.getDisplayLanguage(locale78);
        java.util.Calendar.Builder builder82 = builder17.setLocale(locale24);
        java.util.Calendar.Builder builder87 = builder82.setTimeOfDay((int) (byte) 10, 26153423, (int) (short) 0, 1640);
        java.util.Calendar.Builder builder90 = builder87.set(0, 479);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder93 = builder90.setWeekDefinition(52435277, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 534 + "'", int32 == 534);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1439 + "'", int39 == 1439);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35L + "'", long47 == 35L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 534 + "'", int60 == 534);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 24 + "'", int62 == 24);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1439 + "'", int67 == 1439);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 35L + "'", long75 == 35L);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withTime(45, 104, 76181, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 45 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        int int4 = localDate0.getYearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = localDate0.getField(0);
        org.joda.time.LocalDate.Property property7 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime.Property property13 = dateTime11.weekyear();
        org.joda.time.DateTime dateTime15 = property13.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeUtils.getZone(dateTimeZone16);
        java.lang.String str19 = dateTimeZone17.getName((long) ' ');
        java.lang.String str21 = dateTimeZone17.getName((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime24 = dateTime22.minusYears(474);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, readableInstant25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292325911 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:00" + "'", str19, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+35:00" + "'", str21, "+35:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) (-27426114L));
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        int int3 = localDate2.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate2.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = localDate0.toString("2074-04-15T14:34:15.336Z/2074-04-15T14:34:15.336Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        int int20 = dateTime16.getYearOfCentury();
        int int21 = dateTime16.getDayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime16.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        int int26 = dateTimeField25.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((int) (byte) 10);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = period31.toDurationFrom(readableInstant32);
        long long34 = duration33.getMillis();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plus((org.joda.time.ReadableDuration) duration33);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime29, (int) (short) 1, locale37);
        org.joda.time.ReadablePartial readablePartial39 = null;
        int int40 = dateTimeField25.getMaximumValue(readablePartial39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDateTime41.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusYears(26151451);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        int int49 = period47.getValue(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime45.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (-1), chronology57);
        org.joda.time.Period period59 = period58.toPeriod();
        int int60 = period59.size();
        int int61 = period59.getMinutes();
        int[] intArray62 = period59.getValues();
        int int63 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55, intArray62);
        int[] intArray65 = dateTimeField12.addWrapPartial((org.joda.time.ReadablePartial) localDateTime14, 6, intArray62, 0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime14.minusHours(46);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 534 + "'", int19 == 534);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 24 + "'", int21 == 24);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1439 + "'", int40 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(459);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval4 = new org.joda.time.Interval(1645514385979L, 1645514274810L, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.LocalDate localDate7 = localDate4.withYear(38270);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localDate7.toString("2074-04-15T14:34:53.863Z/2074-04-15T14:34:53.863Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withMonthOfYear(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(3291028468858L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3291028468858 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) dateTime2, dateTimeZone15);
        int[] intArray17 = localDate16.getValues();
        org.joda.time.LocalDate.Property property18 = localDate16.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = property18.addWrapFieldToCopy(52667296);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 24]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        int int12 = dateTimeField11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime15, (int) (short) 1, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = locale23.getDisplayLanguage(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone1, locale25);
        int int29 = calendar27.getActualMaximum(2);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.fromCalendarFields(calendar27);
        calendar27.setTimeInMillis(1645514169863L);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 24 + "'", int7 == 24);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1439 + "'", int12 == 1439);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str26, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514169863,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=9,MILLISECOND=863,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays((int) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = localDate12.withYear(38270);
        boolean boolean16 = charSet4.contains((java.lang.Object) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int18 = localDate12.get(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = localDate12.withYearOfEra(877);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate23 = localDate12.withPeriodAdded(readablePeriod21, 52670823);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate23.withDayOfMonth(875);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 875 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 382 + "'", int18 == 382);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationFrom(readableInstant5);
        long long7 = duration6.getMillis();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plusSeconds(1640);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(26171);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(10L, chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = dateTime24.get(dateTimeFieldType25);
        boolean boolean27 = localTime21.isSupported(dateTimeFieldType25);
        org.joda.time.LocalTime.Property property28 = localTime21.minuteOfHour();
        org.joda.time.LocalTime localTime29 = property28.withMaximumValue();
        org.joda.time.LocalTime localTime30 = property28.roundHalfCeilingCopy();
        boolean boolean31 = calendar20.after((java.lang.Object) property28);
        org.joda.time.LocalTime localTime32 = property28.roundCeilingCopy();
        org.joda.time.LocalTime localTime34 = property28.addCopy(1645514365852L);
        int[] intArray36 = null;
        int[] intArray38 = dateTimeField18.addWrapPartial((org.joda.time.ReadablePartial) localTime34, 999, intArray36, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514409724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=9,MILLISECOND=668,ZONE_OFFSET=52499944,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNull(intArray38);
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        java.lang.String str6 = duration5.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) ' ', dateTimeZone1);
        int int3 = dateTime2.getYearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationFrom(readableInstant14);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) 32772, (int) (byte) 10);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime24.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime24.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime24.minus((long) 10);
        org.joda.time.Period period35 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.plusWeeks((int) (byte) 1);
        int int41 = property37.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = interval44.isAfter((long) 10);
        org.joda.time.Duration duration47 = interval44.toDuration();
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration50, 26160257);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = interval56.isAfter((long) 10);
        org.joda.time.Duration duration59 = interval56.toDuration();
        boolean boolean60 = duration53.isLongerThan((org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.withCenturyOfEra(382);
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.lang.String str67 = localDate64.toString("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", locale66);
        org.joda.time.LocalDate localDate69 = localDate64.withYear(21);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeUtils.getZone(dateTimeZone70);
        java.lang.String str73 = dateTimeZone71.getName((long) ' ');
        long long75 = dateTimeZone71.previousTransition((long) (short) 1);
        org.joda.time.Interval interval76 = localDate64.toInterval(dateTimeZone71);
        int int78 = dateTimeZone71.getOffset(1645514275439L);
        boolean boolean79 = duration53.equals((java.lang.Object) 1645514275439L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 534 + "'", int11 == 534);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 534 + "'", int27 == 534);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str67, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+35:00" + "'", str73, "+35:00");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(interval76);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 126000000 + "'", int78 == 126000000);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime9.era();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        boolean boolean32 = dateTime31.isEqualNow();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime9.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str37 = dateTimeFieldType36.getName();
        boolean boolean38 = dateTime9.isSupported(dateTimeFieldType36);
        java.lang.Object obj39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.millisOfDay();
        org.joda.time.DateTime dateTime42 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        int int46 = period44.getValue(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration50 = period44.toDurationTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.millisOfDay();
        org.joda.time.Period period53 = new org.joda.time.Period(obj39, chronology51);
        org.joda.time.DateTime dateTime55 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period53, (-2720));
        int int56 = dateTime9.getDayOfMonth();
        long long57 = dateTime9.getMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "dayOfMonth" + "'", str37, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645566858165L + "'", long57 == 1645566858165L);
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay();
        int int7 = localDate3.getDayOfYear();
        org.joda.time.LocalDate localDate9 = localDate3.withWeekyear(26171);
        org.joda.time.Period period11 = org.joda.time.Period.hours(1439);
        org.joda.time.Period period13 = period11.withMillis(12);
        org.joda.time.MutablePeriod mutablePeriod14 = period11.toMutablePeriod();
        org.joda.time.LocalDate localDate16 = localDate3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, 46);
        org.joda.time.PeriodType periodType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localDate16, periodType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 55 + "'", int7 == 55);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(2787);
        org.joda.time.LocalDate localDate6 = property3.roundCeilingCopy();
        java.lang.String str7 = property3.getAsString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (-1), chronology8);
        org.joda.time.Period period10 = period9.toPeriod();
        int int11 = period10.size();
        int int12 = period10.getMinutes();
        int[] intArray13 = period10.getValues();
        org.joda.time.Period period15 = period10.withMonths(26155103);
        org.joda.time.Period period17 = period15.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minus((org.joda.time.ReadablePeriod) period15);
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.centuryOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 55 + "'", int3 == 55);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("26220768", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period4 = period1.normalizedStandard();
        int[] intArray5 = period1.getValues();
        org.joda.time.Period period7 = period1.withWeeks(26181277);
        int int8 = period1.getHours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2022);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        long long14 = dateTimeZone12.convertUTCToLocal((long) 1970);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(1375201439L, dateTimeZone12);
        boolean boolean16 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime15);
        int int17 = localDateTime15.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean19 = localDateTime15.isSupported(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType18.getField(chronology24);
        java.lang.String str28 = dateTimeField27.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1970L + "'", long14 == 1970L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfHour" + "'", str28, "minuteOfHour");
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.withFields(readablePartial3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology6);
        int int8 = localTime7.getSecondOfMinute();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime7);
        org.joda.time.LocalTime localTime11 = localTime2.plusMillis((int) (short) -1);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(26151451);
        org.joda.time.LocalTime localTime15 = localTime13.plusMinutes((int) (byte) -1);
        java.lang.String str16 = localTime13.toString();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "15:23:18.161" + "'", str16, "15:23:18.161");
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.lang.String str4 = dateTimeZone2.getName((long) ' ');
        java.lang.String str6 = dateTimeZone2.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        long long10 = dateTimeZone2.adjustOffset(1645514153208L, false);
        int int12 = dateTimeZone2.getOffset((long) 19);
        long long16 = dateTimeZone2.convertLocalToUTC(3291028485244L, false, 1645488109616L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime19 = dateTime17.minusYears(503);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:00" + "'", str4, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:00" + "'", str6, "+35:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514153208L + "'", long10 == 1645514153208L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 126000000 + "'", int12 == 126000000);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3290902485244L + "'", long16 == 3290902485244L);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.minus((long) 10);
        org.joda.time.DateTime dateTime12 = dateTime0.minusHours(7);
        int int13 = dateTime0.getCenturyOfEra();
        org.joda.time.DateTime dateTime15 = dateTime0.withYearOfEra(52488);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.DateTime dateTime18 = dateTime15.withYearOfEra((int) (byte) 100);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.Period period6 = duration1.toPeriod(chronology3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        boolean boolean12 = dateTimeZone10.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology13 = chronology3.withZone(dateTimeZone10);
        int int15 = dateTimeZone10.getOffset((long) (byte) 10);
        java.lang.String str17 = dateTimeZone10.getShortName(3291028487169L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 126000000 + "'", int15 == 126000000);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+35:00" + "'", str17, "+35:00");
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(459);
        long long11 = dateTimeZone8.adjustOffset(1645514350321L, false);
        boolean boolean12 = dateTimeZone8.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(52458193, 26184703, 26171, 396, 51, (int) (short) 1, 968, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 396 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514350321L + "'", long11 == 1645514350321L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime9.dayOfWeek();
        org.joda.time.DateTime.Property property26 = dateTime9.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("26298110");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"26298110\" is malformed at \"298110\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("\u65e5");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) 10);
        org.joda.time.Period period13 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Seconds seconds14 = duration1.toStandardSeconds();
        long long15 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(10L, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 10, chronology22);
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        boolean boolean27 = dateTime23.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = dateTime32.toDateTime(chronology36);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 1, (long) ' ', periodType31, chronology36);
        org.joda.time.DateTime dateTime40 = dateTime25.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime.Property property41 = dateTime25.dayOfWeek();
        org.joda.time.DateTime.Property property42 = dateTime25.dayOfWeek();
        org.joda.time.Period period43 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime25);
        int int44 = dateTime25.getMillisOfSecond();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(period43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 165 + "'", int44 == 165);
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDateTime24.getFieldType((int) (short) 1);
        int int27 = localDateTime23.get(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) ' ', dateTimeZone29);
        int int31 = dateTime30.getYearOfCentury();
        org.joda.time.DateTime.Property property32 = dateTime30.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.Interval interval34 = property32.toInterval();
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime36.getMinuteOfDay();
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = period41.toDurationFrom(readableInstant42);
        org.joda.time.Seconds seconds44 = duration43.toStandardSeconds();
        org.joda.time.Duration duration47 = duration43.withDurationAdded((long) 32772, (int) (byte) 10);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval49 = interval34.withDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime23.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withFieldAdded(durationFieldType53, 1970);
        int int56 = localDateTime55.getEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusSeconds(26171);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime62 = interval61.getEnd();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeUtils.getZone(dateTimeZone64);
        java.lang.String str67 = dateTimeZone65.getName((long) ' ');
        java.lang.String str69 = dateTimeZone65.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(0L, dateTimeZone65);
        org.joda.time.DateTime dateTime71 = dateTime62.withZone(dateTimeZone65);
        java.lang.String str73 = dateTimeZone65.getNameKey(1645514153208L);
        org.joda.time.DateTime dateTime74 = localDateTime55.toDateTime(dateTimeZone65);
        org.joda.time.DateTime dateTime75 = localDateTime50.toDateTime(dateTimeZone65);
        java.lang.String str76 = dateTimeZone65.getID();
        long long78 = dateTimeZone65.nextTransition((long) 474);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645566858165L + "'", long12 == 1645566858165L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str13, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 534 + "'", int39 == 534);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+35:00" + "'", str67, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+35:00" + "'", str69, "+35:00");
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+35:00" + "'", str76, "+35:00");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 474L + "'", long78 == 474L);
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.DateTime.Property property23 = dateTime16.monthOfYear();
        boolean boolean24 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Interval interval29 = interval27.toInterval();
        org.joda.time.Interval interval31 = interval29.withStartMillis((long) (short) 1);
        boolean boolean32 = mutableInterval13.equals((java.lang.Object) interval31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Interval interval37 = interval35.toInterval();
        long long38 = interval35.getEndMillis();
        java.lang.String str39 = interval35.toString();
        org.joda.time.DateTime dateTime40 = interval35.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) (byte) 1);
        int int43 = dateTime42.getDayOfWeek();
        boolean boolean44 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime42);
        java.lang.Object obj45 = mutableInterval13.clone();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getChronology(chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.DateTime dateTime56 = dateTime50.toDateTime(chronology54);
        org.joda.time.Period period57 = new org.joda.time.Period((long) 1, (long) ' ', periodType49, chronology54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra(2);
        long long63 = chronology54.set((org.joda.time.ReadablePartial) localDateTime59, (long) (short) 10);
        java.lang.String str64 = chronology54.toString();
        mutableInterval13.setChronology(chronology54);
        // The following exception was thrown during execution in test generation
        try {
            long long73 = chronology54.getDateTimeMillis(435, 2782, 24, 40, 34, 721, 586);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645566858165L + "'", long38 == 1645566858165L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str39, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.045+35:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.045+35:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.045+35:00");
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645566858165L + "'", long63 == 1645566858165L);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[+35:00]" + "'", str64, "ISOChronology[+35:00]");
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period4 = period3.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (-1), chronology6);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Period period9 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        boolean boolean11 = period4.isSupported(durationFieldType10);
        org.joda.time.Period period13 = period4.plusDays((int) (byte) 10);
        int int14 = period4.getMinutes();
        org.joda.time.Period period16 = period4.minusSeconds((-463503));
        // The following exception was thrown during execution in test generation
        try {
            int int18 = period4.getValue(2021);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2021");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime9 = localTime6.minusSeconds(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str16 = dateTimeField12.getAsShortText(1645514151873L, locale15);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = dateTimeField12.getAsShortText(26153877, locale18);
        long long21 = dateTimeField12.roundHalfEven((long) 382);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime22.getMinuteOfDay();
        int int26 = dateTime22.getYearOfCentury();
        int int27 = dateTime22.getDayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime22.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        int int32 = dateTimeField31.getMaximumValue();
        java.lang.String str34 = dateTimeField31.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        int int39 = dateTime35.getYearOfCentury();
        int int40 = dateTime35.getDayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime35.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now();
        int int46 = dateTimeField44.getMaximumValue((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str54 = dateTimeField50.getAsShortText(1645514151873L, locale53);
        java.lang.String str55 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localTime45, 0, locale53);
        org.joda.time.Period period57 = new org.joda.time.Period((long) '#');
        int int59 = period57.getValue(0);
        org.joda.time.Period period61 = period57.plusWeeks(1969);
        org.joda.time.LocalTime localTime63 = localTime45.withPeriodAdded((org.joda.time.ReadablePeriod) period57, (int) (byte) 100);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime65, (org.joda.time.ReadablePartial) localTime66, periodType67);
        org.joda.time.Period period70 = period68.minusHours(26155103);
        org.joda.time.Period period71 = period70.toPeriod();
        int[] intArray72 = period70.getValues();
        int[] intArray74 = dateTimeField12.set((org.joda.time.ReadablePartial) localTime63, (int) (byte) 1, intArray72, 0);
        org.joda.time.LocalTime localTime76 = localTime63.withHourOfDay(11);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.days();
        boolean boolean78 = localTime76.isSupported(durationFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime80 = localTime9.withFieldAdded(durationFieldType77, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 54 + "'", int1 == 54);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "6" + "'", str16, "6");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "26153877" + "'", str19, "26153877");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 534 + "'", int25 == 534);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1439 + "'", int32 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "660" + "'", str34, "660");
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 534 + "'", int38 == 534);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 24 + "'", int40 == 24);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1439 + "'", int46 == 1439);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "6" + "'", str54, "6");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime3.withZone(dateTimeZone6);
        java.lang.String str14 = dateTimeZone6.getNameKey(1645514153208L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(0L);
        int int17 = dateTimeZone6.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.minusYears(347);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertNull(str14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 126000000 + "'", int17 == 126000000);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getMinuteOfDay();
        int int9 = dateTime5.getYearOfCentury();
        int int10 = dateTime5.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime5.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        int int14 = property1.compareTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        int int16 = dateTime15.getMillisOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime18, (org.joda.time.ReadablePartial) localTime19, periodType20);
        int int22 = localTime19.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localTime19.toDateTimeToday(dateTimeZone23);
        int int25 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime26.getMinuteOfDay();
        int int30 = dateTime26.getYearOfCentury();
        int int31 = dateTime26.getDayOfMonth();
        org.joda.time.DateTime dateTime33 = dateTime26.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        int int36 = dateTimeField35.getMaximumValue();
        java.lang.String str38 = dateTimeField35.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime39.getMinuteOfDay();
        int int43 = dateTime39.getYearOfCentury();
        int int44 = dateTime39.getDayOfMonth();
        org.joda.time.DateTime dateTime46 = dateTime39.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property47 = dateTime46.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now();
        int int50 = dateTimeField48.getMaximumValue((org.joda.time.ReadablePartial) localTime49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str58 = dateTimeField54.getAsShortText(1645514151873L, locale57);
        java.lang.String str59 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localTime49, 0, locale57);
        org.joda.time.Period period61 = new org.joda.time.Period((long) '#');
        int int63 = period61.getValue(0);
        org.joda.time.Period period65 = period61.plusWeeks(1969);
        org.joda.time.LocalTime localTime67 = localTime49.withPeriodAdded((org.joda.time.ReadablePeriod) period61, (int) (byte) 100);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfDay();
        org.joda.time.DateTime dateTime70 = dateTime68.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property71 = dateTime70.millisOfSecond();
        org.joda.time.DateTime dateTime73 = dateTime70.withCenturyOfEra(9);
        org.joda.time.Duration duration74 = period61.toDurationTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime75 = dateTime24.plus((org.joda.time.ReadablePeriod) period61);
        int int76 = dateTime24.getYearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "32058165" + "'", str4, "32058165");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 534 + "'", int8 == 534);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 24 + "'", int10 == 24);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 165 + "'", int22 == 165);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 534 + "'", int29 == 534);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1439 + "'", int36 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "660" + "'", str38, "660");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 534 + "'", int42 == 534);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 24 + "'", int44 == 24);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1439 + "'", int50 == 1439);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "6" + "'", str58, "6");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 22 + "'", int76 == 22);
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 65967089);
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        int int5 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds(26171);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusWeeks((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMonthOfYear(52490073);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52490073 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean7 = interval2.equals((java.lang.Object) dateTimeFieldType6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime8, (org.joda.time.ReadablePartial) localTime9, periodType10);
        int int12 = localTime9.getMillisOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        boolean boolean18 = localTime9.equals((java.lang.Object) dateTimeFieldType16);
        boolean boolean19 = interval2.equals((java.lang.Object) boolean18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        int int21 = localTime20.getMinuteOfHour();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfDay(16);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(1645514176563L);
        long long26 = instant25.getMillis();
        org.joda.time.DateTime dateTime27 = localTime23.toDateTime((org.joda.time.ReadableInstant) instant25);
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime29.withTimeAtStartOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        int int35 = period33.getValue(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.millisOfDay();
        org.joda.time.Period period42 = new org.joda.time.Period(obj28, chronology40);
        org.joda.time.Period period44 = period42.withMonths(474);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = dateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.Duration duration48 = period44.toDurationFrom((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.Interval interval50 = interval2.withStart((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime52 = dateTime27.withYear(435);
        org.joda.time.TimeOfDay timeOfDay53 = dateTime27.toTimeOfDay();
        org.joda.time.Period period55 = org.joda.time.Period.minutes(13);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType57 = periodType56.withMinutesRemoved();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime58, (org.joda.time.ReadablePartial) localTime59, periodType60);
        org.joda.time.Period period62 = period61.negated();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (-1), chronology64);
        org.joda.time.Period period66 = period65.toPeriod();
        org.joda.time.Period period67 = period62.withFields((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.hours();
        boolean boolean69 = period62.isSupported(durationFieldType68);
        int int70 = periodType57.indexOf(durationFieldType68);
        int int71 = period55.indexOf(durationFieldType68);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType77 = periodType76.withSecondsRemoved();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime();
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Chronology chronology82 = org.joda.time.DateTimeUtils.getChronology(chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology82.hourOfHalfday();
        org.joda.time.DateTime dateTime84 = dateTime78.toDateTime(chronology82);
        org.joda.time.Period period85 = new org.joda.time.Period((long) 1, (long) ' ', periodType77, chronology82);
        org.joda.time.DurationField durationField86 = chronology82.weeks();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((long) 10, 1645514153096L, chronology82);
        boolean boolean88 = durationFieldType68.isSupported(chronology82);
        org.joda.time.DateTimeField dateTimeField89 = chronology82.yearOfEra();
        int int90 = dateTime27.get(dateTimeField89);
        int int92 = dateTimeField89.get(1645514359458L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645566858165L + "'", long5 == 1645566858165L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 32058165 + "'", int12 == 32058165);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 54 + "'", int21 == 54);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514176563L + "'", long26 == 1645514176563L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2022 + "'", int92 == 2022);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(15778080, 7, 55, 18468, 691, 241);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18468 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        int int11 = dateTime7.getYearOfCentury();
        int int12 = dateTime7.getDayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime7.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        int int17 = dateTimeField16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks((int) (byte) 10);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        long long25 = duration24.getMillis();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plus((org.joda.time.ReadableDuration) duration24);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime20, (int) (short) 1, locale28);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = locale28.getDisplayLanguage(locale30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone6, locale30);
        int int33 = timeZone6.getRawOffset();
        boolean boolean34 = timeZone4.hasSameRules(timeZone6);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime40.getMinuteOfDay();
        int int44 = dateTime40.getYearOfCentury();
        int int45 = dateTime40.getDayOfMonth();
        org.joda.time.DateTime dateTime47 = dateTime40.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        int int50 = dateTimeField49.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusWeeks((int) (byte) 10);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Duration duration57 = period55.toDurationFrom(readableInstant56);
        long long58 = duration57.getMillis();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plus((org.joda.time.ReadableDuration) duration57);
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str62 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) localDateTime53, (int) (short) 1, locale61);
        int int63 = dateTimeField39.getMaximumTextLength(locale61);
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.lang.String str65 = locale61.getDisplayName(locale64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = timeZone4.getDisplayName(false, 795, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 795");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 534 + "'", int10 == 534);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 24 + "'", int12 == 24);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1439 + "'", int17 == 1439);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35L + "'", long25 == 35L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str31, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645514411221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=11,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 534 + "'", int43 == 534);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 24 + "'", int45 == 24);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1439 + "'", int50 == 1439);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 35L + "'", long58 == 35L);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)" + "'", str65, "\u4e2d\u56fd\u8a9e\u53f0\u6e7e)");
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Appendable appendable10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays((int) (byte) 10);
        int int16 = localDate13.getYearOfEra();
        int int17 = localDate13.getYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (-1), chronology19);
        org.joda.time.Period period21 = period20.toPeriod();
        org.joda.time.Period period22 = period20.toPeriod();
        org.joda.time.Period period24 = period20.plusMillis((int) (byte) 1);
        org.joda.time.LocalDate localDate26 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period20, 52435277);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable10, (org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 38222 + "'", int16 == 38222);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 38222 + "'", int17 == 38222);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        int int19 = period17.getValue(0);
        org.joda.time.Period period20 = period17.normalizedStandard();
        org.joda.time.Period period22 = period17.plusSeconds((int) ' ');
        mutableInterval13.setPeriodAfterStart((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period25 = period17.withHours(21);
        org.joda.time.Period period27 = period25.plusSeconds(457087);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.DateTime.Property property23 = dateTime16.monthOfYear();
        boolean boolean24 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Interval interval29 = interval27.toInterval();
        org.joda.time.Interval interval31 = interval29.withStartMillis((long) (short) 1);
        boolean boolean32 = mutableInterval13.equals((java.lang.Object) interval31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Interval interval37 = interval35.toInterval();
        long long38 = interval35.getEndMillis();
        java.lang.String str39 = interval35.toString();
        org.joda.time.DateTime dateTime40 = interval35.getStart();
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) (byte) 1);
        int int43 = dateTime42.getDayOfWeek();
        boolean boolean44 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime42.minusSeconds(52501800);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645566858165L + "'", long38 == 1645566858165L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str39, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = chronology1.getDateTimeMillis(20, 52488713, 52505, 24, (int) '4', 52461667, 52499175);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 1, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField26.getMaximumValue(readablePartial40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusYears(26151451);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        int int50 = period48.getValue(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        int int61 = period60.size();
        int int62 = period60.getMinutes();
        int[] intArray63 = period60.getValues();
        int int64 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray63);
        int[] intArray66 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDateTime15, 6, intArray63, 0);
        java.util.Calendar.Builder builder67 = builder0.setFields(intArray66);
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale68);
        long long70 = calendar69.getTimeInMillis();
        long long71 = calendar69.getTimeInMillis();
        int int73 = calendar69.getMinimum(0);
        calendar69.set((int) (short) 10, (int) (short) 10, (-292275054), 26153423, 32772, 26178);
        java.util.TimeZone timeZone81 = calendar69.getTimeZone();
        java.util.Calendar.Builder builder82 = builder0.setTimeZone(timeZone81);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId83 = timeZone81.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 534 + "'", int20 == 534);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=10,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=-292275054,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=26153423,MINUTE=32772,SECOND=26178,MILLISECOND=380,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514411436L + "'", long70 == 1645514411436L);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645514411436L + "'", long71 == 1645514411436L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "GMT+14:34");
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime9.era();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        org.joda.time.DateTime dateTime27 = property25.roundCeilingCopy();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        int int34 = period32.getValue(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.String str45 = dateTimeField40.getAsShortText(26167, locale42);
        java.lang.String str46 = locale42.getVariant();
        int int47 = property25.getMaximumTextLength(locale42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval48 = property25.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "26167" + "'", str45, "26167");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        int int3 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate5 = localDate2.plusDays((int) '#');
        java.util.Date date6 = localDate5.toDate();
        org.joda.time.LocalDate localDate8 = localDate5.withWeekyear(26176117);
        int int9 = localDate5.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate5.getValue(7577795);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 7577795");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Mar 29 00:00:00 GMT+14:34 1");
        org.junit.Assert.assertNotNull(localDate8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 88 + "'", int9 == 88);
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DurationField durationField12 = chronology8.millis();
        org.joda.time.DurationField durationField13 = chronology8.centuries();
        long long14 = durationField13.getUnitMillis();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3155695200000L + "'", long14 == 3155695200000L);
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) interval1);
        long long5 = interval1.toDurationMillis();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        java.util.Date date5 = calendar1.getTime();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        long long9 = calendar8.getTimeInMillis();
        long long10 = calendar8.getTimeInMillis();
        int int12 = calendar8.getMinimum(0);
        calendar8.set((int) (short) 10, (int) (short) 10, (-292275054), 26153423, 32772, 26178);
        java.util.TimeZone timeZone20 = calendar8.getTimeZone();
        int int21 = calendar1.compareTo(calendar8);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514411889,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=11,MILLISECOND=833,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514411889L + "'", long2 == 1645514411889L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 21:55:11 GMT+14:34 2022");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=10,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=-292275054,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=26153423,MINUTE=32772,SECOND=26178,MILLISECOND=833,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514411889L + "'", long9 == 1645514411889L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514411889L + "'", long10 == 1645514411889L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+14:34");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus((org.joda.time.ReadableDuration) duration18);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration18);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks((int) (byte) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationFrom(readableInstant29);
        long long31 = duration30.getMillis();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plus((org.joda.time.ReadableDuration) duration30);
        mutableInterval23.setDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = mutableInterval23.toDuration();
        boolean boolean35 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = dateTime38.plusWeeks((int) (byte) 1);
        int int41 = property37.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = interval44.isAfter((long) 10);
        org.joda.time.Duration duration47 = interval44.toDuration();
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration52 = interval51.toDuration();
        boolean boolean53 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getChronology(chronology54);
        org.joda.time.DurationField durationField56 = chronology55.years();
        int int58 = durationField56.getValue((long) 32772);
        boolean boolean59 = duration18.equals((java.lang.Object) durationField56);
        long long62 = durationField56.add((long) 30, 827);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 35L + "'", long31 == 35L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 26097638400030L + "'", long62 == 26097638400030L);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) ' ');
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.text.DateFormatSymbols dateFormatSymbols7 = java.text.DateFormatSymbols.getInstance(locale5);
        java.lang.String str8 = dateTimeZone1.getShortName((long) 874, locale5);
        java.lang.String str9 = locale5.getDisplayName();
        java.text.DateFormatSymbols dateFormatSymbols10 = java.text.DateFormatSymbols.getInstance(locale5);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        int int18 = dateTime14.getYearOfCentury();
        int int19 = dateTime14.getDayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime14.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        int int24 = dateTimeField23.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks((int) (byte) 10);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationFrom(readableInstant30);
        long long32 = duration31.getMillis();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plus((org.joda.time.ReadableDuration) duration31);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str36 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localDateTime27, (int) (short) 1, locale35);
        int int37 = dateTimeField13.getMaximumTextLength(locale35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        int int42 = dateTime38.getYearOfCentury();
        int int43 = dateTime38.getDayOfMonth();
        org.joda.time.DateTime dateTime45 = dateTime38.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        int int48 = dateTimeField47.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusWeeks((int) (byte) 10);
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = period53.toDurationFrom(readableInstant54);
        long long56 = duration55.getMillis();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plus((org.joda.time.ReadableDuration) duration55);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime51, (int) (short) 1, locale59);
        java.lang.String str61 = locale35.getDisplayLanguage(locale59);
        java.text.DateFormatSymbols dateFormatSymbols62 = new java.text.DateFormatSymbols(locale35);
        java.lang.String[] strArray63 = dateFormatSymbols62.getAmPmStrings();
        java.lang.String[] strArray64 = dateFormatSymbols62.getWeekdays();
        dateFormatSymbols10.setWeekdays(strArray64);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+35:00" + "'", str3, "+35:00");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514411930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=11,MILLISECOND=874,ZONE_OFFSET=52499944,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateFormatSymbols7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str9, "\u65e5\u672c\u8a9e\u65e5\u672c)");
        org.junit.Assert.assertNotNull(dateFormatSymbols10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 534 + "'", int17 == 534);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 24 + "'", int19 == 24);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 35L + "'", long32 == 35L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 534 + "'", int41 == 534);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 24 + "'", int43 == 24);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1439 + "'", int48 == 1439);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 35L + "'", long56 == 35L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e2d\u6587" + "'", str61, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        int int22 = period20.getValue(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration26 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean28 = interval15.contains((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime();
        int int30 = localTime29.getMinuteOfHour();
        int int31 = localTime29.size();
        org.joda.time.LocalTime localTime33 = localTime29.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime localTime35 = localTime29.plusMinutes(0);
        org.joda.time.DateTime dateTime36 = localTime29.toDateTimeToday();
        boolean boolean37 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime36.plusDays(871);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 54 + "'", int30 == 54);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationFrom(readableInstant5);
        long long7 = duration6.getMillis();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plus((org.joda.time.ReadableDuration) duration6);
        int int9 = localDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int11 = localDateTime2.get(dateTimeFieldType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withEra(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 165 + "'", int11 == 165);
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.256Z/2022-02-22T07:16:00.256Z");
        timeZone1.setID("2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime6.getMinuteOfDay();
        int int10 = dateTime6.getYearOfCentury();
        int int11 = dateTime6.getDayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime6.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = dateTimeField15.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (byte) 10);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plus((org.joda.time.ReadableDuration) duration23);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime19, (int) (short) 1, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale27.getDisplayLanguage(locale29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone5, locale29);
        int int32 = timeZone5.getRawOffset();
        timeZone5.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        int int39 = dateTime35.getYearOfCentury();
        int int40 = dateTime35.getDayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime35.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        int int45 = dateTimeField44.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = period50.toDurationFrom(readableInstant51);
        long long53 = duration52.getMillis();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plus((org.joda.time.ReadableDuration) duration52);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime48, (int) (short) 1, locale56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone5, locale56);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone1, locale56);
        calendar59.set(123, 26178719, 26184703, 9, 253, 0);
        int int67 = calendar59.getFirstDayOfWeek();
        calendar59.set(52667296, 7576734, 52501800, 792, (-457098), 26297538);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 534 + "'", int9 == 534);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 24 + "'", int11 == 24);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1439 + "'", int16 == 1439);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str30, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514412069,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=12,MILLISECOND=69,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 534 + "'", int38 == 534);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 24 + "'", int40 == 24);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1439 + "'", int45 == 1439);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514412069,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=12,MILLISECOND=69,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52667296,MONTH=7576734,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=52501800,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=792,MINUTE=-457098,SECOND=26297538,MILLISECOND=69,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime.Property property16 = dateTime2.year();
        org.joda.time.Duration duration18 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime19.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime19.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime19.minus((long) 10);
        org.joda.time.Period period30 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = dateTime33.plusWeeks((int) (byte) 1);
        int int36 = property32.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = interval39.isAfter((long) 10);
        org.joda.time.Duration duration42 = interval39.toDuration();
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration45, 26160257);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        boolean boolean53 = interval51.isAfter((long) 10);
        org.joda.time.Duration duration54 = interval51.toDuration();
        boolean boolean55 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property58 = dateTime57.millisOfDay();
        org.joda.time.DateTime dateTime59 = dateTime57.withTimeAtStartOfDay();
        org.joda.time.Period period61 = new org.joda.time.Period((long) '#');
        int int63 = period61.getValue(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Duration duration67 = period61.toDurationTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology68 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime65);
        long long69 = dateTime65.getMillis();
        org.joda.time.Period period71 = new org.joda.time.Period((long) '#');
        int int73 = period71.getValue(0);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.hours();
        int int75 = period71.get(durationFieldType74);
        int int76 = period71.getDays();
        org.joda.time.Period period78 = period71.minusMonths(32769);
        org.joda.time.Period period82 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.days();
        org.joda.time.Period period84 = period82.normalizedStandard(periodType83);
        org.joda.time.PeriodType periodType85 = periodType83.withYearsRemoved();
        org.joda.time.Period period86 = new org.joda.time.Period(35L, (long) 453, periodType83);
        org.joda.time.Period period87 = period71.withFields((org.joda.time.ReadablePeriod) period86);
        org.joda.time.MutableInterval mutableInterval88 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadablePeriod) period71);
        boolean boolean89 = interval56.isAfter((org.joda.time.ReadableInterval) mutableInterval88);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 534 + "'", int22 == 534);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(chronology68);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645566858165L + "'", long69 == 1645566858165L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T07:16:43.254Z/2022-02-22T07:16:43.254Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:16:43.254Z/2022-02-22T07:16:43.254Z\" is malformed at \"/2022-02-22T07:16:43.254Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology1);
        int int3 = localTime2.getSecondOfMinute();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property4.roundCeilingCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localTime6.getFieldTypes();
        org.joda.time.LocalTime localTime9 = localTime6.plusSeconds(1970);
        org.joda.time.LocalTime localTime11 = localTime9.plusHours(457);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(32769, 52460890, 52458193, 999, 46, 348);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(5923851335820000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 5923851335820000000 * 1000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DurationField durationField24 = chronology23.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.hourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 10074, 1645514199442L, chronology23);
        org.joda.time.Period period27 = duration14.toPeriod(chronology23);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusWeeks((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = period33.toDurationFrom(readableInstant34);
        long long36 = duration35.getMillis();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plus((org.joda.time.ReadableDuration) duration35);
        mutableInterval28.setDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration39 = mutableInterval28.toDuration();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = period44.toDurationFrom(readableInstant45);
        long long47 = duration46.getMillis();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plus((org.joda.time.ReadableDuration) duration46);
        long long49 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration46);
        boolean boolean50 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration46);
        long long51 = duration46.getStandardDays();
        org.joda.time.Duration duration53 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime54.getMinuteOfDay();
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime60 = dateTime54.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime54.toDateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime54.minus((long) 10);
        org.joda.time.Period period65 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property67 = dateTime66.era();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime70 = dateTime68.plusWeeks((int) (byte) 1);
        int int71 = property67.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = interval74.isAfter((long) 10);
        org.joda.time.Duration duration77 = interval74.toDuration();
        org.joda.time.Duration duration80 = duration77.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration83 = duration53.withDurationAdded((org.joda.time.ReadableDuration) duration80, 26160257);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime();
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime84, (org.joda.time.ReadableInstant) dateTime85);
        boolean boolean88 = interval86.isAfter((long) 10);
        org.joda.time.Duration duration89 = interval86.toDuration();
        boolean boolean90 = duration83.isLongerThan((org.joda.time.ReadableDuration) duration89);
        int int91 = duration46.compareTo((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration93 = duration83.withMillis(22560257L);
        int int94 = duration14.compareTo((org.joda.time.ReadableDuration) duration93);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35L + "'", long36 == 35L);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35L + "'", long47 == 35L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 35L + "'", long49 == 35L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 534 + "'", int57 == 534);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        int int8 = dateTime0.getYear();
        org.joda.time.DateTime dateTime10 = dateTime0.plusYears(14);
        org.joda.time.DateTime.Property property11 = dateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(3);
        int int16 = localDateTime15.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime19 = property18.getLocalDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getChronology(chronology20);
        org.joda.time.DurationField durationField22 = chronology21.years();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.centuryOfEra();
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.String str27 = dateTimeField23.getAsText((int) (byte) 0, locale25);
        java.lang.String str28 = property18.getAsShortText(locale25);
        org.joda.time.DateTime dateTime29 = property11.setCopy("26214266", locale25);
        java.lang.String str30 = property11.getAsShortText();
        org.joda.time.DateTime dateTime31 = property11.getDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 55 + "'", int16 == 55);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "8" + "'", str28, "8");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2036" + "'", str30, "2036");
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 1099);
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = localTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology6 = localTime1.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(1645514196459L, chronology6);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds(26153525);
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "08:54:18.165" + "'", str5, "08:54:18.165");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = localDateTime0.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(26151451);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period6, 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime4.era();
        int int16 = localDateTime4.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDateTime4.getValue(26153473);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26153473");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26153473 + "'", int16 == 26153473);
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = property2.getAsText(locale3);
        java.lang.String str7 = locale3.getExtension('x');
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime4 = property2.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime4.withZoneRetainFields(dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury(62222);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62222 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) 32772, (int) (byte) 10);
        long long33 = duration32.getStandardSeconds();
        org.joda.time.Period period34 = duration32.toPeriod();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateMidnight dateMidnight36 = dateTime24.toDateMidnight();
        int int37 = dateTime24.getEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 327L + "'", long33 == 327L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime5 = property3.addToCopy(86399999);
        org.joda.time.DateTime dateTime6 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localTime7.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property14 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime18 = localTime16.minusSeconds(1640);
        org.joda.time.LocalTime.Property property19 = localTime18.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalTime.Property property21 = localTime18.property(dateTimeFieldType20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime6.withField(dateTimeFieldType20, 814);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 814 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.DateTime.Property property5 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime7 = property5.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone9.getName((long) ' ');
        java.lang.String str13 = dateTimeZone9.getName((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime7.withZoneRetainFields(dateTimeZone9);
        org.joda.time.Interval interval15 = localDate0.toInterval(dateTimeZone9);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, (long) ' ', periodType19, chronology24);
        int int28 = period27.getWeeks();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = dateTime31.plusWeeks((int) (byte) 1);
        int int34 = property30.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        org.joda.time.Duration duration40 = interval37.toDuration();
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = dateTime45.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property48 = dateTime47.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeUtils.getZone(dateTimeZone49);
        java.lang.String str52 = dateTimeZone50.getName((long) ' ');
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(dateTimeZone50);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.time();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime53, periodType54);
        boolean boolean56 = period27.equals((java.lang.Object) dateTime53);
        org.joda.time.Interval interval57 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Interval interval59 = interval15.withStartMillis(1645514153208L);
        org.joda.time.Interval interval60 = interval15.toInterval();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+35:00" + "'", str52, "+35:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYear(10);
        int int26 = localDateTime25.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusYears(914);
        int int29 = localDateTime28.getYearOfEra();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645566858165L + "'", long12 == 1645566858165L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str13, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 905 + "'", int29 == 905);
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        java.lang.Object obj0 = null;
        org.joda.time.Interval interval1 = new org.joda.time.Interval(obj0);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.Period period8 = interval6.toPeriod();
        org.joda.time.Interval interval9 = interval6.toInterval();
        boolean boolean10 = interval1.isAfter((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        java.lang.String str14 = interval13.toString();
        org.joda.time.DateTime dateTime15 = interval13.getEnd();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((int) (byte) 10);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plus((org.joda.time.ReadableDuration) duration22);
        boolean boolean25 = interval13.equals((java.lang.Object) duration22);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Interval interval31 = interval13.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.months();
        org.joda.time.Period period33 = interval13.toPeriod(periodType32);
        org.joda.time.DateTime dateTime34 = interval13.getStart();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Interval interval39 = interval37.toInterval();
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        boolean boolean41 = interval13.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime43.getMinuteOfDay();
        int int47 = dateTime43.getYearOfCentury();
        int int48 = dateTime43.getDayOfMonth();
        org.joda.time.DateTime dateTime50 = dateTime43.minusWeeks((int) (short) 0);
        int int51 = dateTime43.getYear();
        org.joda.time.DateTime dateTime53 = dateTime43.plusYears(14);
        boolean boolean54 = interval39.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Duration duration61 = period59.toDurationFrom(readableInstant60);
        long long62 = duration61.getMillis();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plus((org.joda.time.ReadableDuration) duration61);
        long long64 = duration61.getMillis();
        java.lang.String str65 = duration61.toString();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration61);
        boolean boolean67 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Chronology chronology70 = org.joda.time.DateTimeUtils.getChronology(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfHalfday();
        org.joda.time.DurationField durationField72 = durationFieldType68.getField(chronology70);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getChronology(chronology73);
        boolean boolean75 = durationFieldType68.isSupported(chronology74);
        mutableInterval66.setChronology(chronology74);
        org.joda.time.DurationField durationField77 = chronology74.halfdays();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str14, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 35L + "'", long23 == 35L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(interval31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 534 + "'", int46 == 534);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 24 + "'", int48 == 24);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 35L + "'", long62 == 35L);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 35L + "'", long64 == 35L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT0.035S" + "'", str65, "PT0.035S");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property7 = localDate4.yearOfEra();
        int int8 = localDate4.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = property10.getAsText(locale11);
        org.joda.time.DateTime dateTime14 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime15 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime15.getSecondOfMinute();
        int int17 = dateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "32058165" + "'", str13, "32058165");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.Chronology chronology17 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(chronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter18.withChronology(chronology25);
        java.lang.Appendable appendable32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime33.getMinuteOfDay();
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime39 = dateTime33.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = dateTime33.toDateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime33.plusWeeks(3);
        org.joda.time.DateTime.Property property44 = dateTime43.secondOfMinute();
        org.joda.time.DateTime dateTime46 = dateTime43.plusMinutes(30864);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfDay();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime49.getMinuteOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(10L, chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        int int57 = dateTime55.get(dateTimeFieldType56);
        int int58 = dateTime49.get(dateTimeFieldType56);
        boolean boolean59 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property60 = dateTime49.weekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeUtils.getZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) dateTime49, dateTimeZone62);
        boolean boolean64 = dateTimeZone62.isFixed();
        long long67 = dateTimeZone62.adjustOffset((long) 21, false);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime43.toMutableDateTime(dateTimeZone62);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter31.printTo(appendable32, (org.joda.time.ReadableInstant) mutableDateTime68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 534 + "'", int36 == 534);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 534 + "'", int52 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 21L + "'", long67 == 21L);
        org.junit.Assert.assertNotNull(mutableDateTime68);
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        java.util.Date date15 = localDateTime14.toDate();
        int int16 = date15.getDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 02 11:00:00 GMT+14:34 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        int int11 = dateTime2.getWeekOfWeekyear();
        int int12 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks(100);
        org.joda.time.Period period25 = new org.joda.time.Period(22, (int) (short) 10, (int) '#', (int) (short) 100, 32772, 3, 0, (int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime13.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        int int33 = period31.getValue(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime26.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.year();
        org.joda.time.DateTime dateTime41 = dateTime2.toDateTime(chronology38);
        org.joda.time.DateTime.Property property42 = dateTime2.secondOfMinute();
        int int43 = property42.getMinimumValue();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 24 + "'", int7 == 24);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 55 + "'", int12 == 55);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = localDateTime0.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(26151451);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period6, 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(26151451);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfDay(2022);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withSecondOfMinute(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withDate(52502315, 52677564, 348);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52677564 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusMillis(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property5.addToCopy(474);
        int int8 = localDateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfCentury(20);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours(382);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds(49);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2023 + "'", int8 == 2023);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        boolean boolean3 = interval1.isAfter((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.String str5 = mutableInterval2.toString();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(readableInterval4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.000+35:00" + "'", str5, "1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.000+35:00");
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        java.util.Date date6 = new java.util.Date(317, 0, 52454297, 26228534, 97, 155);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Feb 14 15:39:35 GMT+14:34 148824");
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.centuryOfEra();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime3 = property1.withMinimumValue();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = localDateTime3.getField(52499240);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52499240");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        int int40 = dateTime32.getYear();
        org.joda.time.DateTime dateTime42 = dateTime32.plusYears(14);
        boolean boolean43 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks((int) (byte) 10);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = period48.toDurationFrom(readableInstant49);
        long long51 = duration50.getMillis();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plus((org.joda.time.ReadableDuration) duration50);
        long long53 = duration50.getMillis();
        java.lang.String str54 = duration50.toString();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval55.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = mutableInterval56.overlaps(readableInterval57);
        mutableInterval56.setStartMillis((long) 738);
        long long61 = mutableInterval56.getStartMillis();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str3, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 534 + "'", int35 == 534);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 24 + "'", int37 == 24);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 35L + "'", long51 == 35L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.035S" + "'", str54, "PT0.035S");
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 738L + "'", long61 == 738L);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds(1640);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.addWrapFieldToCopy((int) (byte) 0);
        java.util.Date date7 = localDate6.toDate();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(3940);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate9.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 24 00:00:00 GMT+14:34 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.DateTime.Property property23 = dateTime16.monthOfYear();
        boolean boolean24 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Interval interval29 = interval27.toInterval();
        org.joda.time.Interval interval31 = interval29.withStartMillis((long) (short) 1);
        boolean boolean32 = mutableInterval13.equals((java.lang.Object) interval31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.hourOfDay();
        boolean boolean39 = interval31.equals((java.lang.Object) chronology36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str43 = interval42.toString();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        long long52 = duration51.getMillis();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus((org.joda.time.ReadableDuration) duration51);
        boolean boolean54 = interval42.equals((java.lang.Object) duration51);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = interval57.isAfter((long) 10);
        org.joda.time.Interval interval60 = interval42.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.months();
        org.joda.time.Period period62 = interval42.toPeriod(periodType61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType64 = periodType63.withMillisRemoved();
        org.joda.time.Period period65 = interval42.toPeriod(periodType64);
        int[] intArray66 = period65.getValues();
        org.joda.time.Interval interval67 = interval31.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Days days68 = period65.toStandardDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period70 = period65.plusSeconds(26207293);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str43, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(days68);
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (-1), chronology8);
        org.joda.time.Period period10 = period9.toPeriod();
        int int11 = period10.size();
        int int12 = period10.getMinutes();
        int[] intArray13 = period10.getValues();
        org.joda.time.Period period15 = period10.withMonths(26155103);
        org.joda.time.Period period17 = period15.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime20.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(70);
        int int31 = property19.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime.Property property35 = dateTime33.weekyear();
        org.joda.time.DateTime dateTime37 = property35.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeUtils.getZone(dateTimeZone38);
        java.lang.String str41 = dateTimeZone39.getName((long) ' ');
        java.lang.String str43 = dateTimeZone39.getName((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime47.getMinuteOfDay();
        int int51 = dateTime47.getYearOfCentury();
        int int52 = dateTime47.getDayOfMonth();
        org.joda.time.DateTime dateTime54 = dateTime47.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        int int57 = dateTimeField56.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusWeeks((int) (byte) 10);
        org.joda.time.Period period62 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Duration duration64 = period62.toDurationFrom(readableInstant63);
        long long65 = duration64.getMillis();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.plus((org.joda.time.ReadableDuration) duration64);
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str69 = dateTimeField56.getAsText((org.joda.time.ReadablePartial) localDateTime60, (int) (short) 1, locale68);
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.lang.String str71 = locale68.getDisplayLanguage(locale70);
        java.lang.String str72 = dateTimeZone39.getShortName((long) (short) 100, locale68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) 85613876040000L, dateTimeZone39);
        org.joda.time.DateTime dateTime74 = dateTime30.withZoneRetainFields(dateTimeZone39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime76 = dateTime30.withMinuteOfHour(52678312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52678312 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 55 + "'", int3 == 55);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 534 + "'", int23 == 534);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-737448) + "'", int31 == (-737448));
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+35:00" + "'", str41, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+35:00" + "'", str43, "+35:00");
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 534 + "'", int50 == 534);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 24 + "'", int52 == 24);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1439 + "'", int57 == 1439);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 35L + "'", long65 == 35L);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str71, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+35:00" + "'", str72, "+35:00");
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        java.lang.String str6 = interval2.toString();
        org.joda.time.DateTime dateTime7 = interval2.getStart();
        org.joda.time.Chronology chronology8 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        int int17 = period15.getValue(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration21 = period15.toDurationTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 7, chronology22);
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfCentury();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(chronology34);
        org.joda.time.Period period37 = duration29.toPeriod(chronology34);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (short) 10);
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePeriod) period39, (long) 26161182, (long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = dateTimeField9.addWrapPartial((org.joda.time.ReadablePartial) localDate24, 52461667, intArray42, (-775326));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52461667");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645566858165L + "'", long5 == 1645566858165L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str6, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, -7, -16, -1, -181]");
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str8 = dateTimeField4.getAsShortText(1645514151873L, locale7);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = dateTimeField4.getAsShortText(26153877, locale10);
        java.util.Locale.Builder builder12 = builder1.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setRegion("2022-02-22T07:16:56.358Z/2022-02-22T07:16:56.358Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-22T07:16:56.358Z/2022-02-22T07:16:56.358Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6" + "'", str8, "6");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26153877" + "'", str11, "26153877");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime7.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDate localDate14 = localDate6.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        int int16 = localTime15.getMinuteOfHour();
        int int17 = localTime15.size();
        org.joda.time.LocalTime localTime19 = localTime15.minusMinutes((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        java.lang.String str22 = dateTimeFieldType20.getName();
        org.joda.time.LocalTime.Property property23 = localTime19.property(dateTimeFieldType20);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = localDate14.get(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 534 + "'", int10 == 534);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfDay" + "'", str22, "minuteOfDay");
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        int int40 = dateTime32.getYear();
        org.joda.time.DateTime dateTime42 = dateTime32.plusYears(14);
        boolean boolean43 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks((int) (byte) 10);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = period48.toDurationFrom(readableInstant49);
        long long51 = duration50.getMillis();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plus((org.joda.time.ReadableDuration) duration50);
        long long53 = duration50.getMillis();
        java.lang.String str54 = duration50.toString();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.MutableInterval mutableInterval56 = mutableInterval55.toMutableInterval();
        java.lang.Object obj57 = mutableInterval55.clone();
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = mutableInterval55.overlaps(readableInterval58);
        boolean boolean61 = mutableInterval55.contains(3291028449534L);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00" + "'", str3, "2022-02-24T08:54:18.165+35:00/2022-02-24T08:54:18.165+35:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 534 + "'", int35 == 534);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 24 + "'", int37 == 24);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 35L + "'", long51 == 35L);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0.035S" + "'", str54, "PT0.035S");
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(obj57);
// flaky:         org.junit.Assert.assertEquals(obj57.toString(), "2036-02-24T08:54:18.165+35:00/2036-02-24T08:54:18.200+35:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "2036-02-24T08:54:18.165+35:00/2036-02-24T08:54:18.200+35:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "2036-02-24T08:54:18.165+35:00/2036-02-24T08:54:18.200+35:00");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.256Z/2022-02-22T07:16:00.256Z");
        timeZone1.setID("2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime6.getMinuteOfDay();
        int int10 = dateTime6.getYearOfCentury();
        int int11 = dateTime6.getDayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime6.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = dateTimeField15.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (byte) 10);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plus((org.joda.time.ReadableDuration) duration23);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime19, (int) (short) 1, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale27.getDisplayLanguage(locale29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone5, locale29);
        int int32 = timeZone5.getRawOffset();
        timeZone5.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        int int39 = dateTime35.getYearOfCentury();
        int int40 = dateTime35.getDayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime35.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        int int45 = dateTimeField44.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = period50.toDurationFrom(readableInstant51);
        long long53 = duration52.getMillis();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plus((org.joda.time.ReadableDuration) duration52);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime48, (int) (short) 1, locale56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone5, locale56);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone1, locale56);
        calendar59.set(123, 26178719, 26184703, 9, 253, 0);
        calendar59.setTimeInMillis((long) 659);
        calendar59.setTimeInMillis(1645514283632L);
        calendar59.set(6, 52488713, 163, 366, 34, 156);
        int int78 = calendar59.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int80 = calendar59.getActualMinimum(25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 534 + "'", int9 == 534);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 24 + "'", int11 == 24);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1439 + "'", int16 == 1439);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str30, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514413651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=13,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 534 + "'", int38 == 534);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 24 + "'", int40 == 24);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1439 + "'", int45 == 1439);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514413651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=13,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6,MONTH=52488713,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=163,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=366,MINUTE=34,SECOND=156,MILLISECOND=632,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(4936542895924L);
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        int int13 = dateTime9.getYearOfCentury();
        int int14 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime9.minusWeeks((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property18 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        long long23 = dateTimeZone20.convertLocalToUTC(1640994742913L, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((int) (byte) 0, 26229, 52499404, 26178719, 39, 15778080, 457, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26178719 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 975 + "'", int12 == 975);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 78 + "'", int13 == 78);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1640868742913L + "'", long23 == 1640868742913L);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period3 = new org.joda.time.Period(3291028448537L, 1645514248385L, periodType2);
        org.joda.time.Period period4 = period3.negated();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(11, 7);
        org.joda.time.LocalTime localTime4 = localTime2.plusHours(26153473);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        int int5 = localDateTime4.getEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds(26171);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeUtils.getZone(dateTimeZone13);
        java.lang.String str16 = dateTimeZone14.getName((long) ' ');
        java.lang.String str18 = dateTimeZone14.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, dateTimeZone14);
        org.joda.time.DateTime dateTime20 = dateTime11.withZone(dateTimeZone14);
        java.lang.String str22 = dateTimeZone14.getNameKey(1645514153208L);
        org.joda.time.DateTime dateTime23 = localDateTime4.toDateTime(dateTimeZone14);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter26.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 52467410);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTime23.toString(dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+35:00" + "'", str16, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+35:00" + "'", str18, "+35:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        int int7 = dateTime6.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str11 = interval10.toString();
        boolean boolean12 = interval10.isAfterNow();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Interval interval14 = interval10.gap(readableInterval13);
        boolean boolean15 = dateTime6.equals((java.lang.Object) interval14);
        org.joda.time.DateTime.Property property16 = dateTime6.minuteOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        int int18 = localTime17.getMinuteOfHour();
        int int19 = localTime17.size();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("26181425");
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        boolean boolean24 = localTime17.equals((java.lang.Object) locale21);
        java.lang.String str25 = property16.getAsText(locale21);
        org.joda.time.DateTime dateTime26 = property16.roundHalfFloorCopy();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 975 + "'", int3 == 975);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 752 + "'", int7 == 752);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2178-07-31T16:15:09.717+35:00/2178-07-31T16:15:09.717+35:00" + "'", str11, "2178-07-31T16:15:09.717+35:00/2178-07-31T16:15:09.717+35:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 15 + "'", int18 == 15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "975" + "'", str25, "975");
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2074-04-15T14:35:01.314Z/2074-04-15T14:35:01.314Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2074-04-15T14:35:01.314Z/2074-04...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property7 = localDate4.yearOfEra();
        int int8 = localDate4.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = property10.getAsText(locale11);
        org.joda.time.DateTime dateTime14 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime15 = localDate4.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withWeekOfWeekyear(52667875);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52667875 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "58509788" + "'", str13, "58509788");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setUnicodeLocaleKeyword("1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.000+35:00", "2022-02-25T02:06:21.236+52:12/2022-02-25T02:06:21.236+52:12");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 1970-01-02T11:00:00.000+35:00/1970-01-02T11:00:00.000+35:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime4 = dateTime1.minusMonths(26165);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.Period period9 = period6.normalizedStandard();
        org.joda.time.Period period11 = period6.plusSeconds((int) ' ');
        org.joda.time.DateTime dateTime12 = dateTime4.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime14 = dateTime4.withYearOfCentury(34);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(2);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        java.lang.String str10 = interval9.toString();
        org.joda.time.DateTime dateTime11 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval14.toInterval();
        long long17 = interval14.getEndMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean19 = interval14.equals((java.lang.Object) dateTimeFieldType18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        int int24 = localTime21.getMillisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        boolean boolean30 = localTime21.equals((java.lang.Object) dateTimeFieldType28);
        boolean boolean31 = interval14.equals((java.lang.Object) boolean30);
        boolean boolean32 = interval9.overlaps((org.joda.time.ReadableInterval) interval14);
        boolean boolean33 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) interval9);
        mutableInterval5.setDurationAfterStart(1645514172518L);
        org.joda.time.MutableInterval mutableInterval36 = mutableInterval5.toMutableInterval();
        java.lang.Object obj37 = mutableInterval36.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2178-07-31T16:15:09.956+35:00/2178-07-31T16:15:09.956+35:00" + "'", str10, "2178-07-31T16:15:09.956+35:00/2178-07-31T16:15:09.956+35:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6582057309956L + "'", long17 == 6582057309956L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 58509956 + "'", int24 == 58509956);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "2178-07-31T16:15:09.956+35:00/2230-09-22T23:31:22.474+35:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "2178-07-31T16:15:09.956+35:00/2230-09-22T23:31:22.474+35:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "2178-07-31T16:15:09.956+35:00/2230-09-22T23:31:22.474+35:00");
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter2.getParser();
        java.lang.Integer int26 = dateTimeFormatter2.getPivotYear();
        java.lang.StringBuffer stringBuffer27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime28.getMinuteOfDay();
        int int32 = dateTime28.getYearOfCentury();
        int int33 = dateTime28.getDayOfMonth();
        org.joda.time.DateTime dateTime35 = dateTime28.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay37 = dateTime36.toYearMonthDay();
        org.joda.time.DateTime dateTime39 = dateTime36.withCenturyOfEra(26229);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer27, (org.joda.time.ReadableInstant) dateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNull(dateTimeParser25);
        org.junit.Assert.assertNull(int26);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 975 + "'", int31 == 975);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 78 + "'", int32 == 78);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate3 = property2.roundHalfEvenCopy();
        java.util.Locale locale5 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = property2.setCopy("2022-02-22T07:17:00.576Z/2022-02-22T07:17:00.576Z", locale5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:17:00.576Z/2022-02-22T07:17:00.576Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Jul 31 00:00:00 GMT+14:34 2178");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getISO3Language();
        java.util.Calendar.Builder builder13 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder17 = builder0.setDate(20, 26160257, 16);
        java.util.Calendar calendar18 = builder17.build();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        org.joda.time.DateTime dateTime23 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        int int27 = period25.getValue(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration31 = period25.toDurationTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        long long37 = chronology32.add(1645514177812L, (long) 100, (int) 'x');
        org.joda.time.Interval interval38 = new org.joda.time.Interval(1645514178053L, 1645514178289L, chronology32);
        org.joda.time.DurationField durationField39 = chronology32.halfdays();
        boolean boolean40 = calendar18.equals((java.lang.Object) durationField39);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=68734708824300056,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2180086,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=79,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=52499944,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514189812L + "'", long37 == 1645514189812L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        int int5 = localDate4.getYear();
        org.joda.time.LocalDate.Property property6 = localDate4.dayOfMonth();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = property6.setCopy("10074-04-15", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"10074-04-15\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2178 + "'", int5 == 2178);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DateTime dateTime12 = dateTime6.toDateTime(chronology10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 1, (long) ' ', periodType5, chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra(2);
        long long19 = chronology10.set((org.joda.time.ReadablePartial) localDateTime15, (long) (short) 10);
        org.joda.time.DurationField durationField20 = chronology10.seconds();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((long) 1439, 1645514163115L, chronology10);
        java.lang.Object obj22 = mutableInterval21.clone();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfEra(3);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.weekOfWeekyear();
        int int27 = property26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = property26.roundHalfFloorCopy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (-1), chronology30);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(chronology39);
        org.joda.time.Period period42 = duration34.toPeriod(chronology39);
        org.joda.time.Period period43 = period31.plus((org.joda.time.ReadablePeriod) period42);
        int int44 = period43.size();
        org.joda.time.Period period46 = period43.minusWeeks(873);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period46, 1640);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval21.setPeriodAfterStart((org.joda.time.ReadablePeriod) period46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 6582057310184L + "'", long19 == 6582057310184L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1970-01-02T11:00:01.439+35:00/2022-02-23T18:16:03.115+35:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-02T11:00:01.439+35:00/2022-02-23T18:16:03.115+35:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-02T11:00:01.439+35:00/2022-02-23T18:16:03.115+35:00");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 53 + "'", int27 == 53);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDateTime48);
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        org.joda.time.Period period3 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withYearsRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period(1645514161529L, 1646118978043L, periodType4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period9 = period7.plusMillis(917);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property5.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 212 + "'", int3 == 212);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime0.monthOfYear();
        boolean boolean5 = dateTime0.isBefore(1645514244376L);
        org.joda.time.DateMidnight dateMidnight6 = dateTime0.toDateMidnight();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = period16.getFieldTypes();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.forFields(durationFieldTypeArray18);
        java.lang.String str20 = periodType19.toString();
        org.joda.time.PeriodType periodType21 = periodType19.withMonthsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6582057310373L + "'", long12 == 6582057310373L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2178-07-31T16:15:10.373+35:00/2178-07-31T16:15:10.373+35:00" + "'", str13, "2178-07-31T16:15:10.373+35:00/2178-07-31T16:15:10.373+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Standard]" + "'", str20, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.LocalTime localTime12 = localTime10.withFields(readablePartial11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology14);
        int int16 = localTime15.getSecondOfMinute();
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime10, (org.joda.time.ReadablePartial) localTime15);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.Period period19 = period17.plus(readablePeriod18);
        org.joda.time.Period period21 = period19.withMinutes(26151451);
        org.joda.time.LocalTime localTime22 = localTime0.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = localDateTime23.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusYears(26151451);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        int int31 = period29.getValue(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration35 = period29.toDurationTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period29, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = localTime0.compareTo((org.joda.time.ReadablePartial) localDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        java.lang.String str11 = dateTime0.toString();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.Period period20 = new org.joda.time.Period(1645514161529L, periodType14, chronology19);
        org.joda.time.DurationField durationField21 = chronology19.years();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime0.toMutableDateTime(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.hours();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime24, (org.joda.time.ReadablePartial) localTime25, periodType26);
        org.joda.time.Period period28 = period27.negated();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (-1), chronology30);
        org.joda.time.Period period32 = period31.toPeriod();
        org.joda.time.Period period33 = period28.withFields((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        org.joda.time.Period period37 = period35.normalizedStandard(periodType36);
        boolean boolean39 = periodType36.equals((java.lang.Object) 6);
        org.joda.time.Period period40 = period33.normalizedStandard(periodType36);
        long long43 = chronology19.add((org.joda.time.ReadablePeriod) period33, 1645514205307L, 1692);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = chronology19.getDateTimeMillis(38222, 40, 52675814, 574, 5885, 363, 5885);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 574 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 975 + "'", int5 == 975);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 78 + "'", int6 == 78);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2178-07-31T16:15:10.400+35:00" + "'", str11, "2178-07-31T16:15:10.400+35:00");
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514203615L + "'", long43 == 1645514203615L);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        java.util.Date date5 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int6 = date5.getYear();
        long long7 = date5.getTime();
        int int8 = date5.getMonth();
        java.lang.String str9 = date5.toString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Dec 30 08:14:00 GMT+14:34 4682");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2782 + "'", int6 == 2782);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 85613823540056L + "'", long7 == 85613823540056L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Sat Dec 30 08:14:00 GMT+14:34 4682" + "'", str9, "Sat Dec 30 08:14:00 GMT+14:34 4682");
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime8 = dateTime2.toDateTime(chronology6);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(10L, chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        int int18 = period16.getValue(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period16);
        mutableInterval23.setEndMillis(1645514176018L);
        boolean boolean26 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.MutableInterval mutableInterval27 = mutableInterval23.toMutableInterval();
        boolean boolean28 = mutableInterval23.isAfterNow();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("hourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: hourOfHalfday");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) ' ', dateTimeZone2);
        int int4 = dateTime3.getYearOfCentury();
        org.joda.time.DateTime.Property property5 = dateTime3.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.joda.time.Interval interval7 = property5.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str11 = interval10.toString();
        org.joda.time.DateTime dateTime12 = interval10.getEnd();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        boolean boolean22 = interval10.equals((java.lang.Object) duration19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Interval interval28 = interval10.overlap((org.joda.time.ReadableInterval) interval25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.months();
        org.joda.time.Period period30 = interval10.toPeriod(periodType29);
        org.joda.time.DateTime dateTime31 = interval10.getStart();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Interval interval36 = interval34.toInterval();
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        boolean boolean38 = interval10.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableInterval mutableInterval40 = interval36.toMutableInterval();
        boolean boolean41 = interval7.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean42 = interval7.isBeforeNow();
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval7);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(1645514177812L, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekOfWeekyear();
        boolean boolean47 = dateTimeField45.isLeap(3600000L);
        boolean boolean49 = dateTimeField45.isLeap((long) (-1));
        org.joda.time.DurationField durationField50 = dateTimeField45.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 70 + "'", int4 == 70);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2178-07-31T16:15:10.499+35:00/2178-07-31T16:15:10.499+35:00" + "'", str11, "2178-07-31T16:15:10.499+35:00/2178-07-31T16:15:10.499+35:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(interval28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(durationField50);
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str8 = dateTimeField4.getAsShortText(1645514151873L, locale7);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.lang.String str11 = dateTimeField4.getAsShortText(26153877, locale10);
        java.util.Locale.Builder builder12 = builder1.setLocale(locale10);
        java.util.Locale locale13 = builder1.build();
        java.util.Locale.Builder builder15 = builder1.addUnicodeLocaleAttribute("26220768");
        java.util.Locale.Builder builder16 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setLanguage("2074-04-15T14:33:55.661Z/2074-04-15T14:33:55.661Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2074-04-15T14:33:55.661Z/2074-04-15T14:33:55.661Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6" + "'", str8, "6");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "26153877" + "'", str11, "26153877");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(100);
        int int3 = localDate0.getEra();
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        int int6 = localDate5.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(1645514178053L);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        int int10 = dateTime8.get(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate5.withField(dateTimeFieldType9, 26171181);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26171181 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime7 = dateTime5.minusMillis(11);
        int int8 = dateTime7.getWeekOfWeekyear();
        boolean boolean9 = dateTime7.isEqualNow();
        boolean boolean11 = dateTime7.isBefore(1645514205444L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "58510553" + "'", str4, "58510553");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        java.lang.Character[] charArray11 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet12 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet12, charArray11);
        boolean boolean15 = charSet12.add((java.lang.Character) ' ');
        boolean boolean17 = charSet12.add((java.lang.Character) '#');
        boolean boolean18 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet12);
        java.lang.Character[] charArray22 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet23 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet23, charArray22);
        boolean boolean26 = charSet23.add((java.lang.Character) ' ');
        charSet23.clear();
        boolean boolean28 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet23);
        java.lang.Character[] charArray32 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet33 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet33, charArray32);
        boolean boolean36 = charSet33.add((java.lang.Character) ' ');
        java.lang.Object[] objArray37 = charSet33.toArray();
        java.util.Spliterator<java.lang.Character> charSpliterator38 = charSet33.spliterator();
        boolean boolean39 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet33);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[#,  , 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[#,  , 4]");
        org.junit.Assert.assertNotNull(charSpliterator38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime2.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime2.plusYears((-604800000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -604797822 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(2000, 1018444, 10022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(3291028453502L);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = localDateTime0.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(26151451);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period6, 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(26151451);
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.Chronology chronology18 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withMillisOfSecond(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMinuteOfHour(52499404);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52499404 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26153527 + "'", int17 == 26153527);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime4.getMinuteOfDay();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime10 = dateTime4.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime10.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withZone(dateTimeZone13);
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, (long) ' ', periodType19, chronology24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra(2);
        long long33 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) (short) 10);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        org.joda.time.DateTime dateTime43 = dateTime37.toDateTime(chronology41);
        org.joda.time.Period period44 = duration36.toPeriod(chronology41);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.year();
        int int48 = localDateTime46.getDayOfYear();
        int int49 = localDateTime46.size();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer15, (org.joda.time.ReadablePartial) localDateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 534 + "'", int7 == 534);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4936542868538L + "'", long33 == 4936542868538L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 160 + "'", int48 == 160);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) dateTime2, dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime23 = localDate16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate25 = localDate16.plusYears((int) '4');
        org.joda.time.LocalDate localDate27 = localDate25.plusWeeks(16);
        org.joda.time.LocalDate.Property property28 = localDate25.era();
        org.joda.time.LocalDate.Property property29 = localDate25.dayOfMonth();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2126 + "'", int11 == 2126);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.Period period3 = period1.minusHours(571);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 52454297, dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(2404, 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2404 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        int int2 = property1.getMaximumValueOverall();
        long long3 = property1.remainder();
        org.joda.time.DateTime dateTime4 = property1.roundHalfEvenCopy();
        int int5 = dateTime4.getWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399999 + "'", int2 == 86399999);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2126 + "'", int5 == 2126);
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Interval interval5 = interval3.toInterval();
        long long6 = interval3.getEndMillis();
        java.lang.String str7 = interval3.toString();
        org.joda.time.DateTime dateTime8 = interval3.getStart();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        java.lang.String str14 = dateTimeZone10.getName((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645514182943L, dateTimeZone10);
        long long18 = dateTimeZone10.convertUTCToLocal((-292260000L));
        int int20 = dateTimeZone10.getOffset(1645514201717L);
        long long24 = dateTimeZone10.convertLocalToUTC((long) 30864, false, (long) 26184703);
        long long26 = dateTimeZone10.nextTransition(1739830583545L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4936542868769L + "'", long6 == 4936542868769L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2126-06-09T08:54:28.769+35:00/2126-06-09T08:54:28.769+35:00" + "'", str7, "2126-06-09T08:54:28.769+35:00/2126-06-09T08:54:28.769+35:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+35:00" + "'", str14, "+35:00");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-166260000L) + "'", long18 == (-166260000L));
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 126000000 + "'", int20 == 126000000);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-125969136L) + "'", long24 == (-125969136L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1739830583545L + "'", long26 == 1739830583545L);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        int int11 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.Period period13 = org.joda.time.Period.hours(12);
        org.joda.time.LocalTime localTime14 = localTime10.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear(1);
        org.joda.time.LocalDate.Property property18 = localDate15.year();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.LocalDate localDate20 = property18.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate21 = property18.roundHalfFloorCopy();
        int int22 = localDate21.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getRangeDurationType();
        java.lang.String str25 = dateTimeFieldType23.toString();
        boolean boolean26 = localDate21.isSupported(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = localTime10.withField(dateTimeFieldType23, 187920000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 187920000 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1439 + "'", int11 == 1439);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26 + "'", int22 == 26);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hourOfHalfday" + "'", str25, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer26 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter25.printTo(writer26, 1645514385979L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        java.text.DateFormatSymbols dateFormatSymbols0 = new java.text.DateFormatSymbols();
        java.lang.String[][] strArray1 = dateFormatSymbols0.getZoneStrings();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getMinuteOfDay();
        int int9 = dateTime5.getYearOfCentury();
        int int10 = dateTime5.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime5.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        int int15 = dateTimeField14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((int) (byte) 10);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plus((org.joda.time.ReadableDuration) duration22);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str27 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime18, (int) (short) 1, locale26);
        int int28 = dateTimeField4.getMaximumTextLength(locale26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        int int33 = dateTime29.getYearOfCentury();
        int int34 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime29.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        int int39 = dateTimeField38.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = period44.toDurationFrom(readableInstant45);
        long long47 = duration46.getMillis();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.plus((org.joda.time.ReadableDuration) duration46);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str51 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime42, (int) (short) 1, locale50);
        java.lang.String str52 = locale26.getDisplayLanguage(locale50);
        java.text.DateFormatSymbols dateFormatSymbols53 = new java.text.DateFormatSymbols(locale26);
        java.lang.String str54 = dateFormatSymbols53.getLocalPatternChars();
        java.lang.String[][] strArray55 = dateFormatSymbols53.getZoneStrings();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.hourOfHalfday();
        org.joda.time.DurationField durationField60 = durationFieldType56.getField(chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getChronology(chronology61);
        boolean boolean63 = durationFieldType56.isSupported(chronology62);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int68 = localDateTime64.get(dateTimeFieldType67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withYear((int) '4');
        boolean boolean71 = dateFormatSymbols53.equals((java.lang.Object) localDateTime70);
        java.lang.String[] strArray72 = dateFormatSymbols53.getMonths();
        dateFormatSymbols0.setMonths(strArray72);
        java.lang.String str74 = dateFormatSymbols0.getLocalPatternChars();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 534 + "'", int8 == 534);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1439 + "'", int15 == 1439);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 35L + "'", long23 == 35L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 534 + "'", int32 == 534);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 26 + "'", int33 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1439 + "'", int39 == 1439);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35L + "'", long47 == 35L);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587" + "'", str52, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str54, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 866 + "'", int68 == 866);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str74, "GyMdkHmsSEDFwWahKzZ");
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.roundCeilingCopy();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        int int13 = property7.getMaximumTextLength(locale12);
        java.lang.String str14 = locale12.getCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        org.joda.time.DateTime.Property property5 = dateTime0.year();
        org.joda.time.DateTime dateTime7 = dateTime0.minusMonths(26200719);
        org.joda.time.DateTime dateTime9 = dateTime0.plusMinutes(15778080);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        java.lang.String str14 = dateTimeZone12.getName((long) ' ');
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        java.text.DateFormatSymbols dateFormatSymbols18 = java.text.DateFormatSymbols.getInstance(locale16);
        java.lang.String str19 = dateTimeZone12.getShortName((long) 874, locale16);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(1645514160000L, dateTimeZone12);
        int int22 = dateTimeZone12.getOffset(3291028454473L);
        org.joda.time.DateTime dateTime23 = dateTime9.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime26 = dateTime24.withWeekyear(52490073);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+35:00" + "'", str14, "+35:00");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514415483,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=15,MILLISECOND=483,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateFormatSymbols18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:00" + "'", str19, "+35:00");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 126000000 + "'", int22 == 126000000);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        // The following exception was thrown during execution in test generation
        try {
            int int2 = calendar0.getActualMaximum(2023);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2023");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514415514,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=15,MILLISECOND=514,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, dateTimeZone7);
        long long15 = dateTimeZone7.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withPivotYear(26220156);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.parse("2074-04-15T14:37:56.849Z/2074-04-15T14:37:56.849Z", dateTimeFormatter21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+35:00" + "'", str9, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514153208L + "'", long15 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYear(10);
        int int26 = localDateTime21.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4936542869114L + "'", long12 == 4936542869114L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2126-06-09T08:54:29.114+35:00/2126-06-09T08:54:29.114+35:00" + "'", str13, "2126-06-09T08:54:29.114+35:00/2126-06-09T08:54:29.114+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 29 + "'", int26 == 29);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        long long3 = dateTimeZone1.convertUTCToLocal((long) 1970);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(1375201439L, dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = localDateTime4.toString("-501771-12-22T18:41:14.174");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1970L + "'", long3 == 1970L);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime9 = localTime0.plusSeconds(977);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(1);
        int int13 = localDate12.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localTime9.compareTo((org.joda.time.ReadablePartial) localDate12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        int int12 = dateTimeField11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime15, (int) (short) 1, locale23);
        int int25 = property1.getMaximumTextLength(locale23);
        java.util.Locale locale29 = new java.util.Locale("2022-02-22T07:16:52.575Z/2022-02-22T07:16:52.575Z", "zho", "2022-02-22T07:16:17.812Z/2022-02-22T07:16:17.812Z");
        java.lang.String str30 = locale23.getDisplayVariant(locale29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26 + "'", int6 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1439 + "'", int12 == 1439);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals(locale29.toString(), "2022-02-22t07:16:52.575z/2022-02-22t07:16:52.575z_ZHO_2022-02-22T07:16:17.812Z/2022-02-22T07:16:17.812Z");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514415733,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=15,MILLISECOND=733,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22t07:16:52.575z/2022-02-22t07:16:52.575z (ZHO,2022-02-22T07:16:17.812Z/2022-02-22T07:16:17.812Z)" + "'", str32, "2022-02-22t07:16:52.575z/2022-02-22t07:16:52.575z (ZHO,2022-02-22T07:16:17.812Z/2022-02-22T07:16:17.812Z)");
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property11 = dateTime0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26 + "'", int6 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds(1640);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.LocalTime.Property property14 = localTime11.property(dateTimeFieldType13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property14.setCopy(38100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38100 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval5.toMutableInterval();
        boolean boolean8 = mutableInterval5.isBefore(1645514177812L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.minus(100L);
        int int14 = dateTime13.getYear();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
        java.util.Date date16 = dateTime13.toDate();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(chronology25);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 1, (long) ' ', periodType20, chronology25);
        org.joda.time.DurationField durationField29 = chronology25.millis();
        org.joda.time.DateTime dateTime30 = dateTime13.toDateTime(chronology25);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(dateTimeZone31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withFieldAdded(durationFieldType33, 1970);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Interval interval42 = interval40.toInterval();
        long long43 = interval40.getEndMillis();
        java.lang.String str44 = interval40.toString();
        org.joda.time.DateTime dateTime45 = interval40.getStart();
        org.joda.time.Chronology chronology46 = interval40.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period(0L, 1645514152681L, chronology46);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime35.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusDays(100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusHours((int) 'a');
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType56 = periodType55.withSecondsRemoved();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Chronology chronology61 = org.joda.time.DateTimeUtils.getChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        org.joda.time.DateTime dateTime63 = dateTime57.toDateTime(chronology61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) 1, (long) ' ', periodType56, chronology61);
        org.joda.time.Period period65 = period64.negated();
        org.joda.time.Period period67 = new org.joda.time.Period((long) '#');
        int int69 = period67.getValue(0);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.hours();
        int int71 = period67.get(durationFieldType70);
        boolean boolean72 = period65.isSupported(durationFieldType70);
        boolean boolean73 = localDateTime50.isSupported(durationFieldType70);
        int int74 = localDateTime50.getDayOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter75 = null;
        org.joda.time.format.DateTimeParser dateTimeParser76 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter75, dateTimeParser76);
        org.joda.time.Chronology chronology78 = dateTimeFormatter77.getChronolgy();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime();
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime79, (org.joda.time.ReadableInstant) dateTime80);
        int int82 = dateTime79.getMinuteOfDay();
        org.joda.time.Period period84 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime85 = dateTime79.plus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.DateTime dateTime87 = dateTime85.withDayOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime85.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter77.withZone(dateTimeZone88);
        org.joda.time.DateTime dateTime90 = localDateTime50.toDateTime(dateTimeZone88);
        int int92 = dateTimeZone88.getOffset(1645514161708L);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime((java.lang.Object) dateTime30, dateTimeZone88);
        org.joda.time.DateTime dateTime95 = dateTime93.withYear(639);
        boolean boolean96 = mutableInterval5.isAfter((org.joda.time.ReadableInstant) dateTime93);
        long long97 = mutableInterval5.getEndMillis();
        long long98 = mutableInterval5.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Dec 31 23:59:59 GMT 1969");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 4936542869593L + "'", long43 == 4936542869593L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2126-06-09T08:54:29.593+35:00/2126-06-09T08:54:29.593+35:00" + "'", str44, "2126-06-09T08:54:29.593+35:00/2126-06-09T08:54:29.593+35:00");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 210 + "'", int74 == 210);
        org.junit.Assert.assertNull(chronology78);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 534 + "'", int82 == 534);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTime90);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 126000000 + "'", int92 == 126000000);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 4936542869593L + "'", long97 == 4936542869593L);
// flaky:         org.junit.Assert.assertTrue("'" + long98 + "' != '" + 4936542869593L + "'", long98 == 4936542869593L);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        java.util.Date date5 = localDate4.toDate();
        org.joda.time.DateMidnight dateMidnight6 = localDate4.toDateMidnight();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (-1), chronology8);
        org.joda.time.Period period10 = period9.toPeriod();
        int int11 = period10.size();
        int int12 = period10.getMinutes();
        int[] intArray13 = period10.getValues();
        org.joda.time.Period period15 = period10.withMonths(26155103);
        org.joda.time.Period period17 = period15.minusDays((-292275054));
        int int18 = period15.getHours();
        org.joda.time.Period period20 = period15.withMinutes(914);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DurationField durationField25 = durationFieldType21.getField(chronology23);
        boolean boolean26 = period15.isSupported(durationFieldType21);
        org.joda.time.Period period28 = period15.plusHours(0);
        org.joda.time.LocalDate localDate29 = localDate4.minus((org.joda.time.ReadablePeriod) period28);
        int int30 = localDate4.getYearOfEra();
        org.joda.time.Chronology chronology31 = localDate4.getChronology();
        int int32 = localDate4.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Jun 09 00:00:00 GMT 2126");
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2126 + "'", int30 == 2126);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2126 + "'", int32 == 2126);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getWeekOfWeekyear();
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime0);
        int int7 = dateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(10L, chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        int int19 = dateTime17.get(dateTimeFieldType18);
        int int20 = dateTime11.get(dateTimeFieldType18);
        boolean boolean21 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime.Property property22 = dateTime11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeUtils.getZone(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, dateTimeZone24);
        boolean boolean26 = dateTimeZone24.isFixed();
        long long28 = dateTimeZone24.convertUTCToLocal(660000L);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone24);
        int int30 = dateTime29.getSecondOfMinute();
        boolean boolean31 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period33 = org.joda.time.Period.seconds(26183771);
        org.joda.time.Period period35 = period33.plusDays(10022);
        org.joda.time.DateTime dateTime36 = dateTime8.minus((org.joda.time.ReadablePeriod) period33);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 534 + "'", int14 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2126 + "'", int20 == 2126);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 126660000L + "'", long28 == 126660000L);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 29 + "'", int30 == 29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.Period period6 = interval4.toPeriod();
        org.joda.time.Interval interval7 = interval4.toInterval();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) 32772, (int) (byte) 10);
        long long16 = duration15.getStandardHours();
        org.joda.time.Interval interval17 = interval4.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval17);
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 1, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField26.getMaximumValue(readablePartial40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusYears(26151451);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        int int50 = period48.getValue(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        int int61 = period60.size();
        int int62 = period60.getMinutes();
        int[] intArray63 = period60.getValues();
        int int64 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray63);
        int[] intArray66 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDateTime15, 6, intArray63, 0);
        java.util.Calendar.Builder builder67 = builder0.setFields(intArray66);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("\u706b\u66dc\u65e5");
        java.util.Calendar.Builder builder70 = builder0.setTimeZone(timeZone69);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId73 = timeZone72.toZoneId();
        int int74 = timeZone72.getRawOffset();
        java.util.Calendar.Builder builder75 = builder0.setTimeZone(timeZone72);
        java.lang.Object obj76 = timeZone72.clone();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 534 + "'", int20 == 534);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26 + "'", int21 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(zoneId73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime22.getMinuteOfDay();
        int int26 = dateTime22.getYearOfCentury();
        int int27 = dateTime22.getDayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime22.minusWeeks((int) (short) 0);
        boolean boolean30 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime22);
        int int31 = dateTime22.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        int int36 = dateTime32.getYearOfCentury();
        int int37 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime32.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        int int42 = dateTimeField41.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = period47.toDurationFrom(readableInstant48);
        long long50 = duration49.getMillis();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plus((org.joda.time.ReadableDuration) duration49);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDateTime45, (int) (short) 1, locale53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime45.withYear(26151451);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withField(dateTimeFieldType57, (int) '#');
        boolean boolean60 = dateTime22.isSupported(dateTimeFieldType57);
        org.joda.time.DateTime.Property property61 = dateTime22.minuteOfHour();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateTime22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType64 = period19.getFieldType(86399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 534 + "'", int25 == 534);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 26 + "'", int26 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 534 + "'", int35 == 534);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 26 + "'", int36 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1439 + "'", int42 == 1439);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 35L + "'", long50 == 35L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(1439);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(10L, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minus(100L);
        int int15 = dateTime14.getYear();
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        java.util.Date date17 = dateTime14.toDate();
        date17.setDate(9);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromDateFields(date17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 160 + "'", int3 == 160);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Dec 09 23:59:59 GMT 1969");
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus((org.joda.time.ReadableDuration) duration18);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration18);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusWeeks((int) (byte) 10);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = period28.toDurationFrom(readableInstant29);
        long long31 = duration30.getMillis();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plus((org.joda.time.ReadableDuration) duration30);
        mutableInterval23.setDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration34 = mutableInterval23.toDuration();
        boolean boolean35 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration36 = duration34.toDuration();
        long long37 = duration36.getMillis();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks(100);
        org.joda.time.Period period50 = new org.joda.time.Period(22, (int) (short) 10, (int) '#', (int) (short) 100, 32772, 3, 0, (int) ' ');
        org.joda.time.DateTime dateTime51 = dateTime38.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.millisOfDay();
        org.joda.time.DateTime dateTime54 = dateTime52.withTimeAtStartOfDay();
        org.joda.time.Period period56 = new org.joda.time.Period((long) '#');
        int int58 = period56.getValue(0);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration62 = period56.toDurationTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime64 = dateTime51.toDateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.year();
        org.joda.time.Period period66 = duration36.toPeriod(chronology63);
        org.joda.time.Days days67 = duration36.toStandardDays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 35L + "'", long31 == 35L);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(days67);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String[] strArray52 = dateFormatSymbols51.getAmPmStrings();
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        dateFormatSymbols51.setEras(strArray53);
        java.lang.String[] strArray55 = dateFormatSymbols51.getWeekdays();
        java.lang.String[] strArray56 = dateFormatSymbols51.getWeekdays();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 534 + "'", int6 == 534);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26 + "'", int7 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 534 + "'", int30 == 534);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 26 + "'", int31 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 1, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField26.getMaximumValue(readablePartial40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusYears(26151451);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        int int50 = period48.getValue(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        int int61 = period60.size();
        int int62 = period60.getMinutes();
        int[] intArray63 = period60.getValues();
        int int64 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray63);
        int[] intArray66 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDateTime15, 6, intArray63, 0);
        java.util.Calendar.Builder builder67 = builder0.setFields(intArray66);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId70 = timeZone69.toZoneId();
        java.util.Calendar.Builder builder71 = builder67.setTimeZone(timeZone69);
        java.util.Calendar.Builder builder75 = builder67.setTimeOfDay((int) '#', 206, 52460890);
        java.util.Date date81 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int82 = date81.getYear();
        date81.setMinutes((int) '4');
        date81.setHours(436);
        java.time.Instant instant87 = date81.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder88 = builder67.setInstant(date81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 534 + "'", int20 == 534);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 26 + "'", int21 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(zoneId70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder75);
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Wed Jan 17 04:52:00 GMT 4683");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2782 + "'", int82 == 2782);
        org.junit.Assert.assertNotNull(instant87);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        int int3 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate5 = localDate2.plusDays((int) '#');
        org.joda.time.LocalDate localDate7 = localDate2.minusWeeks(914);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.Period period6 = duration1.toPeriod(chronology3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        int int9 = localTime7.getMillisOfDay();
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.Chronology chronology11 = localTime7.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        boolean boolean18 = localTime12.isSupported(dateTimeFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = localTime7.withField(dateTimeFieldType16, 52458193);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32070043 + "'", int9 == 32070043);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2022);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minusSeconds((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMinuteOfHour(52);
        int int15 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = property16.setCopy(752);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 752 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2126 + "'", int15 == 2126);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks(1439);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withWeekyear(0);
        int int11 = localDateTime6.getEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusWeeks(26181277);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        int int23 = dateTime19.getYearOfCentury();
        int int24 = dateTime19.getDayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime19.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        int int29 = dateTimeField28.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusWeeks((int) (byte) 10);
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = period34.toDurationFrom(readableInstant35);
        long long37 = duration36.getMillis();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.plus((org.joda.time.ReadableDuration) duration36);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime32, (int) (short) 1, locale40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale40.getDisplayLanguage(locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone18, locale42);
        int int45 = timeZone18.getRawOffset();
        timeZone18.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone18, locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = localDateTime15.toString("2074-04-15T14:35:05.045Z/2074-04-15T14:35:05.045Z", locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 160 + "'", int3 == 160);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 534 + "'", int22 == 534);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 26 + "'", int23 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1439 + "'", int29 == 1439);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "chinois" + "'", str43, "chinois");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514416592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=16,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645514416592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=16,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfSecond();
        java.lang.Object obj4 = null;
        boolean boolean5 = dateTime2.equals(obj4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) 10);
        org.joda.time.Period period19 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Seconds seconds20 = duration7.toStandardSeconds();
        org.joda.time.Duration duration22 = duration7.minus((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 534 + "'", int11 == 534);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration22);
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusHours(26155103);
        org.joda.time.Period period7 = period5.minusMinutes(90);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime.Property property10 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime12 = property10.setCopy(453);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        int int19 = period17.getValue(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime21);
        long long25 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime28 = dateTime21.withDurationAdded(3240000L, (-292275054));
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime21.toMutableDateTimeISO();
        org.joda.time.Duration duration30 = period5.toDurationTo((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(duration30);
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.withWeekyear(1);
        int int7 = localDate6.getCenturyOfEra();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays((int) '#');
        int int10 = localDate0.compareTo((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate.Property property11 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate13 = localDate0.plusWeeks(26198934);
        boolean boolean15 = localDate0.equals((java.lang.Object) 52442703);
        int int16 = localDate0.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        calendar1.set((int) (short) 10, (int) (short) 10, (-292275054), 26153423, 32772, 26178);
        calendar1.setMinimalDaysInFirstWeek(0);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        boolean boolean17 = localDate15.equals((java.lang.Object) "CA");
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-25220235943901331,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=0,YEAR=797213,MONTH=10,WEEK_OF_YEAR=49,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=335,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=28,SECOND=18,MILLISECOND=669,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514416669L + "'", long2 == 1645514416669L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514416669L + "'", long3 == 1645514416669L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645514229605L);
        org.joda.time.Instant instant4 = instant1.withDurationAdded(1645514204637L, 57);
        org.joda.time.Instant instant6 = instant4.withMillis(1645566861209L);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(100L);
        int int5 = dateTime4.getYear();
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(746);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.lang.String str4 = dateTimeZone2.getName((long) ' ');
        java.lang.String str6 = dateTimeZone2.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        int int8 = localDateTime7.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+35:00" + "'", str4, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:00" + "'", str6, "+35:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTime dateTime13 = dateTime7.toDateTime(chronology11);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfYear();
        org.joda.time.DurationField durationField16 = durationFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.minuteOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime6 = localTime1.plusHours((-1));
        java.lang.String str7 = localTime1.toString();
        org.joda.time.LocalTime localTime9 = localTime1.withMillisOfSecond(0);
        org.joda.time.Period period11 = org.joda.time.Period.months(26175498);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = localTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 26218500);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 686282294313000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32070308 + "'", int4 == 32070308);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "08:54:30.308" + "'", str7, "08:54:30.308");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        java.lang.String str6 = interval2.toString();
        org.joda.time.DateTime dateTime7 = interval2.getStart();
        org.joda.time.DateTime dateTime9 = dateTime7.withYear((int) (byte) 1);
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfWeek();
        int int11 = property10.getMaximumValue();
        org.joda.time.DateTime dateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(chronology21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) 1, (long) ' ', periodType16, chronology21);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Period period27 = period24.withDays(26207293);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        org.joda.time.DateTime dateTime30 = dateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 817);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfEra(3);
        int int34 = localDateTime33.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.property(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime37 = property36.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks(1439);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withWeekyear(0);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        long long52 = duration51.getMillis();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus((org.joda.time.ReadableDuration) duration51);
        int int54 = localDateTime47.getHourOfDay();
        int int55 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime37, (org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.Period period58 = period56.minusYears(2074);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) period58);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4936542870319L + "'", long5 == 4936542870319L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2126-06-09T08:54:30.319+35:00/2126-06-09T08:54:30.319+35:00" + "'", str6, "2126-06-09T08:54:30.319+35:00/2126-06-09T08:54:30.319+35:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 160 + "'", int34 == 160);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(156);
        org.joda.time.Chronology chronology15 = chronology8.withZone(dateTimeZone14);
        org.joda.time.DurationField durationField16 = chronology8.years();
        long long18 = durationField16.getMillis(100L);
        long long21 = durationField16.getMillis(500, 3291028492086L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3155695200000L + "'", long18 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 15778454400000L + "'", long21 == 15778454400000L);
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime4 = property2.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime4.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(22);
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withSecondOfMinute(32058165);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32058165 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(26228346);
        org.joda.time.LocalDate.Property property9 = localDate6.year();
        org.joda.time.LocalDate localDate10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate9 = localDate7.plusDays((int) (byte) 10);
        org.joda.time.Interval interval10 = localDate9.toInterval();
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property12 = localDate9.yearOfEra();
        int int13 = localDate9.getDayOfMonth();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.lang.String str18 = property15.getAsText(locale16);
        org.joda.time.DateTime dateTime19 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime20 = localDate9.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.Interval interval24 = localDate9.toInterval(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(47, 100, (-52), 46, (int) (short) 100, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "32070497" + "'", str18, "32070497");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMonths((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(1645514204063L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4936542870510L + "'", long12 == 4936542870510L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2126-06-09T08:54:30.510+35:00/2126-06-09T08:54:30.510+35:00" + "'", str13, "2126-06-09T08:54:30.510+35:00/2126-06-09T08:54:30.510+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(chronology1);
        org.joda.time.DateTimeField dateTimeField4 = chronology1.millisOfSecond();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localTime7.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property14 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundHalfCeilingCopy();
        boolean boolean17 = calendar6.after((java.lang.Object) property14);
        org.joda.time.LocalTime localTime18 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = property14.addCopy(1645514365852L);
        int[] intArray22 = null;
        int[] intArray24 = dateTimeField4.addWrapPartial((org.joda.time.ReadablePartial) localTime20, 999, intArray22, 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localTime20.getFields();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514417038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=17,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNull(intArray24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        java.lang.String str6 = localDateTime5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withDayOfMonth(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2126-06-09T08:54:30.576" + "'", str6, "2126-06-09T08:54:30.576");
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getDayOfYear();
        int int2 = localDateTime0.getMillisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 160 + "'", int1 == 160);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32070593 + "'", int2 == 32070593);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        boolean boolean4 = interval2.isAfterNow();
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Seconds seconds6 = duration5.toStandardSeconds();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = interval9.isAfter((long) 10);
        org.joda.time.Duration duration12 = interval9.toDuration();
        org.joda.time.Duration duration15 = duration12.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (byte) 10);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plus((org.joda.time.ReadableDuration) duration23);
        mutableInterval16.setDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = mutableInterval16.toDuration();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        long long37 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        boolean boolean38 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration34);
        long long39 = duration34.getStandardDays();
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime48 = dateTime42.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime42.toDateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime42.minus((long) 10);
        org.joda.time.Period period53 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.era();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.plusWeeks((int) (byte) 1);
        int int59 = property55.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval62.isAfter((long) 10);
        org.joda.time.Duration duration65 = interval62.toDuration();
        org.joda.time.Duration duration68 = duration65.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration68, 26160257);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = interval74.isAfter((long) 10);
        org.joda.time.Duration duration77 = interval74.toDuration();
        boolean boolean78 = duration71.isLongerThan((org.joda.time.ReadableDuration) duration77);
        int int79 = duration34.compareTo((org.joda.time.ReadableDuration) duration71);
        int int80 = duration12.compareTo((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration82 = duration34.withMillis(1009843200000L);
        long long83 = duration34.getStandardSeconds();
        org.joda.time.Duration duration84 = duration5.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration85 = duration34.toDuration();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2126-06-09T08:54:30.601+35:00/2126-06-09T08:54:30.601+35:00" + "'", str3, "2126-06-09T08:54:30.601+35:00/2126-06-09T08:54:30.601+35:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 534 + "'", int45 == 534);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration85);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusWeeks((int) (byte) 10);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = period4.toDurationFrom(readableInstant5);
        long long7 = duration6.getMillis();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plusSeconds(1640);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths(26171);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (byte) 10);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period19.toDurationFrom(readableInstant20);
        long long22 = duration21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plus((org.joda.time.ReadableDuration) duration21);
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration25 = mutableInterval14.toDuration();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks((int) (byte) 10);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = period30.toDurationFrom(readableInstant31);
        long long33 = duration32.getMillis();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plus((org.joda.time.ReadableDuration) duration32);
        long long35 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration32);
        boolean boolean36 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration32);
        long long37 = duration32.getStandardDays();
        org.joda.time.Duration duration39 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime40.getMinuteOfDay();
        org.joda.time.Period period45 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime46 = dateTime40.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime40.toDateTime(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime40.minus((long) 10);
        org.joda.time.Period period51 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = dateTime54.plusWeeks((int) (byte) 1);
        int int57 = property53.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = interval60.isAfter((long) 10);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.Duration duration66 = duration63.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration69 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration66, 26160257);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = interval72.isAfter((long) 10);
        org.joda.time.Duration duration75 = interval72.toDuration();
        boolean boolean76 = duration69.isLongerThan((org.joda.time.ReadableDuration) duration75);
        int int77 = duration32.compareTo((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Period period81 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.days();
        org.joda.time.Period period83 = period81.normalizedStandard(periodType82);
        org.joda.time.PeriodType periodType84 = periodType82.withYearsRemoved();
        org.joda.time.Period period85 = new org.joda.time.Period(1645514161529L, 1646118978043L, periodType82);
        org.joda.time.Period period86 = duration32.toPeriod(periodType82);
        org.joda.time.Period period87 = duration32.toPeriod();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime12.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime12.minusYears(2404);
        org.joda.time.LocalDateTime.Property property91 = localDateTime90.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35L + "'", long7 == 35L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35L + "'", long33 == 35L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 534 + "'", int43 == 534);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        int int24 = dateTimeField9.getMaximumValue(readablePartial23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDateTime25.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusYears(26151451);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        int int33 = period31.getValue(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime29.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (-1), chronology41);
        org.joda.time.Period period43 = period42.toPeriod();
        int int44 = period43.size();
        int int45 = period43.getMinutes();
        int[] intArray46 = period43.getValues();
        int int47 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39, intArray46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.minusSeconds(382);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime39.plusMinutes(814);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime39.minusMillis((int) 'x');
        int int56 = localDateTime55.getYear();
        int int57 = localDateTime55.getWeekyear();
        int int58 = localDateTime55.getYearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 26153577 + "'", int56 == 26153577);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 26153577 + "'", int57 == 26153577);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 26153577 + "'", int58 == 26153577);
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2022);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.minusSeconds((int) (byte) 0);
        boolean boolean13 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDateTime12.isSupported(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        date1.setMinutes(1969);
        java.time.Instant instant4 = date1.toInstant();
        java.util.Date date5 = java.util.Date.from(instant4);
        date5.setHours(874);
        date5.setMonth(453);
        int int10 = date5.getDay();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Mon Jun 10 08:49:00 GMT 2126");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Nov 15 10:49:00 GMT 2163");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = dateTimeField2.getAsShortText(26153877, locale8);
        long long11 = dateTimeField2.roundHalfEven((long) 382);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        int int15 = dateTime12.getMinuteOfDay();
        int int16 = dateTime12.getYearOfCentury();
        int int17 = dateTime12.getDayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime12.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        int int22 = dateTimeField21.getMaximumValue();
        java.lang.String str24 = dateTimeField21.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        int int29 = dateTime25.getYearOfCentury();
        int int30 = dateTime25.getDayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime25.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now();
        int int36 = dateTimeField34.getMaximumValue((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str44 = dateTimeField40.getAsShortText(1645514151873L, locale43);
        java.lang.String str45 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localTime35, 0, locale43);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        int int49 = period47.getValue(0);
        org.joda.time.Period period51 = period47.plusWeeks(1969);
        org.joda.time.LocalTime localTime53 = localTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period47, (int) (byte) 100);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime55, (org.joda.time.ReadablePartial) localTime56, periodType57);
        org.joda.time.Period period60 = period58.minusHours(26155103);
        org.joda.time.Period period61 = period60.toPeriod();
        int[] intArray62 = period60.getValues();
        int[] intArray64 = dateTimeField2.set((org.joda.time.ReadablePartial) localTime53, (int) (byte) 1, intArray62, 0);
        org.joda.time.LocalTime localTime66 = localTime53.withHourOfDay(11);
        org.joda.time.LocalTime.Property property67 = localTime53.millisOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6" + "'", str6, "6");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26153877" + "'", str9, "26153877");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 534 + "'", int15 == 534);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 26 + "'", int16 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1439 + "'", int22 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "660" + "'", str24, "660");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 534 + "'", int28 == 534);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26 + "'", int29 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1439 + "'", int36 == 1439);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "6" + "'", str44, "6");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, -26155103, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        calendar1.set((int) (short) 10, (int) (short) 10, (-292275054), 26153423, 32772, 26178);
        calendar1.setMinimalDaysInFirstWeek(0);
        java.util.Date date20 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int21 = date20.getYear();
        calendar1.setTime(date20);
        int int23 = calendar1.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(26201588, 38226);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=85613876040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=4682,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=14,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514417399L + "'", long2 == 1645514417399L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514417399L + "'", long3 == 1645514417399L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Sat Dec 30 08:14:00 GMT 4682");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2782 + "'", int21 == 2782);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(100);
        org.joda.time.LocalDate localDate4 = localDate0.plusWeeks((int) (short) -1);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1645514303491L, 1645514280000L);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        java.util.Date date9 = dateTime7.toDate();
        date9.setYear((int) '#');
        int int12 = date9.getTimezoneOffset();
        java.lang.Object obj13 = date9.clone();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Jun 07 21:54:30 GMT 1935");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "Fri Jun 07 21:54:30 GMT 1935");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "Fri Jun 07 21:54:30 GMT 1935");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "Fri Jun 07 21:54:30 GMT 1935");
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period26 = period23.withDays(999);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = period26.withPeriodType(periodType27);
        org.joda.time.Period period30 = org.joda.time.Period.years(10);
        org.joda.time.Period period31 = period28.minus((org.joda.time.ReadablePeriod) period30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType33 = period31.getFieldType(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        long long20 = duration17.getMillis();
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks((int) (byte) 10);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        long long29 = duration28.getMillis();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration32 = duration28.minus((long) 38222);
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        int int36 = period34.getValue(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration40 = period34.toDurationTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        org.joda.time.Seconds seconds45 = duration44.toStandardSeconds();
        boolean boolean46 = duration40.isEqual((org.joda.time.ReadableDuration) duration44);
        boolean boolean47 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        org.joda.time.Seconds seconds52 = duration51.toStandardSeconds();
        org.joda.time.Duration duration55 = duration51.withDurationAdded((long) 32772, (int) (byte) 10);
        java.lang.String str56 = duration51.toString();
        org.joda.time.Period period57 = duration51.toPeriod();
        boolean boolean58 = duration40.isEqual((org.joda.time.ReadableDuration) duration51);
        int int59 = duration17.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime60.getMinuteOfDay();
        org.joda.time.Period period65 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime66 = dateTime60.plus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = dateTime60.toDateTime(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime60.minus((long) 10);
        org.joda.time.DateTime dateTime72 = dateTime60.minusHours(7);
        org.joda.time.DateTime.Property property73 = dateTime60.dayOfWeek();
        org.joda.time.DateTime dateTime75 = property73.addWrapFieldToCopy(0);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime75);
        long long77 = duration51.getStandardMinutes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.035S" + "'", str56, "PT0.035S");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 534 + "'", int63 == 534);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime9.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period17 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9, periodType16);
        org.joda.time.DateTime dateTime19 = dateTime9.plusSeconds(2036);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant23 = dateTime22.toInstant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField29 = durationFieldType25.getField(chronology27);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((java.lang.Object) instant23, chronology27);
        org.joda.time.Instant instant33 = instant23.withDurationAdded(1645514154223L, 100);
        int int34 = dateTime19.compareTo((org.joda.time.ReadableInstant) instant23);
        org.joda.time.MutableDateTime mutableDateTime35 = instant23.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 534 + "'", int12 == 534);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval5.toMutableInterval();
        boolean boolean8 = mutableInterval5.isBefore(1645514177812L);
        long long9 = mutableInterval5.getEndMillis();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime16 = dateTime10.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str18 = dateTimeFieldType17.toString();
        int int19 = dateTime16.get(dateTimeFieldType17);
        boolean boolean20 = mutableInterval5.equals((java.lang.Object) dateTimeFieldType17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(1645514224541L);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour(32);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval5.setEnd((org.joda.time.ReadableInstant) dateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4936542871127L + "'", long9 == 4936542871127L);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 534 + "'", int13 == 534);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "millisOfSecond" + "'", str18, "millisOfSecond");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 162 + "'", int19 == 162);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, 1645514269075L);
        org.joda.time.Period period3 = interval2.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) period3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = localDateTime0.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(26151451);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getMinuteOfDay();
        int int9 = dateTime5.getYearOfCentury();
        int int10 = dateTime5.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime5.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        int int15 = dateTimeField14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((int) (byte) 10);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plus((org.joda.time.ReadableDuration) duration22);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str27 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime18, (int) (short) 1, locale26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime18.withYear(26151451);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withField(dateTimeFieldType30, (int) '#');
        boolean boolean33 = localDateTime0.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime0.withCenturyOfEra(875);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withDayOfYear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 534 + "'", int8 == 534);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1439 + "'", int15 == 1439);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 35L + "'", long23 == 35L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays((int) (byte) 10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, readableInstant16);
        org.joda.time.DateTime dateTime18 = dateTime8.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime20 = dateTime18.withWeekyear(89);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.Chronology chronology6 = interval5.getChronology();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(2);
        long long17 = chronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) (short) 10);
        java.lang.String str18 = chronology8.toString();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DurationField durationField20 = chronology8.halfdays();
        boolean boolean21 = durationField20.isPrecise();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4936542871269L + "'", long17 == 4936542871269L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+35:00]" + "'", str18, "ISOChronology[+35:00]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime16.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime16, chronology23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        int int36 = dateTime27.get(dateTimeFieldType34);
        boolean boolean37 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime27);
        int int38 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime16.toMutableDateTime(dateTimeZone39);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = period46.toDurationFrom(readableInstant47);
        long long49 = duration48.getMillis();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plus((org.joda.time.ReadableDuration) duration48);
        long long51 = duration48.getMillis();
        java.lang.String str52 = duration48.toString();
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Duration duration56 = period54.toDurationFrom(readableInstant55);
        org.joda.time.Seconds seconds57 = duration56.toStandardSeconds();
        long long58 = duration56.getStandardSeconds();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Duration duration60 = duration56.minus(readableDuration59);
        boolean boolean61 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration63 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration56, 155);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds64 = duration41.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 66269926800");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+35:00" + "'", str9, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 534 + "'", int19 == 534);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 534 + "'", int30 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2126 + "'", int36 == 2126);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 35L + "'", long49 == 35L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 35L + "'", long51 == 35L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.035S" + "'", str52, "PT0.035S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate0.plusWeeks(26217781);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtStartOfDay();
        int int6 = localDate4.size();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        int int12 = dateTime10.get(dateTimeFieldType11);
        boolean boolean13 = localTime7.isSupported(dateTimeFieldType11);
        org.joda.time.LocalTime.Property property14 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property14.roundCeilingCopy();
        java.lang.String str17 = property14.toString();
        org.joda.time.LocalTime localTime18 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime20 = localTime18.plusSeconds(304);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        boolean boolean23 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (-1), chronology25);
        org.joda.time.Period period27 = period26.toPeriod();
        int int28 = period27.size();
        int int29 = period27.getMinutes();
        int[] intArray30 = period27.getValues();
        org.joda.time.Period period32 = period27.withMonths(26155103);
        org.joda.time.MutablePeriod mutablePeriod33 = period27.toMutablePeriod();
        org.joda.time.LocalTime localTime34 = localTime20.minus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.millisOfDay();
        org.joda.time.DateTime dateTime39 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        int int43 = period41.getValue(0);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfCentury();
        long long53 = chronology48.add(1645514177812L, (long) 100, (int) 'x');
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        int int57 = period55.getValue(0);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.hours();
        int int59 = period55.get(durationFieldType58);
        int int60 = period55.getDays();
        org.joda.time.Minutes minutes61 = period55.toStandardMinutes();
        int[] intArray63 = chronology48.get((org.joda.time.ReadablePeriod) minutes61, 54L);
        org.joda.time.DateTimeField dateTimeField64 = chronology48.hourOfHalfday();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology66);
        int int68 = localTime67.getSecondOfMinute();
        org.joda.time.LocalTime localTime70 = localTime67.minusMinutes(2022);
        org.joda.time.LocalTime localTime72 = localTime70.minusSeconds(9);
        org.joda.time.LocalTime localTime74 = localTime70.plusSeconds(1970);
        boolean boolean75 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.LocalTime.Property property76 = localTime70.minuteOfHour();
        long long78 = chronology48.set((org.joda.time.ReadablePartial) localTime70, (long) 26183771);
        org.joda.time.DateTimeField dateTimeField79 = dateTimeFieldType35.getField(chronology48);
        int int80 = localTime20.indexOf(dateTimeFieldType35);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = localDate4.get(dateTimeFieldType35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[minuteOfHour]" + "'", str17, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514189812L + "'", long53 == 1645514189812L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 11880035L + "'", long78 == 11880035L);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = localDate1.toDateMidnight(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0L);
        int int6 = localDateTime5.size();
        java.lang.String str7 = localDateTime5.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = localDate1.isEqual((org.joda.time.ReadablePartial) localDateTime5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-02T11:00:00.000" + "'", str7, "1970-01-02T11:00:00.000");
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundCeilingCopy();
        int int5 = dateTime4.getSecondOfDay();
        int int6 = dateTime4.getSecondOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        int int13 = dateTime9.getYearOfCentury();
        int int14 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime9.minusWeeks((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime9);
        int int18 = dateTime9.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property19 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime9.withEra(0);
        org.joda.time.DateTime dateTime23 = dateTime9.withDayOfYear((int) '#');
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime26 = dateTime9.plusDays(209);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardMinutes(1645514182234L);
        org.joda.time.DateTime dateTime29 = dateTime9.plus((org.joda.time.ReadableDuration) duration28);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32071 + "'", int5 == 32071);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32071 + "'", int6 == 32071);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 534 + "'", int12 == 534);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26 + "'", int13 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        calendar1.set((int) (short) 10, (int) (short) 10, (-292275054), 26153423, 32772, 26178);
        java.util.TimeZone timeZone13 = calendar1.getTimeZone();
        calendar1.set((-292275054), 2074, 0, 10022, 100);
        int int20 = calendar1.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.add(944, 253);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-292275054,MONTH=2074,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=10022,MINUTE=100,SECOND=26178,MILLISECOND=930,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514417930L + "'", long2 == 1645514417930L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514417930L + "'", long3 == 1645514417930L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears(382);
        long long11 = chronology4.set((org.joda.time.ReadablePartial) localDateTime5, 1645427761529L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4936542871440L + "'", long11 == 4936542871440L);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        java.util.Date date5 = new java.util.Date(0, 54, 6, 0, (int) 'x');
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.roundCeilingCopy();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Jul 06 02:00:00 GMT 1904");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(2787);
        org.joda.time.LocalDate localDate6 = property3.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        org.joda.time.Period period3 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.Period period5 = period3.normalizedStandard(periodType4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.hours();
        int int7 = periodType4.indexOf(durationFieldType6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusWeeks((int) (byte) 1);
        int int13 = property9.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 0, (long) 15, periodType4, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        int int28 = dateTimeField26.get(1645514171443L);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1096 + "'", int28 == 1096);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime4.getMinuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        int int12 = dateTime10.get(dateTimeFieldType11);
        int int13 = dateTime4.get(dateTimeFieldType11);
        boolean boolean14 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime.Property property15 = dateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeUtils.getZone(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) dateTime4, dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        long long22 = dateTimeZone17.adjustOffset((long) 21, false);
        int int24 = dateTimeZone17.getOffsetFromLocal(3291028443775L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(1645514363225L, 94690580400105L, dateTimeZone17);
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 534 + "'", int7 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2126 + "'", int13 == 2126);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 21L + "'", long22 == 21L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 126000000 + "'", int24 == 126000000);
        org.junit.Assert.assertNotNull(mutableInterval26);
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime3 = dateTime0.minusSeconds(13);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfWeek();
        int int5 = property4.getLeapAmount();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DurationField durationField7 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dim." + "'", str6, "dim.");
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2022-02-22T07:18:25.182Z/2022-02-22T07:18:25.182Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        int int12 = period10.getValue(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(703, 77884, 15334917, (-7), 32772, 382, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        int int2 = date1.getYear();
        java.lang.String str3 = date1.toGMTString();
        int int4 = date1.getHours();
        int int5 = date1.getSeconds();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Sun Jun 09 00:00:00 GMT 2126");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 226 + "'", int2 == 226);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "9 Jun 2126 00:00:00 GMT" + "'", str3, "9 Jun 2126 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        java.util.Date date6 = new java.util.Date(52458193, 817, 2, (int) (byte) 10, 12, 26217);
        java.lang.String str7 = date6.toString();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 02 17:28:57 GMT 52460161");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Mon Feb 02 17:28:57 GMT 52460161" + "'", str7, "Mon Feb 02 17:28:57 GMT 52460161");
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        int int15 = period14.size();
        int int16 = period14.getMinutes();
        int[] intArray17 = period14.getValues();
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        org.joda.time.LocalTime localTime20 = localTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-1), chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period30 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        boolean boolean32 = period25.isSupported(durationFieldType31);
        org.joda.time.Period period34 = period25.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime35 = localTime8.plus((org.joda.time.ReadablePeriod) period25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((java.lang.Object) localTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.256Z/2022-02-22T07:16:00.256Z");
        timeZone1.setID("2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z");
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime6.getMinuteOfDay();
        int int10 = dateTime6.getYearOfCentury();
        int int11 = dateTime6.getDayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime6.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        int int16 = dateTimeField15.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (byte) 10);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plus((org.joda.time.ReadableDuration) duration23);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime19, (int) (short) 1, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale27.getDisplayLanguage(locale29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone5, locale29);
        int int32 = timeZone5.getRawOffset();
        timeZone5.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        int int39 = dateTime35.getYearOfCentury();
        int int40 = dateTime35.getDayOfMonth();
        org.joda.time.DateTime dateTime42 = dateTime35.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property43 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        int int45 = dateTimeField44.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = period50.toDurationFrom(readableInstant51);
        long long53 = duration52.getMillis();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plus((org.joda.time.ReadableDuration) duration52);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str57 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime48, (int) (short) 1, locale56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone5, locale56);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone1, locale56);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId62 = timeZone61.toZoneId();
        calendar59.setTimeZone(timeZone61);
        calendar59.set(52088244, 86399999, 4044, 795, 52463, 52460890);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale73.getDisplayCountry(locale74);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap76 = calendar59.getDisplayNames(212, 2, locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 534 + "'", int9 == 534);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26 + "'", int10 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1439 + "'", int16 == 1439);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 35L + "'", long24 == 35L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "chinois" + "'", str30, "chinois");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514418265,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=18,MILLISECOND=265,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 534 + "'", int38 == 534);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26 + "'", int39 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1439 + "'", int45 == 1439);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514418265,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=18,MILLISECOND=265,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52088244,MONTH=86399999,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=4044,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=795,MINUTE=52463,SECOND=52460890,MILLISECOND=265,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("54");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2022-02-23T18:19:28.491+35:00/2022-02-23T18:19:28.491+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getDisplayScript();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        int int26 = dateTimeField24.getLeapAmount((long) 26151451);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int29 = dateTimeField24.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale20.getDisplayCountry(locale28);
        java.lang.String str31 = locale20.getISO3Language();
        java.lang.String str32 = locale20.getDisplayName();
        java.util.Calendar calendar33 = dateTime17.toCalendar(locale20);
        calendar33.add((int) (short) 10, 13);
        java.util.Date date43 = new java.util.Date(12, 100, (-292275054), (-1), 436, (int) '#');
        int int44 = date43.getDay();
        int int45 = date43.getSeconds();
        int int46 = date43.getMonth();
        calendar33.setTime(date43);
        boolean boolean48 = calendar33.isWeekDateSupported();
        java.time.Instant instant49 = calendar33.toInstant();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str32, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-25254131075005000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=798287,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=16,SECOND=35,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Wed Nov 04 06:16:35 GMT 798287");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(instant49);
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableInterval0.contains(readableInstant12);
        org.joda.time.DateTime dateTime14 = mutableInterval0.getEnd();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        int int21 = period19.getValue(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration25 = period19.toDurationTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime29 = dateTime23.withDurationAdded((long) 453, 436);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYearOfEra(3);
        int int33 = localDateTime32.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.property(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime36 = property35.getLocalDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (-1), chronology38);
        org.joda.time.Period period40 = period39.toPeriod();
        int int41 = period40.size();
        int int42 = period40.getMinutes();
        int[] intArray43 = period40.getValues();
        org.joda.time.Period period45 = period40.withMonths(26155103);
        org.joda.time.Period period47 = period45.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime48 = localDateTime36.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalDateTime.Property property49 = localDateTime36.dayOfWeek();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property51 = dateTime50.year();
        org.joda.time.DateTime dateTime52 = property51.roundHalfFloorCopy();
        int int53 = dateTime52.getEra();
        int int54 = property49.getDifference((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.millisOfDay();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.lang.String str60 = property57.getAsText(locale58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        int int64 = dateTime61.getMinuteOfDay();
        int int65 = dateTime61.getYearOfCentury();
        int int66 = dateTime61.getDayOfMonth();
        org.joda.time.DateTime dateTime68 = dateTime61.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime69 = dateTime68.toDateTimeISO();
        int int70 = property57.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = dateTime69.withTimeAtStartOfDay();
        mutableInterval0.setInterval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 160 + "'", int33 == 160);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-775249) + "'", int54 == (-775249));
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "32071870" + "'", str60, "32071870");
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 534 + "'", int64 == 534);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 26 + "'", int65 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        int int20 = dateTime16.getYearOfCentury();
        int int21 = dateTime16.getDayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime16.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        int int26 = dateTimeField25.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((int) (byte) 10);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = period31.toDurationFrom(readableInstant32);
        long long34 = duration33.getMillis();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plus((org.joda.time.ReadableDuration) duration33);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime29, (int) (short) 1, locale37);
        org.joda.time.ReadablePartial readablePartial39 = null;
        int int40 = dateTimeField25.getMaximumValue(readablePartial39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDateTime41.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusYears(26151451);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        int int49 = period47.getValue(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime45.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 0);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (-1), chronology57);
        org.joda.time.Period period59 = period58.toPeriod();
        int int60 = period59.size();
        int int61 = period59.getMinutes();
        int[] intArray62 = period59.getValues();
        int int63 = dateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) localDateTime55, intArray62);
        int[] intArray65 = dateTimeField12.addWrapPartial((org.joda.time.ReadablePartial) localDateTime14, 6, intArray62, 0);
        int int66 = dateTimeField12.getMaximumValue();
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = dateTimeField12.getAsText((int) (short) 10, locale68);
        java.text.DateFormatSymbols dateFormatSymbols70 = new java.text.DateFormatSymbols(locale68);
        java.lang.String[] strArray71 = dateFormatSymbols70.getAmPmStrings();
        java.lang.String[] strArray72 = dateFormatSymbols70.getWeekdays();
        java.lang.String[] strArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateFormatSymbols70.setShortWeekdays(strArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 534 + "'", int19 == 534);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26 + "'", int20 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1439 + "'", int40 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 292278993 + "'", int66 == 292278993);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "10" + "'", str69, "10");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfDay(16);
        org.joda.time.Instant instant5 = new org.joda.time.Instant(1645514176563L);
        long long6 = instant5.getMillis();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTime((org.joda.time.ReadableInstant) instant5);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        int int15 = period13.getValue(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.Period period22 = new org.joda.time.Period(obj8, chronology20);
        org.joda.time.Period period24 = period22.withMonths(474);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.plusWeeks((int) (byte) 1);
        org.joda.time.Duration duration28 = period24.toDurationFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime32.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime32.toDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime32.minus((long) 10);
        org.joda.time.Period period43 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Seconds seconds44 = duration31.toStandardSeconds();
        boolean boolean45 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration46 = duration31.toDuration();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 54 + "'", int1 == 54);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514176563L + "'", long6 == 1645514176563L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 534 + "'", int35 == 534);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        long long16 = duration14.getStandardSeconds();
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime18, (org.joda.time.ReadablePartial) localTime19, periodType20);
        org.joda.time.Period period22 = period21.negated();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (-1), chronology24);
        org.joda.time.Period period26 = period25.toPeriod();
        org.joda.time.Period period27 = period22.withFields((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime32 = dateTime28.minusDays(12);
        org.joda.time.DateTime dateTime34 = dateTime32.minusYears(382);
        org.joda.time.Duration duration35 = period25.toDurationTo((org.joda.time.ReadableInstant) dateTime34);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.YearMonthDay yearMonthDay5 = dateTime2.toYearMonthDay();
        java.util.Date date6 = dateTime2.toDate();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime7.minusDays(12);
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears(382);
        long long14 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime11.minusSeconds(26151451);
        boolean boolean17 = dateTime2.equals((java.lang.Object) dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 14:34:59 GMT+14:34 1970");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4935506072318L + "'", long14 == 4935506072318L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime0.minuteOfHour();
        org.joda.time.DateTime dateTime10 = property8.addToCopy(38270);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(10L, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        int int19 = period17.getValue(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) period17);
        mutableInterval24.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(chronology31);
        org.joda.time.DateTime.Property property34 = dateTime27.monthOfYear();
        boolean boolean35 = mutableInterval24.contains((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getChronology(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        org.joda.time.DateTime dateTime47 = dateTime41.toDateTime(chronology45);
        org.joda.time.Period period48 = new org.joda.time.Period((long) 1, (long) ' ', periodType40, chronology45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withCenturyOfEra(2);
        long long54 = chronology45.set((org.joda.time.ReadablePartial) localDateTime50, (long) (short) 10);
        java.lang.String str55 = chronology45.toString();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 26151451, chronology45);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) period56);
        long long58 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property60 = dateTime59.millisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime59.withTimeAtStartOfDay();
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#');
        int int65 = period63.getValue(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration69 = period63.toDurationTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Chronology chronology70 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded((long) 453, 436);
        org.joda.time.DateTime dateTime75 = dateTime67.minusWeeks(8);
        java.util.GregorianCalendar gregorianCalendar76 = dateTime75.toGregorianCalendar();
        boolean boolean77 = dateTime27.isBefore((org.joda.time.ReadableInstant) dateTime75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = dateTime27.withEra(46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 4936542872360L + "'", long54 == 4936542872360L);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[+35:00]" + "'", str55, "ISOChronology[+35:00]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(gregorianCalendar76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(10L, chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = dateTime14.get(dateTimeFieldType15);
        boolean boolean17 = localTime11.isSupported(dateTimeFieldType15);
        org.joda.time.LocalTime.Property property18 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds(2782);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (-1), chronology23);
        org.joda.time.Period period25 = period24.toPeriod();
        int int26 = period25.size();
        int int27 = period25.getMinutes();
        int[] intArray28 = period25.getValues();
        org.joda.time.Duration duration29 = period25.toStandardDuration();
        org.joda.time.LocalTime localTime31 = localTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime32, (org.joda.time.ReadablePartial) localTime33, periodType34);
        org.joda.time.Period period36 = period35.negated();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (-1), chronology38);
        org.joda.time.Period period40 = period39.toPeriod();
        org.joda.time.Period period41 = period36.withFields((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        boolean boolean43 = period36.isSupported(durationFieldType42);
        org.joda.time.Period period45 = period36.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime46 = localTime19.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalTime.Property property47 = localTime19.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int49 = localTime19.indexOf(dateTimeFieldType48);
        org.joda.time.DateTime.Property property50 = dateTime2.property(dateTimeFieldType48);
        org.joda.time.DateTime dateTime52 = dateTime2.minusMinutes(52442703);
        org.joda.time.DateTime dateTime54 = dateTime2.plusMinutes(52454297);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime54.withSecondOfMinute((-756393));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -756393 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26 + "'", int6 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getWeekOfWeekyear();
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime0);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.year();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField8.getAsShortText(52450075, locale10);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "52450075" + "'", str11, "52450075");
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Collection<java.util.Locale> localeCollection5 = null;
        java.util.Locale.FilteringMode filteringMode6 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection5, filteringMode6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Set<java.lang.String> strSet13 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Collection<java.util.Locale> localeCollection15 = null;
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, localeCollection15, filteringMode16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Set<java.lang.String> strSet25 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Collection<java.util.Locale> localeCollection32 = null;
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, localeCollection32, filteringMode33);
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList34);
        java.util.Locale locale36 = java.util.Locale.lookup(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale locale37 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Set<java.lang.String> strSet44 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strSet44);
        java.util.Collection<java.util.Locale> localeCollection46 = null;
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, localeCollection46, filteringMode47);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, localeCollection46);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Collection<java.util.Locale> localeCollection55 = null;
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, localeCollection55, filteringMode56);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList57, filteringMode58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property61 = dateTime60.millisOfDay();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime62.getMinuteOfDay();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(10L, chronology67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.weekyear();
        int int70 = dateTime68.get(dateTimeFieldType69);
        int int71 = dateTime62.get(dateTimeFieldType69);
        boolean boolean72 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime.Property property73 = dateTime62.weekyear();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeUtils.getZone(dateTimeZone74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) dateTime62, dateTimeZone75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(10L, chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekyear();
        int int81 = dateTime79.get(dateTimeFieldType80);
        org.joda.time.DateMidnight dateMidnight82 = dateTime79.toDateMidnight();
        org.joda.time.DateTime dateTime83 = localDate76.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        int int84 = localDate76.getDayOfWeek();
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        boolean boolean86 = localDate76.equals((java.lang.Object) filteringMode85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList57, filteringMode85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap88 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList89 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap88);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + filteringMode6 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode6.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode33.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode47.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 534 + "'", int65 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2126 + "'", int71 == 2126);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 7 + "'", int84 == 7);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(languageRangeList89);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(2126, 438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2126 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(10L, chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = dateTime14.get(dateTimeFieldType15);
        int int17 = dateTime8.get(dateTimeFieldType15);
        boolean boolean18 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property19 = dateTime8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime0.toMutableDateTime(dateTimeZone21);
        int int24 = mutableDateTime23.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        java.lang.String str29 = interval28.toString();
        org.joda.time.DateTime dateTime30 = interval28.getEnd();
        org.joda.time.Chronology chronology31 = interval28.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.seconds();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(0L, chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = new org.joda.time.Period((java.lang.Object) mutableDateTime23, chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 534 + "'", int11 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2126 + "'", int17 == 2126);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 23 + "'", int24 == 23);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2126-06-09T08:54:32.527+35:00/2126-06-09T08:54:32.527+35:00" + "'", str29, "2126-06-09T08:54:32.527+35:00/2126-06-09T08:54:32.527+35:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(157, 2782, 348, 999, 50, 703);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period4 = period3.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (-1), chronology6);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Period period9 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        boolean boolean11 = period4.isSupported(durationFieldType10);
        org.joda.time.Period period13 = period4.plusDays((int) (byte) 10);
        int int14 = period4.getMinutes();
        int int15 = period4.getWeeks();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        java.util.Date date15 = localDateTime14.toDate();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.year();
        int int19 = localDateTime14.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 02 11:00:00 GMT+14:34 1970");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime4 = property2.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime4.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight12 = dateTime4.toDateMidnight();
        int int13 = dateTime4.getYearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withEra((int) (short) 0);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.year();
        org.joda.time.DurationField durationField25 = property24.getLeapDurationField();
        java.lang.String str26 = durationField25.toString();
        long long29 = durationField25.getValueAsLong(22560257L, 1645514240385L);
        long long32 = durationField25.getValueAsLong(0L, 1645514368491L);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4936542872698L + "'", long12 == 4936542872698L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2126-06-09T08:54:32.698+35:00/2126-06-09T08:54:32.698+35:00" + "'", str13, "2126-06-09T08:54:32.698+35:00/2126-06-09T08:54:32.698+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DurationField[days]" + "'", str26, "DurationField[days]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        java.util.Date date5 = calendar1.getTime();
        int int6 = date5.getHours();
        java.lang.String str7 = date5.toGMTString();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        java.util.Date date9 = localDate8.toDate();
        date9.setMinutes(1969);
        java.time.Instant instant12 = date9.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        date13.setMinutes(16);
        int int16 = date13.getTimezoneOffset();
        int int17 = date5.compareTo(date13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514419211,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=19,MILLISECOND=155,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514419211L + "'", long2 == 1645514419211L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 21:55:19 GMT+14:34 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22 Feb 2022 07:20:19 GMT" + "'", str7, "22 Feb 2022 07:20:19 GMT");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Jun 10 08:49:00 GMT+14:34 2126");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Jun 10 08:16:00 GMT+14:34 2126");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-874) + "'", int16 == (-874));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        java.util.Date date3 = new java.util.Date(3, 32058, 931);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 16 00:00:00 GMT+14:34 4577");
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.withDayOfWeek(1);
        int int20 = localDateTime4.getYearOfEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime4.minuteOfHour();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4936542872789L + "'", long12 == 4936542872789L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2126-06-09T08:54:32.789+35:00/2126-06-09T08:54:32.789+35:00" + "'", str13, "2126-06-09T08:54:32.789+35:00/2126-06-09T08:54:32.789+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4096 + "'", int20 == 4096);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime6, readableInstant7);
        org.joda.time.Duration duration10 = org.joda.time.Duration.millis((long) (short) -1);
        int int11 = duration8.compareTo((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Period period12 = duration10.toPeriod();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.hourOfHalfday();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.Period period6 = duration1.toPeriod(chronology3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localTime7.getFieldTypes();
        int int9 = localTime7.getSecondOfMinute();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property3 = dateTime2.secondOfDay();
        int int4 = property3.getMinimumValue();
        org.joda.time.DateTime dateTime6 = property3.setCopy(667);
        org.joda.time.DateTime dateTime7 = property3.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2074-04-15T14:34:04.839Z/2074-04-15T14:34:04.839Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime4 = property2.setCopy(453);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        int int11 = period9.getValue(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration15 = period9.toDurationTo((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime13);
        long long17 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime19 = dateTime13.plusSeconds(123);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(26220156);
        org.joda.time.Chronology chronology20 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        int int27 = dateTime23.getYearOfCentury();
        int int28 = dateTime23.getDayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime23.minusWeeks((int) (short) 0);
        boolean boolean31 = dateTime21.isAfter((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str32 = dateTime21.toString();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType35 = periodType34.withDaysRemoved();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period(1645514161529L, periodType35, chronology40);
        org.joda.time.DurationField durationField42 = chronology40.years();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime21.toMutableDateTime(chronology40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology40);
        org.joda.time.DurationField durationField45 = chronology40.eras();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 534 + "'", int26 == 534);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 26 + "'", int27 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2126-06-09T08:54:32.994+35:00" + "'", str32, "2126-06-09T08:54:32.994+35:00");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 52467410);
        java.lang.Appendable appendable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable7, 6438032998410L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property11 = dateTime0.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime0.minus((long) 7);
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(26208878);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        org.joda.time.Seconds seconds20 = duration19.toStandardSeconds();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) 32772, (int) (byte) 10);
        long long24 = duration23.getStandardSeconds();
        org.joda.time.DateTime dateTime26 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration23, 26181277);
        java.lang.String str27 = dateTime26.toString();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 534 + "'", int5 == 534);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26 + "'", int6 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(seconds20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 327L + "'", long24 == 327L);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-0592-06-19T10:21:56.252+35:00" + "'", str27, "-0592-06-19T10:21:56.252+35:00");
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.Chronology chronology17 = dateTimeFormatter2.getChronology();
        boolean boolean18 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime3 = localTime0.plusHours(26153577);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate0.minusMonths(7);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate9 = localDate5.minusYears((int) '#');
        org.joda.time.LocalDate.Property property10 = localDate9.centuryOfEra();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.days();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        int int13 = periodType11.indexOf(durationFieldType12);
        org.joda.time.LocalDate localDate15 = localDate9.withFieldAdded(durationFieldType12, 156);
        boolean boolean16 = localDate0.isSupported(durationFieldType12);
        org.joda.time.DateTime dateTime17 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property18 = localDate0.era();
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.lang.String str26 = property23.getAsText(locale24);
        java.lang.String str27 = locale24.toLanguageTag();
        java.lang.String str28 = locale21.getDisplayName(locale24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = property18.setCopy("2022-02-25T02:06:18.165+52:12/2022-02-25T02:06:18.165+52:12", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-25T02:06:18.165+52:12/2022-02-25T02:06:18.165+52:12\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32073308" + "'", str26, "32073308");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ja-JP" + "'", str27, "ja-JP");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u65e5\u672c\u8a9e\u65e5\u672c)" + "'", str28, "\u65e5\u672c\u8a9e\u65e5\u672c)");
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.plusMonths(1970);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime4.plusHours(52458322);
        java.util.Date date22 = localDateTime21.toDate();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4936542873363L + "'", long12 == 4936542873363L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2126-06-09T08:54:33.363+35:00/2126-06-09T08:54:33.363+35:00" + "'", str13, "2126-06-09T08:54:33.363+35:00/2126-06-09T08:54:33.363+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Sat Nov 09 18:54:33 GMT+14:34 10080");
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        java.lang.String str12 = dateTimeField9.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime13.getMinuteOfDay();
        int int17 = dateTime13.getYearOfCentury();
        int int18 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime13.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        int int24 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str32 = dateTimeField28.getAsShortText(1645514151873L, locale31);
        java.lang.String str33 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime23, 0, locale31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        int int37 = period35.getValue(0);
        org.joda.time.Period period39 = period35.plusWeeks(1969);
        org.joda.time.LocalTime localTime41 = localTime23.withPeriodAdded((org.joda.time.ReadablePeriod) period35, (int) (byte) 100);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property45 = dateTime44.millisOfSecond();
        org.joda.time.DateTime dateTime47 = dateTime44.withCenturyOfEra(9);
        org.joda.time.Duration duration48 = period35.toDurationTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        boolean boolean50 = duration48.isEqual(readableDuration49);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "660" + "'", str12, "660");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 534 + "'", int16 == 534);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 26 + "'", int17 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "6" + "'", str32, "6");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Interval interval10 = interval8.toInterval();
        long long11 = interval8.getEndMillis();
        java.lang.String str12 = interval8.toString();
        org.joda.time.DateTime dateTime13 = interval8.getStart();
        org.joda.time.Chronology chronology14 = interval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology14.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(52460890, 349, 2787, 38100, 52435277, 0, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4936542873419L + "'", long11 == 4936542873419L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2126-06-09T08:54:33.419+35:00/2126-06-09T08:54:33.419+35:00" + "'", str12, "2126-06-09T08:54:33.419+35:00/2126-06-09T08:54:33.419+35:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateMidnight dateMidnight7 = dateTime0.toDateMidnight();
        org.joda.time.DateTime.Property property8 = dateTime0.hourOfDay();
        int int9 = property8.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property8.setCopy("07:18:26.925");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"07:18:26.925\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        java.lang.Character[] charArray11 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet12 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet12, charArray11);
        boolean boolean15 = charSet12.add((java.lang.Character) ' ');
        boolean boolean17 = charSet12.add((java.lang.Character) '#');
        boolean boolean18 = charSet4.removeAll((java.util.Collection<java.lang.Character>) charSet12);
        java.util.stream.Stream<java.lang.Character> charStream19 = charSet12.stream();
        java.lang.Object[] objArray20 = charSet12.toArray();
        java.lang.Character[] charArray24 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet25 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet25, charArray24);
        boolean boolean28 = charSet25.add((java.lang.Character) ' ');
        java.lang.Object[] objArray29 = charSet25.toArray();
        java.lang.Character[] charArray33 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet34 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet34, charArray33);
        boolean boolean37 = charSet34.add((java.lang.Character) ' ');
        boolean boolean38 = charSet34.isEmpty();
        boolean boolean39 = charSet25.addAll((java.util.Collection<java.lang.Character>) charSet34);
        java.util.stream.Stream<java.lang.Character> charStream40 = charSet25.stream();
        boolean boolean41 = charSet12.retainAll((java.util.Collection<java.lang.Character>) charSet25);
        java.lang.Object[] objArray42 = charSet25.toArray();
        java.lang.Character[] charArray46 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet47 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet47, charArray46);
        boolean boolean50 = charSet47.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate55 = localDate53.plusDays((int) (byte) 10);
        org.joda.time.Interval interval56 = localDate55.toInterval();
        org.joda.time.LocalDate localDate58 = localDate55.withYear(38270);
        boolean boolean59 = charSet47.contains((java.lang.Object) localDate55);
        boolean boolean60 = charSet25.retainAll((java.util.Collection<java.lang.Character>) charSet47);
        java.lang.Character[] charArray64 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet65 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet65, charArray64);
        boolean boolean68 = charSet65.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate73 = localDate71.plusDays((int) (byte) 10);
        org.joda.time.Interval interval74 = localDate73.toInterval();
        org.joda.time.LocalDate localDate76 = localDate73.withYear(38270);
        boolean boolean77 = charSet65.contains((java.lang.Object) localDate73);
        int int78 = charSet65.size();
        boolean boolean80 = charSet65.add((java.lang.Character) 'a');
        java.util.Spliterator<java.lang.Character> charSpliterator81 = charSet65.spliterator();
        boolean boolean82 = charSet47.containsAll((java.util.Collection<java.lang.Character>) charSet65);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charStream19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[#,  , 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[#,  , 4]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[#,  , 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[#,  , 4]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[#,  , 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[#,  , 4]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(charSpliterator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = dateTimeField9.toString();
        long long13 = dateTimeField9.addWrapField((long) 14, 26161182);
        java.util.Locale locale17 = new java.util.Locale("2022-02-22T07:16:06.916Z/2022-02-22T07:16:06.916Z", "millisOfDay");
        java.lang.String str18 = dateTimeField9.getAsShortText(366, locale17);
        java.lang.String str19 = dateTimeField9.getName();
        long long21 = dateTimeField9.remainder(1645514399808L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str10, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 42120014L + "'", long13 == 42120014L);
        org.junit.Assert.assertEquals(locale17.toString(), "2022-02-22t07:16:06.916z/2022-02-22t07:16:06.916z_MILLISOFDAY");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "366" + "'", str18, "366");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "minuteOfDay" + "'", str19, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 59808L + "'", long21 == 59808L);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays((int) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = localDate12.withYear(38270);
        boolean boolean16 = charSet4.contains((java.lang.Object) localDate12);
        int int17 = charSet4.size();
        boolean boolean19 = charSet4.add((java.lang.Character) 'a');
        java.lang.Character[] charArray23 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet24 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet24, charArray23);
        boolean boolean27 = charSet24.add((java.lang.Character) ' ');
        boolean boolean29 = charSet24.contains((java.lang.Object) 10.0d);
        boolean boolean30 = charSet4.containsAll((java.util.Collection<java.lang.Character>) charSet24);
        java.lang.Character[] charArray34 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet35 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet35, charArray34);
        boolean boolean38 = charSet35.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays((int) (byte) 10);
        org.joda.time.Interval interval44 = localDate43.toInterval();
        org.joda.time.LocalDate localDate46 = localDate43.withYear(38270);
        boolean boolean47 = charSet35.contains((java.lang.Object) localDate43);
        int int48 = charSet35.size();
        boolean boolean50 = charSet35.add((java.lang.Character) 'a');
        boolean boolean51 = charSet4.retainAll((java.util.Collection<java.lang.Character>) charSet35);
        java.lang.Character[] charArray55 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet56 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet56, charArray55);
        boolean boolean59 = charSet56.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate64 = localDate62.plusDays((int) (byte) 10);
        org.joda.time.Interval interval65 = localDate64.toInterval();
        org.joda.time.LocalDate localDate67 = localDate64.withYear(38270);
        boolean boolean68 = charSet56.contains((java.lang.Object) localDate64);
        int int69 = charSet56.size();
        boolean boolean71 = charSet56.add((java.lang.Character) 'a');
        java.lang.Character[] charArray75 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet76 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet76, charArray75);
        boolean boolean79 = charSet76.add((java.lang.Character) ' ');
        boolean boolean81 = charSet76.contains((java.lang.Object) 10.0d);
        boolean boolean82 = charSet56.containsAll((java.util.Collection<java.lang.Character>) charSet76);
        boolean boolean83 = charSet35.removeAll((java.util.Collection<java.lang.Character>) charSet56);
        java.util.stream.Stream<java.lang.Character> charStream84 = charSet56.stream();
        java.util.Spliterator<java.lang.Character> charSpliterator85 = charSet56.spliterator();
        boolean boolean86 = charSet56.isEmpty();
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(charStream84);
        org.junit.Assert.assertNotNull(charSpliterator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime4.getMinuteOfDay();
        int int8 = dateTime4.getYearOfCentury();
        int int9 = dateTime4.getDayOfMonth();
        org.joda.time.DateTime dateTime11 = dateTime4.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTimeField13.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks((int) (byte) 10);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = period19.toDurationFrom(readableInstant20);
        long long22 = duration21.getMillis();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plus((org.joda.time.ReadableDuration) duration21);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str26 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime17, (int) (short) 1, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale25.getDisplayLanguage(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone3, locale27);
        int int30 = timeZone3.getRawOffset();
        timeZone3.setID("2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z");
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone3, locale33);
        java.util.Locale.Builder builder35 = builder0.setLocale(locale33);
        java.util.Locale.Builder builder36 = builder0.clearExtensions();
        java.util.Locale.Builder builder37 = builder0.clear();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder40 = builder38.setLanguage("2074-04-15T14:34:52.333Z/2074-04-15T14:34:52.333Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2074-04-15T14:34:52.333Z/2074-04-15T14:34:52.333Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 534 + "'", int7 == 534);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1439 + "'", int14 == 1439);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35L + "'", long22 == 35L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str28, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514420229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=20,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514420229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:22.943Z/2022-02-22T07:16:22.943Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=20,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        int int4 = localDateTime2.getWeekOfWeekyear();
        int int5 = localDateTime2.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 160 + "'", int3 == 160);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 24 + "'", int4 == 24);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 784 + "'", int5 == 784);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType6 = periodType5.withDaysRemoved();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.Period period12 = new org.joda.time.Period(1645514161529L, periodType6, chronology11);
        org.joda.time.DurationField durationField13 = chronology11.seconds();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 795, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(26302939, 878, 659, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 878 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(26220156);
        java.util.Locale locale20 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeFormatter2.parseMillis("2074-04-15T14:34:22.605Z/2074-04-15T14:34:22.605Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(locale20);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus((org.joda.time.ReadableDuration) duration18);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration18);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration18);
        long long23 = duration18.getStandardDays();
        org.joda.time.Duration duration25 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime26.getMinuteOfDay();
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime32 = dateTime26.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime26.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime26.minus((long) 10);
        org.joda.time.Period period37 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = dateTime40.plusWeeks((int) (byte) 1);
        int int43 = property39.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = interval46.isAfter((long) 10);
        org.joda.time.Duration duration49 = interval46.toDuration();
        org.joda.time.Duration duration52 = duration49.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration52, 26160257);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = interval58.isAfter((long) 10);
        org.joda.time.Duration duration61 = interval58.toDuration();
        boolean boolean62 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration61);
        int int63 = duration18.compareTo((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration65 = duration55.withMillis(22560257L);
        long long66 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration65);
        long long67 = duration65.getStandardDays();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 534 + "'", int29 == 534);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 22560257L + "'", long66 == 22560257L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = localDate2.toString("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", locale4);
        org.joda.time.LocalDate localDate7 = localDate2.withYear(21);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone9.getName((long) ' ');
        long long13 = dateTimeZone9.previousTransition((long) (short) 1);
        org.joda.time.Interval interval14 = localDate2.toInterval(dateTimeZone9);
        org.joda.time.LocalDate localDate16 = localDate2.plusYears(76);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str5, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.plusWeeks(3);
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(20);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime15 = dateTime10.withYear(26217781);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy(7);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.LocalDate localDate9 = property3.setCopy(382);
        int int10 = localDate9.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        boolean boolean3 = dateTimeZone1.equals((java.lang.Object) 1645514161708L);
        long long6 = dateTimeZone1.convertLocalToUTC((long) 26184703, false);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond(161);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusHours(2782);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withDayOfYear(76181);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76181 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-99815297L) + "'", long6 == (-99815297L));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, dateTimeZone7);
        long long15 = dateTimeZone7.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withPivotYear(26220156);
        org.joda.time.Chronology chronology21 = dateTimeFormatter3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeUtils.getZone(dateTimeZone22);
        boolean boolean25 = dateTimeZone23.equals((java.lang.Object) 1645514161708L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant28 = org.joda.time.Instant.parse("\u4e2d\u6587\u4e2d\u56fd)", dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+35:00" + "'", str9, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514153208L + "'", long15 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology2.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = chronology2.getDateTimeMillis(52678312, 871, 0, 26303, (-1969), 26167, 52435277);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26303 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        java.util.Date date9 = dateTime7.toDate();
        date9.setYear((int) '#');
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromDateFields(date9);
        org.joda.time.LocalDate localDate14 = localDate12.withYear(795);
        org.joda.time.LocalDate.Property property15 = localDate12.yearOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate16.withDayOfMonth(52488713);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52488713 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Jun 08 12:29:33 GMT+14:34 1935");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(2);
        long long17 = chronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) (short) 10);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(chronology25);
        org.joda.time.Period period28 = duration20.toPeriod(chronology25);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.year();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.year();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra(3);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime44.getMinuteOfDay();
        int int48 = dateTime44.getYearOfCentury();
        int int49 = dateTime44.getDayOfMonth();
        org.joda.time.DateTime dateTime51 = dateTime44.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        int int54 = dateTimeField53.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusWeeks((int) (byte) 10);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Duration duration61 = period59.toDurationFrom(readableInstant60);
        long long62 = duration61.getMillis();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plus((org.joda.time.ReadableDuration) duration61);
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str66 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime57, (int) (short) 1, locale65);
        int int67 = dateTimeField43.getMaximumTextLength(locale65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime69);
        int int71 = dateTime68.getMinuteOfDay();
        int int72 = dateTime68.getYearOfCentury();
        int int73 = dateTime68.getDayOfMonth();
        org.joda.time.DateTime dateTime75 = dateTime68.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property76 = dateTime75.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField77 = property76.getField();
        int int78 = dateTimeField77.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusWeeks((int) (byte) 10);
        org.joda.time.Period period83 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Duration duration85 = period83.toDurationFrom(readableInstant84);
        long long86 = duration85.getMillis();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime81.plus((org.joda.time.ReadableDuration) duration85);
        java.util.Locale locale89 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str90 = dateTimeField77.getAsText((org.joda.time.ReadablePartial) localDateTime81, (int) (short) 1, locale89);
        java.lang.String str91 = locale65.getDisplayLanguage(locale89);
        java.text.DateFormatSymbols dateFormatSymbols92 = new java.text.DateFormatSymbols(locale65);
        java.lang.String str93 = dateTimeZone38.getName((long) (short) 0, locale65);
        boolean boolean94 = localDateTime30.equals((java.lang.Object) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = localDateTime30.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4936542874053L + "'", long17 == 4936542874053L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 534 + "'", int47 == 534);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 26 + "'", int48 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1439 + "'", int54 == 1439);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 35L + "'", long62 == 35L);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 534 + "'", int71 == 534);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 26 + "'", int72 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1439 + "'", int78 == 1439);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 35L + "'", long86 == 35L);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1" + "'", str90, "1");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u4e2d\u6587" + "'", str91, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00" + "'", str93, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-1), chronology1);
        org.joda.time.Period period3 = period2.toPeriod();
        int int4 = period3.size();
        int int5 = period3.getMinutes();
        int[] intArray6 = period3.getValues();
        org.joda.time.Duration duration7 = period3.toStandardDuration();
        org.joda.time.Duration duration9 = duration7.plus(1645514153208L);
        java.lang.String str10 = duration9.toString();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1645514153.207S" + "'", str10, "PT1645514153.207S");
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays((int) (byte) 10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime15, readableInstant16);
        org.joda.time.DateTime dateTime18 = dateTime8.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        int int22 = dateTime19.getEra();
        org.joda.time.DateTime.Property property23 = dateTime19.monthOfYear();
        boolean boolean24 = dateTime18.equals((java.lang.Object) dateTime19);
        java.util.Date date25 = dateTime19.toDate();
        int int26 = dateTime19.getDayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Sat Jun 08 12:29:34 GMT+14:34 2126");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        java.util.Date date9 = dateTime7.toDate();
        date9.setYear((int) '#');
        long long12 = date9.getTime();
        java.lang.String str13 = date9.toGMTString();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Jun 08 12:29:34 GMT+14:34 1935");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1090893925609L) + "'", long12 == (-1090893925609L));
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7 Jun 1935 21:54:34 GMT" + "'", str13, "7 Jun 1935 21:54:34 GMT");
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        java.util.Locale locale9 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology13 = dateTimeFormatter12.getChronolgy();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate18 = localDate14.minusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeUtils.getZone(dateTimeZone19);
        java.lang.String str22 = dateTimeZone20.getName((long) ' ');
        org.joda.time.Interval interval23 = localDate14.toInterval(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter12.withZone(dateTimeZone20);
        int int26 = dateTimeZone20.getStandardOffset((long) (byte) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withPivotYear(52462922);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime31 = dateTimeFormatter2.parseMutableDateTime("\u53f0\u6e7e\u5730\u533a");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(locale9);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+35:00" + "'", str22, "+35:00");
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 126000000 + "'", int26 == 126000000);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.plusWeeks((int) (byte) 1);
        int int20 = property16.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean25 = interval23.isAfter((long) 10);
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration29);
        boolean boolean31 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = period36.toDurationFrom(readableInstant37);
        long long39 = duration38.getMillis();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = duration38.minus((long) 38222);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        int int46 = period44.getValue(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration50 = period44.toDurationTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = period52.toDurationFrom(readableInstant53);
        org.joda.time.Seconds seconds55 = duration54.toStandardSeconds();
        boolean boolean56 = duration50.isEqual((org.joda.time.ReadableDuration) duration54);
        boolean boolean57 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration58 = duration11.minus((org.joda.time.ReadableDuration) duration42);
        long long59 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration58);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2126-06-09T08:54:34.434+35:00/2126-06-09T08:54:34.434+35:00" + "'", str3, "2126-06-09T08:54:34.434+35:00/2126-06-09T08:54:34.434+35:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 35L + "'", long39 == 35L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 38222L + "'", long59 == 38222L);
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(52);
        org.joda.time.LocalTime localTime10 = localTime6.withMillisOfDay(1640);
        boolean boolean11 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localTime10.getFields();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 54 + "'", int1 == 54);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(2);
        long long17 = chronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) (short) 10);
        java.lang.String str18 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.millisOfSecond();
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology8.getDateTimeMillis(1645514353850L, 235, 866, 3940, 396);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 235 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4936542874504L + "'", long17 == 4936542874504L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+35:00]" + "'", str18, "ISOChronology[+35:00]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        long long5 = interval2.getEndMillis();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localDateTime10.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusYears(26151451);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        int int18 = period16.getValue(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean26 = localDateTime14.isSupported(dateTimeFieldType25);
        int int27 = instant9.get(dateTimeFieldType25);
        org.joda.time.Interval interval28 = interval2.withEnd((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant30 = instant9.plus((-161735297L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 4936542874549L + "'", long5 == 4936542874549L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 21 + "'", int27 == 21);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-1), chronology1);
        org.joda.time.Period period3 = period2.toPeriod();
        int int4 = period3.size();
        int int5 = period3.getMinutes();
        int[] intArray6 = period3.getValues();
        java.lang.String str7 = period3.toString();
        org.joda.time.Period period9 = period3.plusSeconds(122);
        org.joda.time.Period period11 = period3.plusMillis(26153877);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval14.toInterval();
        long long17 = interval14.getEndMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean19 = interval14.equals((java.lang.Object) dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        java.lang.String str23 = interval22.toString();
        org.joda.time.DateTime dateTime24 = interval22.getEnd();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusWeeks((int) (byte) 10);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationFrom(readableInstant30);
        long long32 = duration31.getMillis();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plus((org.joda.time.ReadableDuration) duration31);
        boolean boolean34 = interval22.equals((java.lang.Object) duration31);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        org.joda.time.Interval interval40 = interval22.overlap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.months();
        org.joda.time.Period period42 = interval22.toPeriod(periodType41);
        org.joda.time.DateTime dateTime43 = interval22.getStart();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Interval interval48 = interval46.toInterval();
        org.joda.time.MutableInterval mutableInterval49 = interval48.toMutableInterval();
        boolean boolean50 = interval22.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval48);
        org.joda.time.MutableInterval mutableInterval52 = interval48.toMutableInterval();
        long long53 = mutableInterval52.getStartMillis();
        org.joda.time.Interval interval54 = interval14.overlap((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        int int58 = dateTime55.getMinuteOfDay();
        int int59 = dateTime55.getYearOfCentury();
        int int60 = dateTime55.getDayOfMonth();
        org.joda.time.DateTime dateTime62 = dateTime55.minusWeeks((int) (short) 0);
        int int63 = dateTime55.getYear();
        org.joda.time.DateTime dateTime65 = dateTime55.plusYears(14);
        org.joda.time.DateTime.Property property66 = dateTime65.weekyear();
        org.joda.time.DateTime dateTime67 = property66.withMinimumValue();
        org.joda.time.Period period69 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Duration duration71 = period69.toDurationFrom(readableInstant70);
        org.joda.time.Seconds seconds72 = duration71.toStandardSeconds();
        org.joda.time.DateTime dateTime74 = dateTime67.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) 'a');
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime77);
        int int79 = dateTime76.getMinuteOfDay();
        int int80 = dateTime76.getYearOfCentury();
        int int81 = dateTime76.getDayOfMonth();
        org.joda.time.DateTime dateTime83 = dateTime76.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime84 = dateTime83.toDateTimeISO();
        mutableInterval52.setStart((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateTime84);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.001S" + "'", str7, "PT0.001S");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4936542874592L + "'", long17 == 4936542874592L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2126-06-09T08:54:34.592+35:00/2126-06-09T08:54:34.592+35:00" + "'", str23, "2126-06-09T08:54:34.592+35:00/2126-06-09T08:54:34.592+35:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 35L + "'", long32 == 35L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(mutableInterval52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4936542874592L + "'", long53 == 4936542874592L);
        org.junit.Assert.assertNull(interval54);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 534 + "'", int58 == 534);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 26 + "'", int59 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2126 + "'", int63 == 2126);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(seconds72);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 534 + "'", int79 == 534);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 26 + "'", int80 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("26226968");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getMinuteOfDay();
        org.joda.time.DateTime dateTime10 = dateTime5.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        java.lang.String str14 = dateTimeZone12.getName((long) ' ');
        java.lang.String str16 = dateTimeZone12.getName((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime10.withZone(dateTimeZone12);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.util.Calendar calendar21 = dateTime10.toCalendar(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = timeZone1.getDisplayName(true, (int) (short) 100, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 534 + "'", int8 == 534);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+35:00" + "'", str14, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+35:00" + "'", str16, "+35:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=4936193674705,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2126,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=154,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=54,SECOND=34,MILLISECOND=705,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        java.util.Date date15 = localDateTime14.toDate();
        date15.setMonth(14);
        java.lang.Object obj18 = date15.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Mar 02 11:00:00 GMT+14:34 1971");
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "Tue Mar 02 11:00:00 GMT+14:34 1971");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "Tue Mar 02 11:00:00 GMT+14:34 1971");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "Tue Mar 02 11:00:00 GMT+14:34 1971");
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.addToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = property9.setCopy(773);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        int int19 = dateTimeField17.getLeapAmount((long) 26151451);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int22 = dateTimeField17.getMaximumShortTextLength(locale21);
        long long25 = dateTimeField17.addWrapField((long) 26160257, 26155103);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeUtils.getZone(dateTimeZone26);
        java.lang.String str29 = dateTimeZone27.getName((long) ' ');
        java.lang.String str31 = dateTimeZone27.getName((long) (short) -1);
        int int33 = dateTimeZone27.getOffset((long) 26184703);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(chronology42);
        org.joda.time.Period period45 = new org.joda.time.Period((long) 1, (long) ' ', periodType37, chronology42);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra(2);
        long long51 = chronology42.set((org.joda.time.ReadablePartial) localDateTime47, (long) (short) 10);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getChronology(chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        org.joda.time.DateTime dateTime61 = dateTime55.toDateTime(chronology59);
        org.joda.time.Period period62 = duration54.toPeriod(chronology59);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime47.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (byte) 10);
        boolean boolean65 = dateTimeZone27.isLocalDateTimeGap(localDateTime47);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime47.plusMinutes(53);
        org.joda.time.LocalDateTime.Property property68 = localDateTime47.millisOfSecond();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime70);
        int int72 = dateTime69.getMinuteOfDay();
        org.joda.time.DateTime dateTime74 = dateTime69.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeUtils.getZone(dateTimeZone75);
        java.lang.String str78 = dateTimeZone76.getName((long) ' ');
        java.lang.String str80 = dateTimeZone76.getName((long) (short) -1);
        org.joda.time.DateTime dateTime81 = dateTime74.withZone(dateTimeZone76);
        java.util.Locale locale82 = java.util.Locale.PRC;
        java.util.Locale locale83 = java.util.Locale.getDefault();
        java.lang.String str84 = locale82.getDisplayScript(locale83);
        java.util.Calendar calendar85 = dateTime74.toCalendar(locale82);
        java.lang.String str86 = locale82.getDisplayCountry();
        java.lang.String str87 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, locale82);
        int int88 = property9.compareTo((org.joda.time.ReadablePartial) localDateTime47);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 22560257L + "'", long25 == 22560257L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+35:00" + "'", str29, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+35:00" + "'", str31, "+35:00");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 126000000 + "'", int33 == 126000000);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 4936542874808L + "'", long51 == 4936542874808L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 534 + "'", int72 == 534);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+35:00" + "'", str78, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+35:00" + "'", str80, "+35:00");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=4936193674809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2126,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=154,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=54,SECOND=34,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str86, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "8" + "'", str87, "8");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Interval interval6 = interval4.toInterval();
        long long7 = interval4.getEndMillis();
        java.lang.String str8 = interval4.toString();
        org.joda.time.DateTime dateTime9 = interval4.getStart();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeUtils.getZone(dateTimeZone10);
        java.lang.String str13 = dateTimeZone11.getName((long) ' ');
        java.lang.String str15 = dateTimeZone11.getName((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime9.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(1645514182943L, dateTimeZone11);
        long long19 = dateTimeZone11.convertUTCToLocal((-292260000L));
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 914, dateTimeZone11);
        java.lang.String str22 = dateTimeZone11.getShortName((long) 52670089);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 4936542874857L + "'", long7 == 4936542874857L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2126-06-09T08:54:34.857+35:00/2126-06-09T08:54:34.857+35:00" + "'", str8, "2126-06-09T08:54:34.857+35:00/2126-06-09T08:54:34.857+35:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+35:00" + "'", str15, "+35:00");
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-166260000L) + "'", long19 == (-166260000L));
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+35:00" + "'", str22, "+35:00");
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(101);
        java.lang.Appendable appendable26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime27.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime27.toDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime27.minus((long) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths(7);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter23.printTo(appendable26, (org.joda.time.ReadableInstant) dateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 534 + "'", int30 == 534);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        java.util.Date date0 = new java.util.Date();
        date0.setMinutes((int) (short) -1);
        java.lang.String str3 = date0.toLocaleString();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 20:59:21 GMT+14:34 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022/02/22 20:59:21" + "'", str3, "2022/02/22 20:59:21");
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(2);
        long long17 = chronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) (short) 10);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(chronology25);
        org.joda.time.Period period28 = duration20.toPeriod(chronology25);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime13.withCenturyOfEra(30864);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds(45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMonthOfYear(22618444);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22618444 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4936542874962L + "'", long17 == 4936542874962L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        long long25 = dateTimeField9.add((long) (-436), 1645514320660L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 534 + "'", int3 == 534);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26 + "'", int4 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 98730859239599564L + "'", long25 == 98730859239599564L);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols15 = new java.text.DateFormatSymbols(locale14);
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.lang.String str19 = nameProvider0.getShortName(locale13, "2022-02-22T07:16:55.338Z/2022-02-22T07:16:55.338Z", "UnsupportedDurationField[eras]");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        int int27 = dateTime23.getYearOfCentury();
        int int28 = dateTime23.getDayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime23.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        int int33 = dateTimeField32.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusWeeks((int) (byte) 10);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = period38.toDurationFrom(readableInstant39);
        long long41 = duration40.getMillis();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.plus((org.joda.time.ReadableDuration) duration40);
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str45 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime36, (int) (short) 1, locale44);
        int int46 = dateTimeField22.getMaximumTextLength(locale44);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime49.getMinuteOfDay();
        int int53 = dateTime49.getYearOfCentury();
        int int54 = dateTime49.getDayOfMonth();
        org.joda.time.DateTime dateTime56 = dateTime49.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        int int59 = dateTimeField58.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusWeeks((int) (byte) 10);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = period64.toDurationFrom(readableInstant65);
        long long67 = duration66.getMillis();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.plus((org.joda.time.ReadableDuration) duration66);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str71 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDateTime62, (int) (short) 1, locale70);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.lang.String str73 = locale70.getDisplayLanguage(locale72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone48, locale72);
        boolean boolean75 = locale72.hasExtensions();
        int int76 = dateTimeField22.getMaximumShortTextLength(locale72);
        java.lang.String str79 = nameProvider0.getName(locale72, "2022-02-22T07:16:44.801Z/2022-02-22T07:16:44.801Z", "2074-04-15T14:34:02.738Z/2074-04-15T14:34:02.738Z");
        java.lang.String str80 = locale72.getDisplayCountry();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 534 + "'", int26 == 534);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 26 + "'", int27 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1439 + "'", int33 == 1439);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 35L + "'", long41 == 35L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 534 + "'", int52 == 534);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 26 + "'", int53 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1439 + "'", int59 == 1439);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 35L + "'", long67 == 35L);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str73, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645514421612,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=21,MILLISECOND=612,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u65e5\u672c" + "'", str80, "\u65e5\u672c");
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period5 = period1.plusWeeks(1969);
        org.joda.time.Duration duration6 = period5.toStandardDuration();
        org.joda.time.Period period7 = period5.toPeriod();
        int int8 = period5.getMillis();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate14 = localDate10.minusYears((int) '#');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        int int26 = dateTime17.get(dateTimeFieldType24);
        boolean boolean27 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property28 = dateTime17.weekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeUtils.getZone(dateTimeZone29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone30);
        boolean boolean32 = dateTimeZone30.isFixed();
        org.joda.time.DateMidnight dateMidnight33 = localDate14.toDateMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(3240000L, dateTimeZone30);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime41 = dateTime35.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime35.minus((long) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths(7);
        boolean boolean49 = dateTime47.isBefore(1645514170000L);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period51 = period5.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period60 = new org.joda.time.Period(26155103, 7, 14, 10, 2, (int) '#', 11, 1640);
        org.joda.time.Period period61 = period51.withFields((org.joda.time.ReadablePeriod) period60);
        int int62 = period61.getMinutes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 534 + "'", int20 == 534);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2126 + "'", int26 == 2126);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateMidnight33);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 534 + "'", int38 == 534);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale5.getDisplayScript();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        int int11 = dateTimeField9.getLeapAmount((long) 26151451);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int14 = dateTimeField9.getMaximumShortTextLength(locale13);
        java.lang.String str15 = locale5.getDisplayCountry(locale13);
        java.lang.String str16 = locale5.getISO3Language();
        java.util.Calendar.Builder builder17 = builder4.setLocale(locale5);
        java.util.Set<java.lang.String> strSet18 = locale5.getUnicodeLocaleKeys();
        java.lang.String str19 = locale5.getScript();
        java.text.DateFormatSymbols dateFormatSymbols20 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale5);
        java.util.Locale.Builder builder21 = builder2.setLocale(locale5);
        java.util.Locale.Builder builder22 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setRegion("2074-04-15T14:34:47.682Z/2074-04-15T14:34:47.682Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2074-04-15T14:34:47.682Z/2074-04-15T14:34:47.682Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "China" + "'", str15, "China");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(8);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.yearOfEra();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        int int16 = localTime15.getMinuteOfHour();
        int int17 = localTime15.size();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("26181425");
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale19.getDisplayCountry(locale20);
        boolean boolean22 = localTime15.equals((java.lang.Object) locale19);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = dateTimeField12.set(4936542874857L, "14:37:52.957", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14:37:52.957\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        org.joda.time.DateTimeUtils.setCurrentMillisFixed(1645514178829L);
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("14:37:49.189");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"14:37:49.189\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays((int) (byte) 10);
        org.joda.time.Interval interval12 = localDate11.toInterval();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property14 = localDate11.yearOfEra();
        int int15 = localDate11.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.lang.String str20 = property17.getAsText(locale18);
        org.joda.time.DateTime dateTime21 = property17.withMinimumValue();
        org.joda.time.DateTime dateTime22 = localDate11.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateMidnight dateMidnight26 = localDate11.toDateMidnight(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(2404, 253, 32071607, (int) (byte) 100, 6, 2456, 52467410, dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "65778829" + "'", str20, "65778829");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int6 = dateTime2.get(dateTimeFieldType5);
        int int7 = dateTime2.getDayOfMonth();
        java.lang.String str8 = dateTime2.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-02T11:00:00.010+35:00" + "'", str8, "1970-01-02T11:00:00.010+35:00");
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.DateTime.Property property23 = dateTime16.monthOfYear();
        boolean boolean24 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(chronology34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, (long) ' ', periodType29, chronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra(2);
        long long43 = chronology34.set((org.joda.time.ReadablePartial) localDateTime39, (long) (short) 10);
        java.lang.String str44 = chronology34.toString();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 26151451, chronology34);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime.Property property47 = dateTime16.minuteOfDay();
        java.lang.String str48 = property47.toString();
        java.lang.String str49 = property47.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514178829L + "'", long43 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+35:00]" + "'", str44, "ISOChronology[+35:00]");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[minuteOfDay]" + "'", str48, "Property[minuteOfDay]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "minuteOfDay" + "'", str49, "minuteOfDay");
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        int int4 = localDateTime2.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusSeconds(0);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Interval interval6 = interval4.toInterval();
        long long7 = interval4.getEndMillis();
        java.lang.String str8 = interval4.toString();
        org.joda.time.DateTime dateTime9 = interval4.getStart();
        org.joda.time.Chronology chronology10 = interval4.getChronology();
        org.joda.time.Period period11 = new org.joda.time.Period(0L, 1645514152681L, chronology10);
        org.joda.time.Duration duration13 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.Period period18 = duration13.toPeriod(chronology15);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeUtils.getZone(dateTimeZone21);
        boolean boolean24 = dateTimeZone22.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyear();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        int int30 = period28.getValue(0);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        int int32 = period28.get(durationFieldType31);
        int int33 = period28.getDays();
        org.joda.time.Period period35 = period28.minusMonths(32769);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        org.joda.time.Period period41 = period39.normalizedStandard(periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withYearsRemoved();
        org.joda.time.Period period43 = new org.joda.time.Period(35L, (long) 453, periodType40);
        org.joda.time.Period period44 = period28.withFields((org.joda.time.ReadablePeriod) period43);
        int[] intArray47 = chronology25.get((org.joda.time.ReadablePeriod) period28, 1645514166004L, 1645514217595L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval48 = new org.joda.time.Interval((java.lang.Object) chronology10, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514178829L + "'", long7 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str8, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 51, 591]");
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime0.minus((long) 10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant(1645514176563L);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str16 = interval15.toString();
        org.joda.time.DateTime dateTime17 = interval15.getEnd();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks((int) (byte) 10);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        long long25 = duration24.getMillis();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plus((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = interval15.equals((java.lang.Object) duration24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Interval interval32 = interval30.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = interval32.toMutableInterval();
        org.joda.time.Interval interval34 = interval15.gap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks((int) (byte) 10);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = period41.toDurationFrom(readableInstant42);
        long long44 = duration43.getMillis();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.plus((org.joda.time.ReadableDuration) duration43);
        long long46 = duration43.getMillis();
        java.lang.String str47 = duration43.toString();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusWeeks((int) (byte) 10);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = period52.toDurationFrom(readableInstant53);
        long long55 = duration54.getMillis();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.plus((org.joda.time.ReadableDuration) duration54);
        java.lang.String str57 = duration54.toString();
        boolean boolean58 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration54, 1970);
        org.joda.time.Interval interval61 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Instant instant62 = instant12.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime64 = dateTime0.withDurationAdded((org.joda.time.ReadableDuration) duration54, (-436));
        org.joda.time.DateTime dateTime66 = dateTime0.plusMillis(26198934);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str16, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35L + "'", long25 == 35L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNull(interval34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 54 + "'", int36 == 54);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35L + "'", long44 == 35L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 35L + "'", long46 == 35L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0.035S" + "'", str47, "PT0.035S");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 35L + "'", long55 == 35L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0.035S" + "'", str57, "PT0.035S");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMinuteOfHour();
        int int2 = localTime0.size();
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes((int) (byte) -1);
        org.joda.time.LocalTime.Property property5 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = localTime6.plusHours(52);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        int int10 = localTime8.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 16 + "'", int1 == 16);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays((int) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = localDate12.withYear(38270);
        boolean boolean16 = charSet4.contains((java.lang.Object) localDate12);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(10L, chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        int int27 = dateTime25.get(dateTimeFieldType26);
        int int28 = dateTime19.get(dateTimeFieldType26);
        boolean boolean29 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property30 = dateTime19.weekyear();
        boolean boolean31 = charSet4.contains((java.lang.Object) property30);
        org.joda.time.DateTime dateTime32 = property30.roundHalfCeilingCopy();
        boolean boolean33 = dateTime32.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) boolean33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1096 + "'", int22 == 1096);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField6 = dateTimeField5.getDurationField();
        java.lang.String str7 = dateTimeField5.toString();
        long long9 = dateTimeField5.roundFloor(1645514200745L);
        java.lang.String str10 = dateTimeField5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Interval interval17 = interval15.toInterval();
        org.joda.time.Duration duration18 = interval15.toDuration();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime25 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        int int29 = period27.getValue(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration33 = period27.toDurationTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getChronology(chronology34);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromMillisOfDay((long) 2, chronology34);
        org.joda.time.DurationField durationField39 = chronology34.years();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 1439, 3786912000000L, periodType21, chronology34);
        boolean boolean41 = interval15.equals((java.lang.Object) chronology34);
        boolean boolean42 = durationFieldType12.isSupported(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField5, chronology34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str7, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514160000L + "'", long9 == 1645514160000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str10, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime3 = property1.addCopy(86399999);
        org.joda.time.LocalTime localTime4 = property1.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = property1.setCopy(52505465);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52505465 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.LocalTime localTime8 = dateTime0.toLocalTime();
        org.joda.time.DateTime dateTime10 = dateTime0.minusYears(52463);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.lang.String str6 = locale5.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withLocale(locale5);
        java.util.Locale locale8 = dateTimeFormatter3.getLocale();
        boolean boolean9 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZoneUTC();
        boolean boolean11 = dateTimeFormatter3.isPrinter();
        java.lang.Integer int12 = dateTimeFormatter3.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.parse("PT-7H-17M-8.596S", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.withFields(readablePartial3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime7 = localTime4.withFieldAdded(durationFieldType5, 38270);
        org.joda.time.LocalTime.Property property8 = localTime4.millisOfSecond();
        org.joda.time.LocalTime localTime9 = property8.getLocalTime();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTime.Property property14 = dateTime2.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay15 = dateTime2.toTimeOfDay();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getChronology(chronology4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.Period period8 = duration3.toPeriod(chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        boolean boolean14 = dateTimeZone12.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology5.years();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval(3291028484891L, 3291028493924L, chronology5);
        java.lang.String str18 = mutableInterval17.toString();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2074-04-17T01:34:44.891+35:00/2074-04-17T01:34:53.924+35:00" + "'", str18, "2074-04-17T01:34:44.891+35:00/2074-04-17T01:34:53.924+35:00");
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = localDate2.toString("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", locale4);
        org.joda.time.LocalDate localDate7 = localDate2.withYear(21);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        java.lang.String str11 = dateTimeZone9.getName((long) ' ');
        long long13 = dateTimeZone9.previousTransition((long) (short) 1);
        org.joda.time.Interval interval14 = localDate2.toInterval(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        int int20 = dateTime18.getDayOfYear();
        int int21 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime18);
        java.util.TimeZone timeZone22 = dateTimeZone9.toTimeZone();
        java.time.ZoneId zoneId23 = timeZone22.toZoneId();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str5, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 54 + "'", int20 == 54);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 126000000 + "'", int21 == 126000000);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId23);
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder4 = builder1.setLanguage("");
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("2022-02-22T07:16:05.935Z/2022-02-22T07:16:05.935Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-22T07:16:05.935Z/2022-02-22T07:16:05.935Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.LocalTime localTime12 = localTime8.minusMillis(58);
        org.joda.time.Period period21 = new org.joda.time.Period(26155103, 7, 14, 10, 2, (int) '#', 11, 1640);
        org.joda.time.LocalTime localTime22 = localTime8.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.MutablePeriod mutablePeriod23 = period21.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = mutablePeriod23.getValue(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        int int4 = localDateTime1.getYear();
        int int5 = localDateTime1.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = localDateTime1.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.era();
        org.joda.time.Period period13 = new org.joda.time.Period(21, (int) (byte) 100, 35, 292278993);
        org.joda.time.Period period15 = period13.plusHours((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 26171);
        int int18 = localDateTime17.size();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65778829 + "'", int7 == 65778829);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.Chronology chronology5 = dateTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.halfdays();
        org.joda.time.DurationField durationField7 = chronology5.weeks();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(1645514258610L, chronology5);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        int int4 = localTime1.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = localTime1.withSecondOfMinute(26219625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26219625 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 829 + "'", int4 == 829);
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime4 = property3.roundCeilingCopy();
        int int5 = dateTime4.getSecondOfDay();
        int int6 = dateTime4.getSecondOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        int int13 = dateTime9.getYearOfCentury();
        int int14 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime9.minusWeeks((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime9);
        int int18 = dateTime9.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property19 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime9.withEra(0);
        org.joda.time.DateTime dateTime23 = dateTime9.withDayOfYear((int) '#');
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime31 = dateTime25.plus((org.joda.time.ReadablePeriod) period30);
        int int32 = dateTime25.getSecondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime25.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks((int) (byte) 10);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = period39.toDurationFrom(readableInstant40);
        long long42 = duration41.getMillis();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.plus((org.joda.time.ReadableDuration) duration41);
        mutableInterval34.setDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration45 = mutableInterval34.toDuration();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusWeeks((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = period50.toDurationFrom(readableInstant51);
        long long53 = duration52.getMillis();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plus((org.joda.time.ReadableDuration) duration52);
        long long55 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration52);
        boolean boolean56 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime dateTime59 = dateTime33.minusWeeks((int) (byte) 100);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardSeconds((long) 86399999);
        boolean boolean63 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Period period64 = duration24.toPeriod();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType68 = periodType67.withSecondsRemoved();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Chronology chronology73 = org.joda.time.DateTimeUtils.getChronology(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology73.hourOfHalfday();
        org.joda.time.DateTime dateTime75 = dateTime69.toDateTime(chronology73);
        org.joda.time.Period period76 = new org.joda.time.Period((long) 1, (long) ' ', periodType68, chronology73);
        org.joda.time.Period period77 = period76.negated();
        org.joda.time.format.PeriodFormatter periodFormatter78 = null;
        java.lang.String str79 = period76.toString(periodFormatter78);
        org.joda.time.Period period80 = period64.withFields((org.joda.time.ReadablePeriod) period76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period82 = period76.withWeeks(2022);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 65778 + "'", int5 == 65778);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 65778 + "'", int6 == 65778);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1096 + "'", int12 == 1096);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1096 + "'", int28 == 1096);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 18 + "'", int32 == 18);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 35L + "'", long42 == 35L);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 35L + "'", long53 == 35L);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 35L + "'", long55 == 35L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "P0D" + "'", str79, "P0D");
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy(7);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.LocalDate localDate9 = property3.setCopy(382);
        org.joda.time.LocalDate localDate10 = property3.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property3.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property3.setCopy("2074-04-15T14:34:27.999Z/2074-04-15T14:34:27.999Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2074-04-15T14:34:27.999Z/2074-04-15T14:34:27.999Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(1439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = localDateTime6.getFieldType(32094);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32094");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        java.lang.String str6 = localDateTime5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfDay((-775326));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -775326 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-23T18:16:18.829" + "'", str6, "2022-02-23T18:16:18.829");
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        long long5 = dateTimeZone1.adjustOffset((long) 52502315, true);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52502315L + "'", long5 == 52502315L);
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((int) (byte) -1, 76104, 26153473, 11, 284);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 284 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        int int7 = period5.getValue(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration11 = period5.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.years();
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology12);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) 2, chronology12);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Interval interval24 = interval22.toInterval();
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        int int36 = period34.getValue(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration40 = period34.toDurationTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.years();
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((long) 2, chronology41);
        org.joda.time.DurationField durationField46 = chronology41.years();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 1439, 3786912000000L, periodType28, chronology41);
        boolean boolean48 = interval22.equals((java.lang.Object) chronology41);
        boolean boolean49 = durationFieldType19.isSupported(chronology41);
        org.joda.time.LocalTime localTime51 = localTime16.withFieldAdded(durationFieldType19, 667);
        int int52 = localTime51.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 26151451, 26153423L);
        mutableInterval2.setDurationBeforeEnd(4936542872698L);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime1.millisOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        int int9 = dateTimeField7.getLeapAmount((long) 26151451);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int12 = dateTimeField7.getMaximumShortTextLength(locale11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        int int20 = dateTime16.getYearOfCentury();
        int int21 = dateTime16.getDayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime16.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime23.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        int int26 = dateTimeField25.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks((int) (byte) 10);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = period31.toDurationFrom(readableInstant32);
        long long34 = duration33.getMillis();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plus((org.joda.time.ReadableDuration) duration33);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime29, (int) (short) 1, locale37);
        int int39 = dateTimeField15.getMaximumTextLength(locale37);
        java.lang.String str40 = locale11.getDisplayLanguage(locale37);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = locale11.getDisplayCountry(locale41);
        java.util.Locale locale43 = locale11.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = property3.setCopy("\u30a4\u30bf\u30ea\u30a2\u8a9e", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?????\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1096 + "'", int19 == 1096);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String[] strArray52 = dateFormatSymbols51.getAmPmStrings();
        java.lang.String[] strArray53 = java.util.Locale.getISOCountries();
        dateFormatSymbols51.setEras(strArray53);
        java.lang.String[] strArray55 = dateFormatSymbols51.getWeekdays();
        java.lang.String[] strArray56 = dateFormatSymbols51.getShortMonths();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1096 + "'", int6 == 1096);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1096 + "'", int30 == 1096);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears(54);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths(45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMonthOfYear(26297538);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26297538 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514178829L + "'", long12 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str13, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        int int8 = dateTime0.getYear();
        org.joda.time.DateTime dateTime10 = dateTime0.plusYears(14);
        org.joda.time.DateTime.Property property11 = dateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(3);
        int int16 = localDateTime15.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime19 = property18.getLocalDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getChronology(chronology20);
        org.joda.time.DurationField durationField22 = chronology21.years();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.centuryOfEra();
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.String str27 = dateTimeField23.getAsText((int) (byte) 0, locale25);
        java.lang.String str28 = property18.getAsShortText(locale25);
        org.joda.time.DateTime dateTime29 = property11.setCopy("26214266", locale25);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "6" + "'", str28, "6");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        int int11 = dateTime2.getWeekOfWeekyear();
        int int12 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks(100);
        org.joda.time.Period period25 = new org.joda.time.Period(22, (int) (short) 10, (int) '#', (int) (short) 100, 32772, 3, 0, (int) ' ');
        org.joda.time.DateTime dateTime26 = dateTime13.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        int int33 = period31.getValue(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime39 = dateTime26.toDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.year();
        org.joda.time.DateTime dateTime41 = dateTime2.toDateTime(chronology38);
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime2.toYearMonthDay();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 54 + "'", int12 == 54);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withDefaultYear(0);
        boolean boolean12 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1645514220614L);
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime6 = property1.setCopy((int) '#');
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime10 = dateTime7.plusWeeks(100);
        org.joda.time.DateTime dateTime12 = dateTime10.withYearOfCentury(0);
        long long13 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        java.lang.String str27 = dateTimeField26.toString();
        long long30 = dateTimeField26.addWrapField((long) 14, 26161182);
        java.util.Locale locale34 = new java.util.Locale("2022-02-22T07:16:06.916Z/2022-02-22T07:16:06.916Z", "millisOfDay");
        java.lang.String str35 = dateTimeField26.getAsShortText(366, locale34);
        java.lang.String str36 = dateTimeZone14.getName((long) 38222, locale34);
        int int37 = property1.getMaximumShortTextLength(locale34);
        org.joda.time.DateTime dateTime38 = property1.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "65778829" + "'", str4, "65778829");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60480000000L) + "'", long13 == (-60480000000L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate15);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1096 + "'", int20 == 1096);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 23 + "'", int22 == 23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str27, "DateTimeField[minuteOfDay]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 42120014L + "'", long30 == 42120014L);
        org.junit.Assert.assertEquals(locale34.toString(), "2022-02-22t07:16:06.916z/2022-02-22t07:16:06.916z_MILLISOFDAY");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "366" + "'", str35, "366");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone9);
        java.lang.String str12 = dateTimeZone10.getName((long) ' ');
        org.joda.time.Interval interval13 = localDate4.toInterval(dateTimeZone10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withZone(dateTimeZone10);
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter14.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter14.getParser();
        org.joda.time.Chronology chronology17 = dateTimeFormatter14.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter14.withDefaultYear(2787);
        java.lang.StringBuffer stringBuffer20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(2);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        org.joda.time.Seconds seconds29 = duration28.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration28, 2022);
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = period33.toDurationFrom(readableInstant34);
        org.joda.time.Seconds seconds36 = duration35.toStandardSeconds();
        org.joda.time.Duration duration39 = duration35.withDurationAdded((long) 32772, (int) (byte) 10);
        long long40 = duration39.getStandardHours();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusSeconds(7);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = dateTime47.plusWeeks((int) (byte) 1);
        int int50 = property46.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean55 = interval53.isAfter((long) 10);
        org.joda.time.Duration duration56 = interval53.toDuration();
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime42.withDurationAdded((org.joda.time.ReadableDuration) duration59, 2922789);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(stringBuffer20, (org.joda.time.ReadablePartial) localDateTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+35:00" + "'", str12, "+35:00");
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        int int13 = localTime10.getMillisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        boolean boolean19 = localTime10.equals((java.lang.Object) dateTimeFieldType17);
        int int20 = dateTime0.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime22 = dateTime0.minus(6582057309956L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 65778829 + "'", int13 == 65778829);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period5 = period1.plusWeeks(1969);
        org.joda.time.Period period7 = period5.minusMillis(26151451);
        org.joda.time.Period period9 = period5.minusMillis(1028711);
        int int10 = period5.getDays();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.lang.String str6 = locale5.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withLocale(locale5);
        java.util.Locale locale8 = dateTimeFormatter3.getLocale();
        boolean boolean9 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withDefaultYear(1640);
        java.util.Locale locale14 = new java.util.Locale("26180847");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter3.withLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.parse("52673464", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals(locale14.toString(), "26180847");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setEndMillis(1645514176018L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        int int22 = period20.getValue(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration26 = period20.toDurationTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime30 = dateTime24.withDurationAdded((long) 453, 436);
        org.joda.time.DateTime dateTime32 = dateTime24.minusWeeks(8);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((-1));
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime32);
        boolean boolean37 = mutableInterval13.contains(3291028459848L);
        org.joda.time.DateTime dateTime38 = mutableInterval13.getEnd();
        org.joda.time.DateTime dateTime39 = mutableInterval13.getStart();
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime48 = dateTime42.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime42.toDateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime42.minus((long) 10);
        org.joda.time.Period period53 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Seconds seconds54 = duration41.toStandardSeconds();
        org.joda.time.Duration duration56 = duration41.minus((long) (-1));
        long long57 = duration56.getMillis();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        int int61 = dateTime58.getMinuteOfDay();
        int int62 = dateTime58.getYearOfCentury();
        int int63 = dateTime58.getDayOfMonth();
        org.joda.time.DateTime dateTime65 = dateTime58.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfDay();
        int int67 = dateTime65.getYear();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime70 = localTime68.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.LocalTime localTime72 = localTime70.withFields(readablePartial71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology74);
        int int76 = localTime75.getSecondOfMinute();
        org.joda.time.Period period77 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime70, (org.joda.time.ReadablePartial) localTime75);
        org.joda.time.ReadablePeriod readablePeriod78 = null;
        org.joda.time.Period period79 = period77.plus(readablePeriod78);
        org.joda.time.Period period81 = period79.minusHours(100);
        org.joda.time.DateTime dateTime82 = dateTime65.plus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Period period83 = duration56.toPeriodFrom((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Seconds seconds84 = duration56.toStandardSeconds();
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration56);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1096 + "'", int45 == 1096);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(seconds54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1096 + "'", int61 == 1096);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(seconds84);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        java.lang.String str12 = dateTimeField9.getAsShortText((long) (byte) 1);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTime13.getMinuteOfDay();
        int int17 = dateTime13.getYearOfCentury();
        int int18 = dateTime13.getDayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime13.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        int int24 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str32 = dateTimeField28.getAsShortText(1645514151873L, locale31);
        java.lang.String str33 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localTime23, 0, locale31);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        int int37 = period35.getValue(0);
        org.joda.time.Period period39 = period35.plusWeeks(1969);
        org.joda.time.LocalTime localTime41 = localTime23.withPeriodAdded((org.joda.time.ReadablePeriod) period35, (int) (byte) 100);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime();
        int int43 = localTime42.getMinuteOfHour();
        int int44 = localTime42.size();
        org.joda.time.LocalTime localTime46 = localTime42.minusMinutes((int) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        java.lang.String str49 = dateTimeFieldType47.getName();
        org.joda.time.LocalTime.Property property50 = localTime46.property(dateTimeFieldType47);
        boolean boolean51 = localTime41.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(10L, chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        int int56 = dateTime54.get(dateTimeFieldType55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property57 = localTime41.property(dateTimeFieldType55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "660" + "'", str12, "660");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1096 + "'", int16 == 1096);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1439 + "'", int24 == 1439);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "6" + "'", str32, "6");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "minuteOfDay" + "'", str49, "minuteOfDay");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        int int21 = dateTime17.getYearOfCentury();
        int int22 = dateTime17.getDayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime17.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusWeeks((int) (byte) 10);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period32.toDurationFrom(readableInstant33);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plus((org.joda.time.ReadableDuration) duration34);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 1, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        int int41 = dateTimeField26.getMaximumValue(readablePartial40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.plusYears(26151451);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        int int50 = period48.getValue(0);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = period48.toDurationTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        int int61 = period60.size();
        int int62 = period60.getMinutes();
        int[] intArray63 = period60.getValues();
        int int64 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56, intArray63);
        int[] intArray66 = dateTimeField13.addWrapPartial((org.joda.time.ReadablePartial) localDateTime15, 6, intArray63, 0);
        java.util.Calendar.Builder builder67 = builder0.setFields(intArray66);
        java.util.Calendar.Builder builder71 = builder0.setDate(914, 26153877, 19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar72 = builder71.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid era");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1096 + "'", int20 == 1096);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 23 + "'", int22 == 23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 35L + "'", long35 == 35L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateMidnight dateMidnight5 = dateTime2.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period8 = org.joda.time.Period.seconds(26160257);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withMillisRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, readableDuration6, periodType9);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(52667875, (-756313), 52666, 349, 105, 0, 457072);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 349 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("PT18H16M18.791S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'PT18H16M18.791S' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        int int6 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate8 = localDate2.withWeekyear(914);
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Weeks weeks11 = period10.toStandardWeeks();
        int int12 = period10.size();
        org.joda.time.LocalDate localDate14 = localDate2.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 6);
        org.joda.time.Period period16 = period10.minusSeconds(52442703);
        int int17 = period16.getYears();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 54 + "'", int6 == 54);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(weeks11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        boolean boolean8 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime11 = dateTimeFormatter2.parseMutableDateTime("2074-04-15T14:34:47.025Z/2074-04-15T14:34:47.025Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Interval interval6 = interval4.withStartMillis((long) (short) 1);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTime dateTime8 = interval6.getEnd();
        org.joda.time.DateTime dateTime10 = dateTime8.withYearOfEra(26226876);
        org.joda.time.DateTime dateTime12 = dateTime8.minusDays((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime8.withMonthOfYear(52505465);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52505465 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        boolean boolean8 = localTime2.isSupported(dateTimeFieldType6);
        org.joda.time.LocalTime.Property property9 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property9.roundHalfCeilingCopy();
        boolean boolean12 = calendar1.after((java.lang.Object) property9);
        java.lang.String str13 = property9.getName();
        int int14 = property9.getMinimumValueOverall();
        org.joda.time.LocalTime localTime15 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime17 = property9.addNoWrapToCopy(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = localTime17.withMillisOfDay((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514424014,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=23,MILLISECOND=958,ZONE_OFFSET=52499944,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfHour" + "'", str13, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone21.getName((long) ' ');
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType28 = periodType27.withDaysRemoved();
        org.joda.time.Period period29 = period26.normalizedStandard(periodType28);
        org.joda.time.Period period31 = period26.plusSeconds(479);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime32, (org.joda.time.ReadablePartial) localTime33, periodType34);
        org.joda.time.Period period36 = period35.negated();
        org.joda.time.Period period38 = period36.plusMillis(30864);
        org.joda.time.Period period39 = period31.plus((org.joda.time.ReadablePeriod) period36);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+35:00" + "'", str23, "+35:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withFieldAdded(durationFieldType9, 1970);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.Interval interval18 = interval16.toInterval();
        long long19 = interval16.getEndMillis();
        java.lang.String str20 = interval16.toString();
        org.joda.time.DateTime dateTime21 = interval16.getStart();
        org.joda.time.Chronology chronology22 = interval16.getChronology();
        org.joda.time.Period period23 = new org.joda.time.Period(0L, 1645514152681L, chronology22);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusDays(100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDateTime31.getFieldType((int) (short) 1);
        int int34 = localDateTime30.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.millisOfDay();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        int int41 = period39.getValue(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration45 = period39.toDurationTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime49 = dateTime43.withDurationAdded((long) 453, 436);
        org.joda.time.Chronology chronology50 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType33.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(33, (-775326), 728, 827, 1028711, 0, 701, chronology50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 827 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514178829L + "'", long19 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str20, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime.Property property3 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime5 = property3.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime5.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime15.getMinuteOfDay();
        int int19 = dateTime15.getYearOfCentury();
        int int20 = dateTime15.getDayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime15.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property23 = dateTime22.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        int int25 = dateTimeField24.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks((int) (byte) 10);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = period30.toDurationFrom(readableInstant31);
        long long33 = duration32.getMillis();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.plus((org.joda.time.ReadableDuration) duration32);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime28, (int) (short) 1, locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.lang.String str39 = locale36.getDisplayLanguage(locale38);
        java.lang.String str40 = dateTimeZone7.getShortName((long) (short) 100, locale36);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) 85613876040000L, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        java.lang.String str44 = dateTimeZone7.getShortName((-161735297L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+35:00" + "'", str9, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1096 + "'", int18 == 1096);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1439 + "'", int25 == 1439);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35L + "'", long33 == 35L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str39, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+35:00" + "'", str40, "+35:00");
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+35:00" + "'", str44, "+35:00");
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(26151451);
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#');
        int int5 = period3.getValue(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration9 = period3.toDurationTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = period11.toDurationFrom(readableInstant12);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        boolean boolean15 = duration9.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTime dateTime26 = dateTime20.toDateTime(chronology24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 1, (long) ' ', periodType19, chronology24);
        org.joda.time.DurationField durationField28 = chronology24.weeks();
        boolean boolean29 = duration13.equals((java.lang.Object) chronology24);
        org.joda.time.Duration duration31 = org.joda.time.Duration.millis(1645514218444L);
        boolean boolean32 = duration13.isEqual((org.joda.time.ReadableDuration) duration31);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        long long35 = calendar34.getTimeInMillis();
        long long36 = calendar34.getTimeInMillis();
        int int38 = calendar34.getMinimum(0);
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.Period period45 = duration40.toPeriod(chronology42);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeUtils.getZone(dateTimeZone48);
        boolean boolean51 = dateTimeZone49.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology52 = chronology42.withZone(dateTimeZone49);
        boolean boolean53 = calendar34.after((java.lang.Object) chronology42);
        calendar34.set(26171181, 797, 1, 59, 20);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property61 = dateTime60.millisOfDay();
        int int62 = property61.getMaximumValueOverall();
        org.joda.time.DateTime dateTime63 = property61.withMaximumValue();
        boolean boolean64 = calendar34.after((java.lang.Object) property61);
        org.joda.time.DateTime dateTime65 = property61.roundHalfCeilingCopy();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Period period67 = period1.minus((org.joda.time.ReadablePeriod) period66);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26171181,MONTH=797,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=59,MINUTE=20,SECOND=24,MILLISECOND=154,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514424210L + "'", long35 == 1645514424210L);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514424210L + "'", long36 == 1645514424210L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 86399999 + "'", int62 == 86399999);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        int int8 = localDateTime6.getYearOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        int int14 = dateTimeField12.getLeapAmount((long) 26151451);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int17 = dateTimeField12.getMaximumShortTextLength(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime21.getMinuteOfDay();
        int int25 = dateTime21.getYearOfCentury();
        int int26 = dateTime21.getDayOfMonth();
        org.joda.time.DateTime dateTime28 = dateTime21.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        int int31 = dateTimeField30.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = period36.toDurationFrom(readableInstant37);
        long long39 = duration38.getMillis();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plus((org.joda.time.ReadableDuration) duration38);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDateTime34, (int) (short) 1, locale42);
        int int44 = dateTimeField20.getMaximumTextLength(locale42);
        java.lang.String str45 = locale16.getDisplayLanguage(locale42);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = locale16.getDisplayCountry(locale46);
        java.util.Locale locale48 = locale16.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = localDateTime6.toString("2022-02-25T02:06:16.961+52:12/2022-02-25T02:06:16.961+52:12", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1096 + "'", int24 == 1096);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1439 + "'", int31 == 1439);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 35L + "'", long39 == 35L);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String str52 = locale24.getCountry();
        java.lang.String str53 = locale24.getDisplayScript();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1096 + "'", int6 == 1096);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1096 + "'", int30 == 1096);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "TW" + "'", str52, "TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u706b");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        long long10 = dateTimeZone6.adjustOffset((long) 52502315, true);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(105, 253, (-737452), 26153475, 396, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26153475 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52502315L + "'", long10 == 52502315L);
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        mutableInterval13.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.DateTime.Property property23 = dateTime16.monthOfYear();
        boolean boolean24 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTime(chronology34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) 1, (long) ' ', periodType29, chronology34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra(2);
        long long43 = chronology34.set((org.joda.time.ReadablePartial) localDateTime39, (long) (short) 10);
        java.lang.String str44 = chronology34.toString();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 26151451, chronology34);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime47.getMinuteOfDay();
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime53 = dateTime47.plus((org.joda.time.ReadablePeriod) period52);
        int int54 = dateTime53.getMillisOfSecond();
        boolean boolean55 = mutableInterval46.isBefore((org.joda.time.ReadableInstant) dateTime53);
        long long56 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514178829L + "'", long43 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+35:00]" + "'", str44, "ISOChronology[+35:00]");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1096 + "'", int50 == 1096);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 864 + "'", int54 == 864);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645514178864L + "'", long56 == 1645514178864L);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        int int5 = timeZone3.getOffset(1645514395888L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        boolean boolean12 = mutableInterval0.containsNow();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str16 = interval15.toString();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        java.lang.String str20 = interval19.toString();
        org.joda.time.DateTime dateTime21 = interval19.getEnd();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks((int) (byte) 10);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        long long29 = duration28.getMillis();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plus((org.joda.time.ReadableDuration) duration28);
        boolean boolean31 = interval19.equals((java.lang.Object) duration28);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Interval interval37 = interval19.overlap((org.joda.time.ReadableInterval) interval34);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = interval19.toPeriod(periodType38);
        org.joda.time.DateTime dateTime40 = interval19.getStart();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Interval interval45 = interval43.toInterval();
        org.joda.time.MutableInterval mutableInterval46 = interval45.toMutableInterval();
        boolean boolean47 = interval19.isBefore((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval45);
        org.joda.time.MutableInterval mutableInterval49 = interval45.toMutableInterval();
        long long50 = mutableInterval49.getStartMillis();
        org.joda.time.Interval interval51 = interval15.gap((org.joda.time.ReadableInterval) mutableInterval49);
        boolean boolean52 = mutableInterval0.isBefore((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(10L, chronology54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        int int57 = dateTime55.get(dateTimeFieldType56);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        int int61 = period59.getValue(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration65 = period59.toDurationTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) period59);
        boolean boolean67 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) mutableInterval66);
        mutableInterval0.setDurationAfterStart(3291028680852L);
        org.joda.time.Period period70 = mutableInterval0.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int72 = period70.getValue(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str16, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str20, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(interval37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514178829L + "'", long50 == 1645514178829L);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period70);
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.years();
        org.joda.time.DateTimeField dateTimeField3 = chronology1.centuryOfEra();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = dateTimeField3.getAsText((int) (byte) 0, locale5);
        java.lang.String str8 = locale5.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja_JP" + "'", str8, "ja_JP");
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        int int8 = dateTime0.getYear();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Calendar calendar13 = dateTime0.toCalendar(locale12);
        calendar13.setLenient(true);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645514178829,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=18,MILLISECOND=829,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        java.util.Date date5 = new java.util.Date(52459, 26213693, 57, 26228534, 32772);
        long long6 = date5.getTime();
        java.time.Instant instant7 = date5.toInstant();
        long long8 = date5.getTime();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Oct 08 08:12:00 GMT+14:34 2241825");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 70683020905020056L + "'", long6 == 70683020905020056L);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 70683020905020056L + "'", long8 == 70683020905020056L);
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        boolean boolean10 = dateTime0.isAfter((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime12 = dateTime0.minusMillis(26153371);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded(1645514284539L, 52504933);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514284539 * 52504933");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalDateTime localDateTime14 = dateTime2.toLocalDateTime();
        java.util.Date date15 = localDateTime14.toDate();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.era();
        int int17 = localDateTime14.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Jan 02 11:00:00 GMT+14:34 1970");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(1645514298723L, (long) 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(100);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        int int4 = period3.getMonths();
        org.joda.time.LocalDate localDate6 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period3, 26167);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(19);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        int int15 = dateTime11.getYearOfCentury();
        int int16 = dateTime11.getDayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime11.minusWeeks((int) (short) 0);
        boolean boolean19 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        boolean boolean26 = localTime20.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime.Property property27 = localTime20.minuteOfHour();
        org.joda.time.LocalTime localTime28 = property27.withMaximumValue();
        org.joda.time.LocalTime localTime30 = localTime28.minusSeconds(2782);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (-1), chronology32);
        org.joda.time.Period period34 = period33.toPeriod();
        int int35 = period34.size();
        int int36 = period34.getMinutes();
        int[] intArray37 = period34.getValues();
        org.joda.time.Duration duration38 = period34.toStandardDuration();
        org.joda.time.LocalTime localTime40 = localTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 0);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime41, (org.joda.time.ReadablePartial) localTime42, periodType43);
        org.joda.time.Period period45 = period44.negated();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (-1), chronology47);
        org.joda.time.Period period49 = period48.toPeriod();
        org.joda.time.Period period50 = period45.withFields((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        boolean boolean52 = period45.isSupported(durationFieldType51);
        org.joda.time.Period period54 = period45.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime55 = localTime28.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalTime.Property property56 = localTime28.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int58 = localTime28.indexOf(dateTimeFieldType57);
        org.joda.time.DateTime.Property property59 = dateTime11.property(dateTimeFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property60 = localDate6.property(dateTimeFieldType57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1096 + "'", int14 == 1096);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (-1), chronology8);
        org.joda.time.Period period10 = period9.toPeriod();
        int int11 = period10.size();
        int int12 = period10.getMinutes();
        int[] intArray13 = period10.getValues();
        org.joda.time.Period period15 = period10.withMonths(26155103);
        org.joda.time.Period period17 = period15.minusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime6.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean21 = localDateTime6.isSupported(durationFieldType20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(10L, chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = dateTime24.get(dateTimeFieldType25);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        int int30 = period28.getValue(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration34 = period28.toDurationTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period28);
        mutableInterval35.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(chronology42);
        org.joda.time.DateTime.Property property45 = dateTime38.monthOfYear();
        boolean boolean46 = mutableInterval35.contains((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Interval interval51 = interval49.toInterval();
        org.joda.time.Interval interval53 = interval51.withStartMillis((long) (short) 1);
        boolean boolean54 = mutableInterval35.equals((java.lang.Object) interval53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getChronology(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getChronology(chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfDay();
        boolean boolean61 = interval53.equals((java.lang.Object) chronology58);
        org.joda.time.DurationField durationField62 = durationFieldType20.getField(chronology58);
        long long65 = durationField62.getValueAsLong(1129900449600000L, 1645514365669L);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 26155103L + "'", long65 == 26155103L);
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) 26151451, 26153423L);
        org.joda.time.Period period4 = org.joda.time.Period.seconds(0);
        mutableInterval2.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.lang.String str2 = locale1.getDisplayScript();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        int int7 = dateTimeField5.getLeapAmount((long) 26151451);
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int10 = dateTimeField5.getMaximumShortTextLength(locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.lang.String str12 = locale1.getISO3Language();
        java.util.Calendar.Builder builder13 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder17 = builder0.setDate(16, (int) 'a', 995);
        java.util.Calendar.Builder builder20 = builder17.set(0, 437);
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay((int) (short) -1, 26200719, 479, 457);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder27 = builder20.setCalendarType("2022-02-22T07:16:09.216Z/2022-02-22T07:16:09.216Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2022-02-22T07:16:09.216Z/2022-02-22T07:16:09.216Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "China" + "'", str11, "China");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        java.util.Locale locale7 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology11 = dateTimeFormatter10.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeUtils.getZone(dateTimeZone13);
        java.lang.String str16 = dateTimeZone14.getName((long) ' ');
        java.lang.String str18 = dateTimeZone14.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(0L, dateTimeZone14);
        long long22 = dateTimeZone14.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter10.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone14);
        boolean boolean26 = dateTimeFormatter25.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter25.withPivotYear(721);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter25.getParser();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+35:00" + "'", str16, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+35:00" + "'", str18, "+35:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514153208L + "'", long22 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        org.joda.time.DurationField durationField7 = dateTimeField2.getDurationField();
        int int10 = durationField7.getValue((long) 8, (long) 7);
        long long13 = durationField7.add((long) 1439, 382);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long16 = dateTimeZone14.convertUTCToLocal((long) 1970);
        long long18 = dateTimeZone14.nextTransition(1645514182234L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(10L, chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.minus(100L);
        int int24 = dateTime23.getYear();
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime();
        java.util.Date date26 = dateTime23.toDate();
        org.joda.time.DateTime.Property property27 = dateTime23.minuteOfDay();
        int int28 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) long13, dateTimeZone14);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.millisOfDay();
        org.joda.time.DateTime dateTime32 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        int int36 = period34.getValue(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration40 = period34.toDurationTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime44 = dateTime38.withDurationAdded((long) 453, 436);
        org.joda.time.DateTime dateTime46 = dateTime38.minusWeeks(8);
        int int47 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime46.getDayOfMonth();
        int int49 = dateTime46.getCenturyOfEra();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6" + "'", str6, "6");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1375201439L + "'", long13 == 1375201439L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1970L + "'", long16 == 1970L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514182234L + "'", long18 == 1645514182234L);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 14:34:59 GMT+14:34 1970");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 29 + "'", int48 == 29);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        int int6 = period4.getValue(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration10 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime8);
        int int12 = dateTime8.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getRangeDurationType();
        boolean boolean15 = dateTime8.isSupported(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.Period period5 = new org.joda.time.Period(22560257L, 1645514161708L, periodType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DurationField durationField8 = chronology7.years();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 26178, periodType4, chronology7);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, chronology7);
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) dateTimeField12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(206, 755);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 755");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.plusMonths(1970);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime4.minusMinutes(26184703);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        java.lang.String str25 = dateTimeField23.getAsShortText((long) 459153);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514178829L + "'", long12 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str13, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "70" + "'", str25, "70");
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        calendar1.set((int) (short) 10, (int) (short) 10, (-292275054), 26153423, 32772, 26178);
        calendar1.setMinimalDaysInFirstWeek(0);
        java.util.Date date20 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int21 = date20.getYear();
        calendar1.setTime(date20);
        java.lang.String str23 = date20.toLocaleString();
        date20.setYear(755);
        java.util.Date date31 = new java.util.Date(710, 17, 1439, 26213693, 26151451);
        boolean boolean32 = date20.before(date31);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=85613823540056,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=4682,MONTH=11,WEEK_OF_YEAR=53,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=14,SECOND=0,MILLISECOND=0,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514424961L + "'", long2 == 1645514424961L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514424961L + "'", long3 == 1645514424961L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Sun Dec 30 08:14:00 GMT+14:34 2655");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2782 + "'", int21 == 2782);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Dec 30, 4682 8:14:00 AM" + "'", str23, "Dec 30, 4682 8:14:00 AM");
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Wed Jul 07 22:31:00 GMT+14:34 5655");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        java.util.Date date5 = new java.util.Date((int) (short) 1, 3939, 797, 999, 703);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Jul 18 02:43:00 GMT+14:34 2231");
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDateTime17.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withMonthOfYear(160);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 160 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514178829L + "'", long12 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str13, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval28.withPeriodAfterStart(readablePeriod31);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId35 = timeZone34.toZoneId();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone(zoneId35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone(zoneId35);
        boolean boolean38 = interval32.equals((java.lang.Object) zoneId35);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone(zoneId35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        boolean boolean42 = timeZone39.useDaylightTime();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str3, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514425025,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=25,MILLISECOND=25,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (-1), chronology2);
        org.joda.time.Period period4 = period3.toPeriod();
        org.joda.time.LocalTime localTime5 = localTime0.minus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        boolean boolean11 = localTime5.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        long long16 = dateTimeField13.getDifferenceAsLong(1645514229037L, (long) 26213240);
        int int19 = dateTimeField13.getDifference(1645514205547L, 1645525101149L);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 457080L + "'", long16 == 457080L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalTime localTime11 = property7.roundCeilingCopy();
        java.lang.String str12 = property7.getAsString();
        java.lang.String str13 = property7.getAsShortText();
        org.joda.time.LocalTime localTime14 = property7.getLocalTime();
        int int15 = localTime14.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "16" + "'", str12, "16");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "16" + "'", str13, "16");
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 65778829 + "'", int15 == 65778829);
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        org.joda.time.Seconds seconds8 = duration7.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration7, 2022);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) 32772, (int) (byte) 10);
        long long19 = duration18.getStandardHours();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration18, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds(7);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.plusWeeks((int) (byte) 1);
        int int29 = property25.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration38, 2922789);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime21.withYearOfEra(86399);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((java.lang.Object) 86399);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra(52460890);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str3, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTime6.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime6.getZone();
        org.joda.time.DateTime.Property property11 = dateTime6.millisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        java.util.Locale locale3 = new java.util.Locale("2074-04-15T14:34:29.317Z/2074-04-15T14:34:29.317Z", "ZHO", "17 Jan 4683 04:52:00 GMT");
        org.junit.Assert.assertEquals(locale3.toString(), "2074-04-15t14:34:29.317z/2074-04-15t14:34:29.317z_ZHO_17 Jan 4683 04:52:00 GMT");
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, 1970);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        long long12 = interval9.getEndMillis();
        java.lang.String str13 = interval9.toString();
        org.joda.time.DateTime dateTime14 = interval9.getStart();
        org.joda.time.Chronology chronology15 = interval9.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, 1645514152681L, chronology15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime4.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMillis(348);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate26 = localDate22.minusYears((int) '#');
        org.joda.time.LocalDate.Property property27 = localDate26.centuryOfEra();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.days();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.days();
        int int30 = periodType28.indexOf(durationFieldType29);
        org.joda.time.LocalDate localDate32 = localDate26.withFieldAdded(durationFieldType29, 156);
        org.joda.time.LocalDate.Property property33 = localDate32.weekyear();
        org.joda.time.LocalDate localDate34 = property33.roundCeilingCopy();
        org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = localDateTime21.isEqual((org.joda.time.ReadablePartial) localDate34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514178829L + "'", long12 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str13, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DurationField durationField2 = chronology1.years();
        org.joda.time.DateTimeField dateTimeField3 = chronology1.centuryOfEra();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        java.lang.String str7 = dateTimeField3.getAsText((int) (byte) 0, locale5);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale5);
        java.lang.String str9 = locale5.getDisplayName();
        java.lang.Object obj10 = locale5.clone();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514425228,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=25,MILLISECOND=172,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "");
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) dateTime2, dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime19.toDateMidnight();
        org.joda.time.DateTime dateTime23 = localDate16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDate localDate25 = localDate16.plusYears((int) '4');
        org.joda.time.LocalDate.Property property26 = localDate16.centuryOfEra();
        java.lang.String str27 = property26.getAsShortText();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "20" + "'", str27, "20");
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.LocalDate localDate7 = localDate4.withYear(38270);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        long long11 = dateTimeField9.roundHalfFloor(1645514220576L);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeUtils.getZone(dateTimeZone16);
        java.lang.String str19 = dateTimeZone17.getName((long) ' ');
        long long21 = dateTimeZone17.previousTransition((long) (short) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) dateTime14, dateTimeZone17);
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = dateTimeZone17.getShortName(1645514170416L, locale24);
        int int27 = dateTimeField9.getMaximumTextLength(locale24);
        long long29 = dateTimeField9.roundHalfCeiling((long) 58);
        int int31 = dateTimeField9.get(1645514263666L);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField9.getType();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 946684800000L + "'", long11 == 946684800000L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:00" + "'", str19, "+35:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+35:00" + "'", str26, "+35:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 946684800000L + "'", long29 == 946684800000L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 10, chronology6);
        boolean boolean8 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        boolean boolean11 = dateTime7.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime(chronology20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1, (long) ' ', periodType15, chronology20);
        org.joda.time.DateTime dateTime24 = dateTime9.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime9.era();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        boolean boolean32 = dateTime31.isEqualNow();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime35 = property34.roundFloorCopy();
        java.lang.String str36 = dateTime35.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-23T00:00:00.000+35:00" + "'", str36, "2022-02-23T00:00:00.000+35:00");
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        int int11 = dateTime2.get(dateTimeFieldType9);
        boolean boolean12 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime.Property property13 = dateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) dateTime2, dateTimeZone15);
        boolean boolean17 = dateTimeZone15.isFixed();
        long long19 = dateTimeZone15.convertUTCToLocal(660000L);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone15);
        int int21 = dateTime20.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 126660000L + "'", long19 == 126660000L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        java.lang.Character[] charArray3 = new java.lang.Character[] { '#', ' ', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet4 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet4, charArray3);
        boolean boolean7 = charSet4.add((java.lang.Character) ' ');
        charSet4.clear();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        java.lang.String str12 = interval11.toString();
        org.joda.time.DateTime dateTime13 = interval11.getEnd();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        boolean boolean23 = interval11.equals((java.lang.Object) duration20);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Interval interval29 = interval11.overlap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.months();
        org.joda.time.Period period31 = interval11.toPeriod(periodType30);
        org.joda.time.DateTime dateTime32 = interval11.getStart();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Interval interval37 = interval35.toInterval();
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        boolean boolean39 = interval11.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Interval interval41 = interval37.withPeriodAfterStart(readablePeriod40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTime dateTime47 = dateTime42.minusHours((int) 'a');
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime50 = dateTime47.withYear(38222);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime51.getMinuteOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(10L, chronology56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        int int59 = dateTime57.get(dateTimeFieldType58);
        int int60 = dateTime51.get(dateTimeFieldType58);
        int int61 = dateTime47.get(dateTimeFieldType58);
        boolean boolean62 = interval37.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        java.lang.String str66 = interval65.toString();
        boolean boolean67 = interval65.isAfterNow();
        org.joda.time.Duration duration68 = interval65.toDuration();
        boolean boolean69 = interval37.isBefore((org.joda.time.ReadableInterval) interval65);
        java.lang.String str70 = interval37.toString();
        boolean boolean71 = charSet4.remove((java.lang.Object) interval37);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str12, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(interval29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1096 + "'", int45 == 1096);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1096 + "'", int54 == 1096);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str66, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str70, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(38222);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(chronology15);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime8.toMutableDateTime(chronology15);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period26 = period24.minusHours(26155103);
        int[] intArray29 = chronology15.get((org.joda.time.ReadablePeriod) period26, 1645514177012L, (long) 21);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.minuteOfDay();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(10L, chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        int int36 = dateTime34.get(dateTimeFieldType35);
        boolean boolean37 = localTime31.isSupported(dateTimeFieldType35);
        org.joda.time.LocalTime.Property property38 = localTime31.minuteOfHour();
        org.joda.time.LocalTime localTime39 = property38.withMaximumValue();
        org.joda.time.LocalTime localTime41 = localTime39.minusSeconds(2782);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (-1), chronology43);
        org.joda.time.Period period45 = period44.toPeriod();
        int int46 = period45.size();
        int int47 = period45.getMinutes();
        int[] intArray48 = period45.getValues();
        org.joda.time.Duration duration49 = period45.toStandardDuration();
        org.joda.time.LocalTime localTime51 = localTime39.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 0);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime52, (org.joda.time.ReadablePartial) localTime53, periodType54);
        org.joda.time.Period period56 = period55.negated();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (-1), chronology58);
        org.joda.time.Period period60 = period59.toPeriod();
        org.joda.time.Period period61 = period56.withFields((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        boolean boolean63 = period56.isSupported(durationFieldType62);
        org.joda.time.Period period65 = period56.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime66 = localTime39.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.LocalTime.Property property67 = localTime39.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int69 = localTime39.indexOf(dateTimeFieldType68);
        org.joda.time.LocalTime.Property property70 = localTime39.hourOfDay();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfDay();
        org.joda.time.DateTime dateTime73 = dateTime71.withTimeAtStartOfDay();
        org.joda.time.Period period75 = new org.joda.time.Period((long) '#');
        int int77 = period75.getValue(0);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime();
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration81 = period75.toDurationTo((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Chronology chronology82 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeField dateTimeField83 = chronology82.millisOfDay();
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(locale85);
        java.util.Set<java.lang.String> strSet87 = locale85.getUnicodeLocaleKeys();
        java.lang.String str88 = dateTimeField83.getAsShortText(26167, locale85);
        java.lang.String str89 = property70.getAsShortText(locale85);
        int int90 = dateTimeField30.getMaximumTextLength(locale85);
        boolean boolean91 = dateTimeField30.isSupported();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-52, -1, -3, 0, -7, -16, -16, -991]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "26167" + "'", str88, "26167");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "18" + "'", str89, "18");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int12 = localDateTime8.get(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYear((int) '4');
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfFloorCopy();
        java.lang.Object obj19 = null;
        boolean boolean20 = property17.equals(obj19);
        org.joda.time.LocalDateTime localDateTime21 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = property17.setCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        int int26 = localDateTime23.get(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 829 + "'", int12 == 829);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 1645514280100L);
        java.lang.String str2 = localDate1.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-23" + "'", str2, "2022-02-23");
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.Period period12 = duration7.toPeriod(chronology9);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeUtils.getZone(dateTimeZone15);
        boolean boolean18 = dateTimeZone16.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology19 = chronology9.withZone(dateTimeZone16);
        boolean boolean20 = calendar1.after((java.lang.Object) chronology9);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology9);
        java.lang.String str22 = localTime21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localTime21.isSupported(dateTimeFieldType23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime27 = localTime25.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.LocalTime localTime29 = localTime27.withFields(readablePartial28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.days();
        org.joda.time.Period period33 = period31.normalizedStandard(periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        int int35 = periodType32.indexOf(durationFieldType34);
        boolean boolean36 = localTime29.isSupported(durationFieldType34);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getChronology(chronology39);
        org.joda.time.DurationField durationField41 = chronology40.years();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfDay();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 10074, 1645514199442L, chronology40);
        org.joda.time.DurationField durationField44 = durationFieldType34.getField(chronology40);
        java.lang.String str45 = durationFieldType34.getName();
        boolean boolean46 = localTime21.isSupported(durationFieldType34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514425524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=25,MILLISECOND=468,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514425524L + "'", long2 == 1645514425524L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514425524L + "'", long3 == 1645514425524L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "18:16:18.829" + "'", str22, "18:16:18.829");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hours" + "'", str45, "hours");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Interval interval6 = interval4.withStartMillis((long) (short) 1);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        int int13 = dateTime9.getYearOfCentury();
        int int14 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime9.minusWeeks((int) (short) 0);
        boolean boolean17 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property18 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime7.minus((long) 7);
        org.joda.time.Duration duration22 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.Period period27 = duration22.toPeriod(chronology24);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeUtils.getZone(dateTimeZone30);
        boolean boolean33 = dateTimeZone31.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology34 = chronology24.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime7.toDateTime(chronology34);
        boolean boolean36 = interval4.isAfter((org.joda.time.ReadableInstant) dateTime7);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1096 + "'", int12 == 1096);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        java.util.Date date5 = localDate4.toDate();
        date5.setMinutes(436);
        int int8 = date5.getDate();
        date5.setSeconds(46);
        date5.setTime(3291028500172L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Apr 16 05:10:00 GMT+14:34 2074");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        java.lang.String str8 = dateTimeZone6.getName((long) ' ');
        java.lang.String str10 = dateTimeZone6.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(0L, dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset(1645514153208L, false);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withPivotYear(57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withPivotYear(26217);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = periodType23.withSecondsRemoved();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(chronology29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) 1, (long) ' ', periodType24, chronology29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra(2);
        long long38 = chronology29.set((org.joda.time.ReadablePartial) localDateTime34, (long) (short) 10);
        java.lang.String str39 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField40 = chronology29.millisOfSecond();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = dateTimeField40.getAsText(3240000L, locale42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter20.withLocale(locale42);
        boolean boolean46 = dateTimeFormatter45.isPrinter();
        java.lang.StringBuffer stringBuffer47 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter45.printTo(stringBuffer47, 1645514337483L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+35:00" + "'", str10, "+35:00");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514153208L + "'", long14 == 1645514153208L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514178829L + "'", long38 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[+35:00]" + "'", str39, "ISOChronology[+35:00]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ja" + "'", str43, "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime0.toDateTime(chronology7);
        java.util.Date date9 = dateTime0.toDate();
        int int10 = date9.getTimezoneOffset();
        java.lang.String str11 = date9.toGMTString();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 21:51:18 GMT+14:34 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-874) + "'", int10 == (-874));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22 Feb 2022 07:16:18 GMT" + "'", str11, "22 Feb 2022 07:16:18 GMT");
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2074-04-17T01:38:08.119+35:00/2074-04-17T01:38:08.119+35:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2074-04-17t01:38:08.119+35:00/2074-04-17t01:38:08.119+35:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTime dateTime8 = dateTime2.toDateTime(chronology6);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableInterval9.setDurationBeforeEnd(readableDuration10);
        org.joda.time.Duration duration12 = mutableInterval9.toDuration();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = mutableInterval9.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#');
        int int25 = period23.getValue(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration29 = period23.toDurationTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        long long35 = chronology30.add(1645514177812L, (long) 100, (int) 'x');
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        int int39 = period37.getValue(0);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        int int41 = period37.get(durationFieldType40);
        int int42 = period37.getDays();
        org.joda.time.Minutes minutes43 = period37.toStandardMinutes();
        int[] intArray45 = chronology30.get((org.joda.time.ReadablePeriod) minutes43, 54L);
        org.joda.time.DateTimeField dateTimeField46 = chronology30.era();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeUtils.getZone(dateTimeZone48);
        java.lang.String str51 = dateTimeZone49.getName((long) ' ');
        java.lang.String str53 = dateTimeZone49.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(0L, dateTimeZone49);
        long long57 = dateTimeZone49.adjustOffset(1645514153208L, false);
        long long59 = dateTimeZone49.convertUTCToLocal((long) (short) 100);
        boolean boolean60 = dateTimeZone49.isFixed();
        org.joda.time.Chronology chronology61 = chronology30.withZone(dateTimeZone49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) property18, dateTimeZone49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514189812L + "'", long35 == 1645514189812L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+35:00" + "'", str51, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+35:00" + "'", str53, "+35:00");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514153208L + "'", long57 == 1645514153208L);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 126000100L + "'", long59 == 126000100L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) ' ', dateTimeZone1);
        int int3 = dateTime2.getYearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.MutableInterval mutableInterval7 = interval6.toMutableInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationFrom(readableInstant14);
        org.joda.time.Seconds seconds16 = duration15.toStandardSeconds();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) 32772, (int) (byte) 10);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(10L, chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        int int26 = dateTime24.get(dateTimeFieldType25);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        int int30 = period28.getValue(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration34 = period28.toDurationTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) period28);
        mutableInterval35.setStartMillis((long) (short) 0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.hourOfHalfday();
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(chronology42);
        org.joda.time.DateTime.Property property45 = dateTime38.monthOfYear();
        boolean boolean46 = mutableInterval35.contains((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getChronology(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.DateTime dateTime58 = dateTime52.toDateTime(chronology56);
        org.joda.time.Period period59 = new org.joda.time.Period((long) 1, (long) ' ', periodType51, chronology56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withCenturyOfEra(2);
        long long65 = chronology56.set((org.joda.time.ReadablePartial) localDateTime61, (long) (short) 10);
        java.lang.String str66 = chronology56.toString();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 26151451, chronology56);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) period67);
        org.joda.time.Period period70 = org.joda.time.Period.millis(814);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property72 = dateTime71.millisOfDay();
        org.joda.time.DateTime dateTime73 = dateTime71.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime75 = dateTime71.minusDays(12);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period70, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean77 = mutableInterval68.isBefore((org.joda.time.ReadableInterval) mutableInterval76);
        boolean boolean78 = duration19.equals((java.lang.Object) mutableInterval76);
        long long79 = mutableInterval76.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(mutableInterval7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1096 + "'", int11 == 1096);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645514178829L + "'", long65 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+35:00]" + "'", str66, "ISOChronology[+35:00]");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 814L + "'", long79 == 814L);
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(chronology9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) ' ', periodType4, chronology9);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 795, chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.millisOfSecond();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(100);
        int int3 = localDate0.getEra();
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        int int4 = dateTimeField2.getLeapAmount((long) 26151451);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int7 = dateTimeField2.getMaximumShortTextLength(locale6);
        boolean boolean8 = dateTimeField2.isLenient();
        long long11 = dateTimeField2.getDifferenceAsLong((long) 1970, 1645514170416L);
        int int13 = dateTimeField2.get(1645514208878L);
        long long15 = dateTimeField2.roundCeiling((long) 18);
        java.lang.String str16 = dateTimeField2.getName();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-457087L) + "'", long11 == (-457087L));
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3600000L + "'", long15 == 3600000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hourOfHalfday" + "'", str16, "hourOfHalfday");
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(59, 26184703, 366, 52459, 26181277);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52459 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime8.getMinuteOfDay();
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime8.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime8.minus((long) 10);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DateTime dateTime25 = dateTime19.toDateTime(chronology23);
        org.joda.time.DateTime.Property property26 = dateTime19.monthOfYear();
        int int27 = dateTime19.getSecondOfDay();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.days();
        org.joda.time.Period period32 = new org.joda.time.Period(22560257L, 1645514161708L, periodType31);
        org.joda.time.PeriodType periodType33 = periodType31.withHoursRemoved();
        org.joda.time.Period period34 = interval28.toPeriod(periodType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = new org.joda.time.Period(7576734, 52666, 26301292, 968, 52435277, 237, 52503850, 32071607, periodType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1096 + "'", int11 == 1096);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 65778 + "'", int27 == 65778);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period4 = period3.negated();
        org.joda.time.Period period6 = period3.withDays(38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval((java.lang.Object) period6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.withFields(readablePartial3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology6);
        int int8 = localTime7.getSecondOfMinute();
        org.joda.time.Period period9 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime7);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Period period11 = period9.plus(readablePeriod10);
        org.joda.time.Period period12 = period11.negated();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime13, (org.joda.time.ReadablePartial) localTime14, periodType15);
        org.joda.time.Period period17 = period12.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Weeks weeks18 = period12.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType20 = weeks18.getFieldType(363);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 363");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(weeks18);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (-1), chronology1);
        org.joda.time.Period period4 = period2.plusWeeks(86399999);
        org.joda.time.Period period6 = period2.multipliedBy(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType8 = period6.getFieldType(453);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.lang.String str5 = localDate2.toString("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", locale4);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str5, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime4 = dateTime0.minusDays(12);
        org.joda.time.DateTime dateTime6 = dateTime4.minusYears(382);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.withField(dateTimeFieldType7, 21);
        org.joda.time.Duration duration11 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.Period period16 = duration11.toPeriod(chronology13);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        boolean boolean19 = dateTimeFieldType7.isSupported(chronology18);
        org.joda.time.DurationField durationField20 = chronology18.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = durationField20.getMillis(1645514364980L, 1645514306L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(382);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = durationFieldType6.getField(chronology8);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTime(chronology19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 1, (long) ' ', periodType14, chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra(2);
        long long28 = chronology19.set((org.joda.time.ReadablePartial) localDateTime24, (long) (short) 10);
        org.joda.time.DurationField durationField29 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField30 = chronology19.millisOfDay();
        boolean boolean31 = durationFieldType6.isSupported(chronology19);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime4.withFieldAdded(durationFieldType6, 253);
        org.joda.time.DateTime dateTime34 = localDateTime4.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = localDateTime4.getValue(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1439");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514178829L + "'", long28 == 1645514178829L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = locale20.getDisplayScript();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        int int26 = dateTimeField24.getLeapAmount((long) 26151451);
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int29 = dateTimeField24.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale20.getDisplayCountry(locale28);
        java.lang.String str31 = locale20.getISO3Language();
        java.lang.String str32 = locale20.getDisplayName();
        java.util.Calendar calendar33 = dateTime17.toCalendar(locale20);
        calendar33.add((int) (short) 10, 13);
        java.util.Date date43 = new java.util.Date(12, 100, (-292275054), (-1), 436, (int) '#');
        int int44 = date43.getDay();
        int int45 = date43.getSeconds();
        int int46 = date43.getMonth();
        calendar33.setTime(date43);
        boolean boolean48 = calendar33.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = calendar33.getActualMaximum(49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str32, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-25254131127504944,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=798287,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=307,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=41,SECOND=35,MILLISECOND=56,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Wed Nov 04 06:16:35 GMT+14:34 798287");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        int int11 = dateTime9.getDayOfYear();
        boolean boolean12 = interval2.contains((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period13 = interval2.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54 + "'", int11 == 54);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("07:16:08.152");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"07:16:08.152\" is malformed at \":16:08.152\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-756393));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withFieldAdded(durationFieldType3, 1970);
        int int6 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusSeconds(26171);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        java.lang.String str17 = dateTimeZone15.getName((long) ' ');
        java.lang.String str19 = dateTimeZone15.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone15);
        java.lang.String str23 = dateTimeZone15.getNameKey(1645514153208L);
        org.joda.time.DateTime dateTime24 = localDateTime5.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(1645514161708L, dateTimeZone15);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate30 = localDate26.minusMonths(7);
        org.joda.time.LocalDate.Property property31 = localDate30.centuryOfEra();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.withWeekyear(1);
        org.joda.time.LocalDate.Property property35 = localDate32.year();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.withWeekyear(1);
        int int39 = localDate38.getCenturyOfEra();
        org.joda.time.LocalDate localDate41 = localDate38.plusDays((int) '#');
        int int42 = localDate32.compareTo((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.LocalDate.Property property43 = localDate32.monthOfYear();
        org.joda.time.LocalDate localDate45 = localDate32.plusWeeks(26198934);
        org.joda.time.LocalDate localDate46 = localDate30.withFields((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Interval interval48 = localDate32.toInterval(dateTimeZone47);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDate32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+35:00" + "'", str17, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+35:00" + "'", str19, "+35:00");
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(interval48);
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone5);
        boolean boolean8 = dateTimeZone6.equals((java.lang.Object) 1645514161708L);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtStartOfDay(dateTimeZone6);
        java.util.GregorianCalendar gregorianCalendar10 = dateTime9.toGregorianCalendar();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        int int13 = period12.getMonths();
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.minusHours((int) 'a');
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime8 = dateTime5.withYear(38222);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTime dateTime17 = dateTime11.toDateTime(chronology15);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((long) 7, (long) (short) 100, chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime8.toMutableDateTime(chronology15);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period26 = period24.minusHours(26155103);
        int[] intArray29 = chronology15.get((org.joda.time.ReadablePeriod) period26, 1645514177012L, (long) 21);
        org.joda.time.DateTimeField dateTimeField30 = chronology15.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology15.halfdayOfDay();
        int int34 = dateTimeField32.get(3291028464798L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-52, -1, -3, 0, -7, -16, -16, -991]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.clear();
        calendar1.clear();
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.lang.String str12 = locale10.toLanguageTag();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.lang.String str14 = locale10.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = calendar1.getDisplayName(10074, 13, locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514426661L + "'", long2 == 1645514426661L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ja-JP" + "'", str12, "ja-JP");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u65e5\u672c" + "'", str13, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str14, "\u65e5\u672c\u8a9e");
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.addWrapFieldToCopy((int) (byte) 0);
        java.util.Date date7 = localDate6.toDate();
        org.joda.time.LocalDate.Property property8 = localDate6.era();
        org.joda.time.LocalDate.Property property9 = localDate6.year();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Feb 23 00:00:00 GMT+14:34 2022");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        int int3 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate5 = localDate2.plusDays((int) '#');
        org.joda.time.LocalDate localDate7 = localDate2.minusWeeks(914);
        org.joda.time.LocalDate.Property property8 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate10 = property8.addToCopy(1692);
        org.joda.time.DateMidnight dateMidnight11 = localDate10.toDateMidnight();
        boolean boolean12 = dateMidnight11.isBeforeNow();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        int int8 = dateTime0.getYear();
        org.joda.time.DateTime dateTime10 = dateTime0.plusYears(14);
        org.joda.time.DateTime.Property property11 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime12 = property11.withMinimumValue();
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        int int16 = period14.getValue(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Days days21 = duration20.toStandardDays();
        org.joda.time.DateTime dateTime22 = dateTime12.plus((org.joda.time.ReadableDuration) duration20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime12.withMillisOfSecond(2456);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2456 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        org.joda.time.DateTime dateTime6 = dateTime0.toDateTime(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.millis();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.weekyear();
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField11 = chronology4.era();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now(chronology2);
        org.joda.time.DurationField durationField5 = chronology2.years();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType0.getField(chronology2);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withCenturyOfEra(100);
        int int11 = localDate8.getMonthOfYear();
        boolean boolean12 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDate8.getFieldTypes();
        org.joda.time.LocalDate.Property property14 = localDate8.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DurationField durationField18 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withFieldAdded(durationFieldType22, 1970);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Interval interval31 = interval29.toInterval();
        long long32 = interval29.getEndMillis();
        java.lang.String str33 = interval29.toString();
        org.joda.time.DateTime dateTime34 = interval29.getStart();
        org.joda.time.Chronology chronology35 = interval29.getChronology();
        org.joda.time.Period period36 = new org.joda.time.Period(0L, 1645514152681L, chronology35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusDays(100);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        java.lang.String str43 = interval42.toString();
        org.joda.time.DateTime dateTime44 = interval42.getEnd();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        long long52 = duration51.getMillis();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus((org.joda.time.ReadableDuration) duration51);
        boolean boolean54 = interval42.equals((java.lang.Object) duration51);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = interval57.isAfter((long) 10);
        org.joda.time.Interval interval60 = interval42.overlap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.months();
        org.joda.time.Period period62 = interval42.toPeriod(periodType61);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType64 = periodType63.withMillisRemoved();
        org.joda.time.Period period65 = interval42.toPeriod(periodType64);
        int[] intArray66 = period65.getValues();
        int int67 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37, intArray66);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField7.add((org.joda.time.ReadablePartial) localDate8, 2111, intArray66, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2111");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645514178829L + "'", long32 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str33, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str43, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(0, 3940, 5884398, (-213), 52670823);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -213 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime(chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) ' ', periodType3, chronology8);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(2);
        long long17 = chronology8.set((org.joda.time.ReadablePartial) localDateTime13, (long) (short) 10);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 10, 0L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTime dateTime27 = dateTime21.toDateTime(chronology25);
        org.joda.time.Period period28 = duration20.toPeriod(chronology25);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.year();
        java.lang.String str32 = property31.getName();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime34 = property31.withMaximumValue();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514178829L + "'", long17 == 1645514178829L);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "year" + "'", str32, "year");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String str52 = dateFormatSymbols51.getLocalPatternChars();
        java.lang.String[][] strArray53 = dateFormatSymbols51.getZoneStrings();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getChronology(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.DurationField durationField58 = durationFieldType54.getField(chronology56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getChronology(chronology59);
        boolean boolean61 = durationFieldType54.isSupported(chronology60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMillisOfDay((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int66 = localDateTime62.get(dateTimeFieldType65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.withYear((int) '4');
        boolean boolean69 = dateFormatSymbols51.equals((java.lang.Object) localDateTime68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime68.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMinuteOfHour(38);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeUtils.getZone(dateTimeZone73);
        java.lang.String str76 = dateTimeZone74.getName((long) ' ');
        java.lang.String str77 = dateTimeZone74.toString();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (byte) 0);
        boolean boolean80 = dateTimeZone74.isLocalDateTimeGap(localDateTime79);
        long long82 = dateTimeZone74.nextTransition(1645514181870L);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime72, dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime72.minusYears(52678278);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1096 + "'", int6 == 1096);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1096 + "'", int30 == 1096);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str52, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 829 + "'", int66 == 829);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+35:00" + "'", str76, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+35:00" + "'", str77, "+35:00");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645514181870L + "'", long82 == 1645514181870L);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property7 = localDate4.yearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate4.dayOfWeek();
        boolean boolean9 = property8.isLeap();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plus((org.joda.time.ReadableDuration) duration7);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration11 = mutableInterval0.toDuration();
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableInterval0.contains(readableInstant12);
        org.joda.time.DateTime dateTime14 = mutableInterval0.getStart();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        int int2 = date1.getYear();
        java.lang.String str3 = date1.toGMTString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(10L, chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.minus(100L);
        int int9 = dateTime8.getYear();
        org.joda.time.DateTime dateTime10 = dateTime8.toDateTime();
        java.util.Date date11 = dateTime8.toDate();
        boolean boolean12 = date1.before(date11);
        date11.setSeconds(11);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Wed Feb 23 00:00:00 GMT+14:34 2022");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 122 + "'", int2 == 122);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "22 Feb 2022 09:25:00 GMT" + "'", str3, "22 Feb 2022 09:25:00 GMT");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 14:34:11 GMT+14:34 1970");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(2782);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (-1), chronology12);
        org.joda.time.Period period14 = period13.toPeriod();
        int int15 = period14.size();
        int int16 = period14.getMinutes();
        int[] intArray17 = period14.getValues();
        org.joda.time.Duration duration18 = period14.toStandardDuration();
        org.joda.time.LocalTime localTime20 = localTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period25 = period24.negated();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (-1), chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period30 = period25.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        boolean boolean32 = period25.isSupported(durationFieldType31);
        org.joda.time.Period period34 = period25.withDays((int) (short) 0);
        org.joda.time.LocalTime localTime35 = localTime8.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalTime.Property property36 = localTime8.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int38 = localTime8.indexOf(dateTimeFieldType37);
        org.joda.time.LocalTime.Property property39 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime41 = localTime8.plusHours(0);
        java.lang.String str42 = localTime41.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "18:59:18.829" + "'", str42, "18:59:18.829");
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        int int6 = dateTime3.getMinuteOfDay();
        int int7 = dateTime3.getYearOfCentury();
        int int8 = dateTime3.getDayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime3.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks((int) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        long long21 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plus((org.joda.time.ReadableDuration) duration20);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime16, (int) (short) 1, locale24);
        int int26 = dateTimeField2.getMaximumTextLength(locale24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        int int31 = dateTime27.getYearOfCentury();
        int int32 = dateTime27.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime27.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusWeeks((int) (byte) 10);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plus((org.joda.time.ReadableDuration) duration44);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str49 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime40, (int) (short) 1, locale48);
        java.lang.String str50 = locale24.getDisplayLanguage(locale48);
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale24);
        java.lang.String[] strArray53 = java.util.TimeZone.getAvailableIDs((int) '#');
        dateFormatSymbols51.setAmPmStrings(strArray53);
        java.lang.String[] strArray56 = java.util.TimeZone.getAvailableIDs(26171181);
        dateFormatSymbols51.setWeekdays(strArray56);
        java.lang.String[] strArray58 = dateFormatSymbols51.getShortMonths();
        java.text.DateFormatSymbols dateFormatSymbols59 = new java.text.DateFormatSymbols();
        java.lang.String[] strArray60 = java.util.Locale.getISOLanguages();
        dateFormatSymbols59.setAmPmStrings(strArray60);
        dateFormatSymbols51.setShortMonths(strArray60);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1096 + "'", int6 == 1096);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 35L + "'", long21 == 35L);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1096 + "'", int30 == 1096);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1439 + "'", int37 == 1439);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Interval interval6 = interval4.withStartMillis((long) (short) 1);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTime dateTime8 = interval6.getEnd();
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.lang.String str9 = dateTimeField2.getAsShortText(26153877, locale8);
        long long11 = dateTimeField2.roundFloor((long) 1439);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(3);
        int int15 = localDateTime14.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.property(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis(16);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime22.getMinuteOfDay();
        int int26 = dateTime22.getYearOfCentury();
        int int27 = dateTime22.getDayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime22.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        int int32 = dateTimeField31.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks((int) (byte) 10);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = period37.toDurationFrom(readableInstant38);
        long long40 = duration39.getMillis();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plus((org.joda.time.ReadableDuration) duration39);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime35, (int) (short) 1, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = locale43.getDisplayLanguage(locale45);
        java.lang.String str47 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale45);
        java.lang.String str48 = locale45.getCountry();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6" + "'", str6, "6");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "26153877" + "'", str9, "26153877");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54 + "'", int15 == 54);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1096 + "'", int25 == 1096);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1439 + "'", int32 == 1439);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35L + "'", long40 == 35L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str46, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JP" + "'", str48, "JP");
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.Period period3 = period1.normalizedStandard(periodType2);
        org.joda.time.PeriodType periodType4 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withYearsRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (-1), chronology7);
        org.joda.time.Period period9 = period8.toPeriod();
        int int10 = period9.size();
        int int11 = period9.getMinutes();
        int[] intArray12 = period9.getValues();
        org.joda.time.Period period14 = period9.withMonths(26155103);
        org.joda.time.Period period16 = period14.minusDays((-292275054));
        int int17 = period14.getHours();
        org.joda.time.Period period19 = period14.withMinutes(914);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = durationFieldType20.getField(chronology22);
        boolean boolean25 = period14.isSupported(durationFieldType20);
        boolean boolean26 = periodType4.isSupported(durationFieldType20);
        java.lang.String str27 = periodType4.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeUtils.getZone(dateTimeZone29);
        java.lang.String str32 = dateTimeZone30.getName((long) ' ');
        java.lang.String str34 = dateTimeZone30.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, dateTimeZone30);
        long long38 = dateTimeZone30.adjustOffset(1645514153208L, false);
        java.lang.String str39 = dateTimeZone30.toString();
        long long43 = dateTimeZone30.convertLocalToUTC(1645514219549L, false, 1645514160000L);
        java.util.TimeZone timeZone44 = dateTimeZone30.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) periodType4, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Days]" + "'", str27, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+35:00" + "'", str32, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+35:00" + "'", str34, "+35:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514153208L + "'", long38 == 1645514153208L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+35:00" + "'", str39, "+35:00");
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645388219549L + "'", long43 == 1645388219549L);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        boolean boolean5 = dateTimeZone3.equals((java.lang.Object) 1645514161708L);
        long long8 = dateTimeZone3.convertLocalToUTC((long) 26184703, false);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval10 = new org.joda.time.Interval(1645514304196L, (long) 2178, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-99815297L) + "'", long8 == (-99815297L));
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        java.lang.String str6 = dateTimeZone4.getName((long) ' ');
        java.lang.String str8 = dateTimeZone4.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, dateTimeZone4);
        long long12 = dateTimeZone4.adjustOffset(1645514153208L, false);
        java.lang.String str13 = dateTimeZone4.toString();
        long long15 = dateTimeZone4.previousTransition((long) 4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval16 = new org.joda.time.Interval(4936542894480L, (long) 474, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+35:00" + "'", str6, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+35:00" + "'", str8, "+35:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514153208L + "'", long12 == 1645514153208L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4L + "'", long15 == 4L);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        int int6 = period4.getValue(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration10 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.years();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getChronology(chronology11);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withFieldAdded(durationFieldType18, 1970);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Interval interval27 = interval25.toInterval();
        long long28 = interval25.getEndMillis();
        java.lang.String str29 = interval25.toString();
        org.joda.time.DateTime dateTime30 = interval25.getStart();
        org.joda.time.Chronology chronology31 = interval25.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period(0L, 1645514152681L, chronology31);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusDays(100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withEra((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localDateTime40.getFieldType((int) (short) 1);
        int int43 = localDateTime39.get(dateTimeFieldType42);
        java.lang.String str44 = dateTimeFieldType42.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localTime15.get(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514178829L + "'", long28 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str29, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "monthOfYear" + "'", str44, "monthOfYear");
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        java.lang.String str5 = durationField4.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        int int13 = dateTime9.getYearOfCentury();
        int int14 = dateTime9.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime9.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        int int19 = dateTimeField18.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks((int) (byte) 10);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = period24.toDurationFrom(readableInstant25);
        long long27 = duration26.getMillis();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plus((org.joda.time.ReadableDuration) duration26);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime22, (int) (short) 1, locale30);
        int int32 = dateTimeField8.getMaximumTextLength(locale30);
        org.joda.time.DurationField durationField33 = dateTimeField8.getRangeDurationField();
        long long36 = durationField33.getValueAsLong(1645514219549L, (long) 1969);
        int int37 = durationField4.compareTo(durationField33);
        long long40 = durationField33.getValueAsLong(1645514297304L, (long) 52435277);
        org.joda.time.DurationFieldType durationFieldType41 = durationField33.getType();
        int int44 = durationField33.getDifference(4936542869593L, (long) (short) 1);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DurationField[hours]" + "'", str5, "DurationField[hours]");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1096 + "'", int12 == 1096);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 23 + "'", int14 == 23);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1439 + "'", int19 == 1439);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35L + "'", long27 == 35L);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 38090L + "'", long36 == 38090L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 38090L + "'", long40 == 38090L);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 114271 + "'", int44 == 114271);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(505, 423, (int) (short) 10, 363, 52499240, 1439, 457087);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 363 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        int int4 = calendar1.getGreatestMinimum(6);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        boolean boolean8 = calendar1.before((java.lang.Object) periodType6);
        long long9 = calendar1.getTimeInMillis();
        boolean boolean10 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514427752,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=27,MILLISECOND=696,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514427752L + "'", long2 == 1645514427752L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514427752L + "'", long9 == 1645514427752L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        org.joda.time.LocalDate.Property property3 = localDate0.year();
        org.joda.time.LocalDate localDate4 = property3.getLocalDate();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(26228346);
        org.joda.time.LocalDate localDate10 = localDate6.minusMonths(968);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime11.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.toDateTime(chronology18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        int int24 = localTime21.getMillisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        boolean boolean30 = localTime21.equals((java.lang.Object) dateTimeFieldType28);
        int int31 = dateTime11.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime33 = dateTime11.minusYears((int) 'a');
        org.joda.time.DateTime.Property property34 = dateTime33.monthOfYear();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property34.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = localDate10.withField(dateTimeFieldType36, 125);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 125 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1096 + "'", int14 == 1096);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 65778829 + "'", int24 == 65778829);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        java.util.Date date5 = new java.util.Date((int) '4', 32772, (int) (short) -1, 8, 14);
        int int6 = date5.getYear();
        long long7 = date5.getTime();
        date5.setSeconds(437);
        long long10 = date5.getTime();
        date5.setDate((int) (byte) 100);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.minusMonths(26165);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        int int21 = period19.getValue(0);
        org.joda.time.Period period22 = period19.normalizedStandard();
        org.joda.time.Period period24 = period19.plusSeconds((int) ' ');
        org.joda.time.DateTime dateTime25 = dateTime17.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime27 = dateTime17.withYearOfCentury(34);
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale28.getDisplayScript();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        int int34 = dateTimeField32.getLeapAmount((long) 26151451);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int37 = dateTimeField32.getMaximumShortTextLength(locale36);
        java.lang.String str38 = locale28.getDisplayCountry(locale36);
        java.lang.String str39 = locale28.toLanguageTag();
        java.util.Set<java.lang.String> strSet40 = locale28.getUnicodeLocaleAttributes();
        java.util.Calendar calendar41 = dateTime27.toCalendar(locale28);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.millisOfDay();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(10L, chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        int int53 = dateTime51.get(dateTimeFieldType52);
        int int54 = dateTime45.get(dateTimeFieldType52);
        boolean boolean55 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property56 = dateTime45.weekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeUtils.getZone(dateTimeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) dateTime45, dateTimeZone58);
        boolean boolean60 = dateTimeZone58.isFixed();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(3786912000000L, dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime27.withZone(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone58);
        boolean boolean64 = date5.equals((java.lang.Object) dateTimeZone58);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Mar 10 08:21:17 GMT+14:34 4683");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2782 + "'", int6 == 2782);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 85613823540056L + "'", long7 == 85613823540056L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 85613823977056L + "'", long10 == 85613823977056L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "China" + "'", str38, "China");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-CN" + "'", str39, "zh-CN");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-66372972221171,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=135,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=268,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=18,MILLISECOND=829,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1096 + "'", int48 == 1096);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setLanguage("");
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguageTag("Property[yearOfCentury]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Property[yearOfCentury] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str6, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("26226216");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        int int6 = period4.getValue(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration10 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime8);
        int int12 = dateTime8.getWeekOfWeekyear();
        boolean boolean14 = dateTime8.isAfter((long) 51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime8.withEra(2178);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2178 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("zh_TW");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        int int6 = dateTime2.getYearOfCentury();
        int int7 = dateTime2.getDayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime2.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        int int12 = dateTimeField11.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusWeeks((int) (byte) 10);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        long long20 = duration19.getMillis();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plus((org.joda.time.ReadableDuration) duration19);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str24 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime15, (int) (short) 1, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = locale23.getDisplayLanguage(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone1, locale25);
        int int28 = timeZone1.getRawOffset();
        int int30 = timeZone1.getOffset(1645514154223L);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime31.getMinuteOfDay();
        int int35 = dateTime31.getYearOfCentury();
        int int36 = dateTime31.getDayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime31.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        int int41 = dateTimeField40.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusWeeks((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = period46.toDurationFrom(readableInstant47);
        long long49 = duration48.getMillis();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plus((org.joda.time.ReadableDuration) duration48);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str53 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime44, (int) (short) 1, locale52);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale52.getDisplayLanguage(locale54);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone1, locale52);
        timeZone1.setRawOffset(0);
        boolean boolean59 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1439 + "'", int12 == 1439);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 35L + "'", long20 == 35L);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str26, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514427912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=27,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1096 + "'", int34 == 1096);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1439 + "'", int41 == 1439);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 35L + "'", long49 == 35L);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str55, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645514427912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=27,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone60);
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withWeekyear(1);
        int int3 = localDate2.getCenturyOfEra();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate localDate6 = localDate2.plusDays(348);
        int int7 = localDate6.getYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        org.joda.time.Period period1 = org.joda.time.Period.days(597);
        org.joda.time.Period period3 = period1.withDays(57);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime6.plusHours((int) (byte) 100);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.text.DateFormatSymbols dateFormatSymbols11 = new java.text.DateFormatSymbols(locale10);
        java.util.Calendar calendar12 = dateTime6.toCalendar(locale10);
        java.time.Instant instant13 = calendar12.toInstant();
        java.lang.String str14 = calendar12.getCalendarType();
        int int15 = calendar12.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1144007931600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=38222,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=0,DAY_OF_MONTH=3,DAY_OF_YEAR=62,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = org.joda.time.Period.years(10);
        org.joda.time.LocalTime localTime7 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localTime7.getValue(26300051);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26300051");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.lang.String str4 = property1.getAsText(locale2);
        org.joda.time.DateTime dateTime5 = property1.withMinimumValue();
        org.joda.time.DateTime dateTime7 = property1.setCopy((int) 'a');
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(10);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = localTime10.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.LocalTime localTime14 = localTime12.withFields(readablePartial13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology16);
        int int18 = localTime17.getSecondOfMinute();
        org.joda.time.Period period19 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime12, (org.joda.time.ReadablePartial) localTime17);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Period period21 = period19.plus(readablePeriod20);
        org.joda.time.Period period22 = period21.negated();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.Period period27 = period22.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime29 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 52458322);
        org.joda.time.Duration duration30 = period26.toStandardDuration();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(charSet3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "65778829" + "'", str4, "65778829");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration30);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays((int) (byte) 10);
        int int5 = localDate2.getYearOfEra();
        int int6 = localDate2.getYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (-1), chronology8);
        org.joda.time.Period period10 = period9.toPeriod();
        org.joda.time.Period period11 = period9.toPeriod();
        org.joda.time.Period period13 = period9.plusMillis((int) (byte) 1);
        org.joda.time.LocalDate localDate15 = localDate2.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 52435277);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField17 = localDate2.getField(76181);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 76181");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 38222 + "'", int5 == 38222);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 38222 + "'", int6 == 38222);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) ' ', dateTimeZone1);
        int int3 = dateTime2.getYearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime2.toYearMonthDay();
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(locale9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        int int15 = dateTimeField13.getLeapAmount((long) 26151451);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        int int18 = dateTimeField13.getMaximumShortTextLength(locale17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime22.getMinuteOfDay();
        int int26 = dateTime22.getYearOfCentury();
        int int27 = dateTime22.getDayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime22.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        int int32 = dateTimeField31.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusWeeks((int) (byte) 10);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = period37.toDurationFrom(readableInstant38);
        long long40 = duration39.getMillis();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plus((org.joda.time.ReadableDuration) duration39);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime35, (int) (short) 1, locale43);
        int int45 = dateTimeField21.getMaximumTextLength(locale43);
        java.lang.String str46 = locale17.getDisplayLanguage(locale43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime50.getMinuteOfDay();
        int int54 = dateTime50.getYearOfCentury();
        int int55 = dateTime50.getDayOfMonth();
        org.joda.time.DateTime dateTime57 = dateTime50.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property58 = dateTime57.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        int int60 = dateTimeField59.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusWeeks((int) (byte) 10);
        org.joda.time.Period period65 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Duration duration67 = period65.toDurationFrom(readableInstant66);
        long long68 = duration67.getMillis();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.plus((org.joda.time.ReadableDuration) duration67);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str72 = dateTimeField59.getAsText((org.joda.time.ReadablePartial) localDateTime63, (int) (short) 1, locale71);
        int int73 = dateTimeField49.getMaximumTextLength(locale71);
        java.lang.String str74 = locale17.getDisplayLanguage(locale71);
        java.text.DateFormatSymbols dateFormatSymbols75 = java.text.DateFormatSymbols.getInstance(locale71);
        java.lang.String str76 = locale9.getDisplayCountry(locale71);
        // The following exception was thrown during execution in test generation
        try {
            long long77 = dateTimeField6.set(175680425711L, "2074-04-15T14:37:47.926Z/2074-04-15T14:37:47.926Z", locale71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2074-04-15T14:37:47.926Z/2074-04-15T14:37:47.926Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1096 + "'", int25 == 1096);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1439 + "'", int32 == 1439);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 35L + "'", long40 == 35L);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1096 + "'", int53 == 1096);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1439 + "'", int60 == 1439);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 35L + "'", long68 == 35L);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u52a0\u62ff\u5927" + "'", str76, "\u52a0\u62ff\u5927");
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = dateTime0.withMonthOfYear(459153);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 459153 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) 'x', 534, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 534 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = chronology2.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.halfdayOfDay();
        org.joda.time.DurationField durationField7 = chronology2.weekyears();
        long long10 = durationField7.getMillis((long) 639, 3291028439670L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 20164636800000L + "'", long10 == 20164636800000L);
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        int int5 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime0.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plus((org.joda.time.ReadableDuration) duration17);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime13, (int) (short) 1, locale21);
        org.joda.time.DurationField durationField23 = dateTimeField9.getDurationField();
        long long25 = dateTimeField9.roundHalfFloor((long) (-292275054));
        org.joda.time.DurationField durationField26 = dateTimeField9.getDurationField();
        long long29 = durationField26.getMillis(52502315, (long) 32073097);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1439 + "'", int10 == 1439);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 35L + "'", long18 == 35L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-292260000L) + "'", long25 == (-292260000L));
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3150138900000L + "'", long29 == 3150138900000L);
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.Period period5 = new org.joda.time.Period(22560257L, 1645514161708L, periodType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getChronology(chronology6);
        org.joda.time.DurationField durationField8 = chronology7.years();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 26178, periodType4, chronology7);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(0L, chronology7);
        java.lang.String str11 = localDate10.toString();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-02" + "'", str11, "1970-01-02");
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        java.util.Date date1 = new java.util.Date((long) (-1));
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromDateFields(date1);
        int int3 = localDate2.size();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 14:34:59 GMT+14:34 1970");
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.plusWeeks((int) (byte) 1);
        int int5 = property1.compareTo((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeUtils.getZone(dateTimeZone20);
        java.lang.String str23 = dateTimeZone21.getName((long) ' ');
        org.joda.time.DateTime dateTime24 = dateTime18.toDateTime(dateTimeZone21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime33 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        int int37 = period35.getValue(0);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration41 = period35.toDurationTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury();
        long long47 = chronology42.add(1645514177812L, (long) 100, (int) 'x');
        org.joda.time.Interval interval48 = new org.joda.time.Interval(1645514178053L, 1645514178289L, chronology42);
        org.joda.time.DateTime dateTime49 = dateTime24.withChronology(chronology42);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.Interval interval55 = interval53.toInterval();
        long long56 = interval53.getEndMillis();
        java.lang.String str57 = interval53.toString();
        org.joda.time.DateTime dateTime58 = interval53.getStart();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeUtils.getZone(dateTimeZone59);
        java.lang.String str62 = dateTimeZone60.getName((long) ' ');
        java.lang.String str64 = dateTimeZone60.getName((long) (short) -1);
        org.joda.time.DateTime dateTime65 = dateTime58.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(1645514182943L, dateTimeZone60);
        long long68 = dateTimeZone60.convertUTCToLocal((-292260000L));
        int int70 = dateTimeZone60.getOffset(1645514201717L);
        long long74 = dateTimeZone60.convertLocalToUTC((long) 30864, false, (long) 26184703);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime49.toMutableDateTime(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.plusMonths(10);
        org.joda.time.LocalDateTime.Property property81 = localDateTime76.dayOfYear();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime76.plusMonths((-436));
        org.joda.time.Period period85 = new org.joda.time.Period((long) '#');
        int int87 = period85.getValue(0);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime88, (org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Duration duration91 = period85.toDurationTo((org.joda.time.ReadableInstant) dateTime89);
        int int92 = period85.getMinutes();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime76.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.MutableInterval mutableInterval94 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadablePeriod) period85);
        org.joda.time.DateTimeZone dateTimeZone95 = null;
        org.joda.time.DateTime dateTime96 = dateTime49.toDateTime(dateTimeZone95);
        int int97 = dateTime49.getDayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+35:00" + "'", str23, "+35:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514189812L + "'", long47 == 1645514189812L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645514178829L + "'", long56 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str57, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+35:00" + "'", str62, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+35:00" + "'", str64, "+35:00");
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-166260000L) + "'", long68 == (-166260000L));
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 126000000 + "'", int70 == 126000000);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-125969136L) + "'", long74 == (-125969136L));
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(dateTime96);
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + 61 + "'", int97 == 61);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) ' ');
        java.lang.String str11 = dateTimeZone7.getName((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, dateTimeZone7);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone7);
        java.lang.String str15 = dateTimeZone7.getNameKey(1645514153208L);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(3291028443775L, dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+35:00" + "'", str9, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Set<java.lang.String> strSet8 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Set<java.lang.String> strSet13 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet13);
        java.util.Collection<java.util.Locale> localeCollection15 = null;
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, localeCollection15, filteringMode16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap18);
        java.lang.String[] strArray64 = new java.lang.String[] { "2022-02-22T07:16:19.913Z/2022-02-22T07:16:19.913Z", "zh-TW", "ja_JP", "1", "2022-02-22T07:16:02.139Z/2022-02-22T07:16:02.139Z", "DurationField[hours]", "minuteOfHour", "2022-02-22T07:15:55.811Z/2022-02-22T07:15:55.811Z", "2022-02-22T07:16:02.139Z/2022-02-22T07:16:02.139Z", "26161962", "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z", "fr", "2022-02-22T07:16:05.197Z/2022-02-22T07:16:05.197Z", "zh-CN", "1970", "hi!", "PT0S", "2022-02-22T07:15:53.208Z/2022-02-22T07:15:53.208Z", "Wed Nov 04 06:16:35 UTC 798287", "2022-02-22T07:15:55.308Z/2022-02-22T07:15:55.308Z", "1970-01-01T00:00:00.435Z/1970-01-01T00:00:00.435Z", "\u4e2d\u56fd\u8a9e", "4 Nov 798287 06:16:35 GMT", "07:16:24.682", "4 Nov 798287 06:16:35 GMT", "fr", "2022-02-22T07:16:06.372Z/2022-02-22T07:16:06.372Z", "GyMdkHmsSEDFwWahKzZ", "2022-02-22T07:16:09.843Z/2022-02-22T07:16:09.843Z", "PT0S", "2022-02-22T07:16:06.079Z/2022-02-22T07:16:06.079Z", "2022-02-22T07:15:59.642Z/2022-02-22T07:15:59.642Z", "2022-02-22T07:15:51.797Z/2022-02-22T07:15:51.797Z", "\u706b\u66dc\u65e5", "2022-02-22T07:16:23.545Z/2022-02-22T07:16:23.545Z", "DurationField[years]", "2022-02-22T07:16:03.940Z/2022-02-22T07:16:03.940Z", "2022-02-22T07:16:00.256Z/2022-02-22T07:16:00.256Z", "2022-02-22T07:16:15.498Z/2022-02-22T07:16:15.498Z", "2022-02-22T07:16:00.256Z/2022-02-22T07:16:00.256Z", "2021-12-14T07:16:22.352", "2022-02-22T07:16:24.746Z/2022-02-22T07:16:24.746Z", "ja_JP" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.lang.String str67 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList65);
        java.util.Set<java.lang.String> strSet68 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList70 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet68, filteringMode69);
        java.lang.String str71 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList70);
        java.util.Locale.LanguageRange[] languageRangeArray72 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList73 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList73, languageRangeArray72);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Set<java.lang.String> strSet78 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.lang.String>) strSet78);
        java.util.Collection<java.util.Locale> localeCollection80 = null;
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, localeCollection80, filteringMode81);
        java.util.Locale locale83 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, localeCollection80);
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.Set<java.lang.String> strSet87 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, (java.util.Collection<java.lang.String>) strSet87);
        java.util.Collection<java.util.Locale> localeCollection89 = null;
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, localeCollection89, filteringMode90);
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList73, (java.util.Collection<java.util.Locale>) localeList91, filteringMode92);
        java.util.Locale locale94 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(languageRangeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode81.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode92.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNull(locale94);
        org.junit.Assert.assertNotNull(localeList95);
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTime dateTime4 = interval2.getEnd();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        long long12 = duration11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plus((org.joda.time.ReadableDuration) duration11);
        boolean boolean14 = interval2.equals((java.lang.Object) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Interval interval20 = interval2.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        boolean boolean30 = interval2.isBefore((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.Interval interval32 = interval28.withPeriodAfterStart(readablePeriod31);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone("zh_TW");
        java.time.ZoneId zoneId35 = timeZone34.toZoneId();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone(zoneId35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone(zoneId35);
        boolean boolean38 = interval32.equals((java.lang.Object) zoneId35);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Interval interval41 = interval32.withEndMillis(3291028497364L);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime42.getMinuteOfDay();
        int int46 = dateTime42.getYearOfCentury();
        int int47 = dateTime42.getDayOfMonth();
        org.joda.time.DateTime dateTime49 = dateTime42.minusWeeks((int) (short) 0);
        int int50 = dateTime42.getYear();
        org.joda.time.DateTime dateTime52 = dateTime42.plusYears(14);
        int int53 = dateTime42.getMonthOfYear();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime54, (org.joda.time.ReadablePartial) localTime55, periodType56);
        org.joda.time.Period period58 = period57.negated();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (-1), chronology60);
        org.joda.time.Period period62 = period61.toPeriod();
        org.joda.time.Period period63 = period58.withFields((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Days days64 = period61.toStandardDays();
        org.joda.time.DateTime dateTime65 = dateTime42.plus((org.joda.time.ReadablePeriod) days64);
        org.joda.time.DateTime dateTime67 = dateTime42.minusHours(52501800);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval68 = interval32.withEnd((org.joda.time.ReadableInstant) dateTime67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str3, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(zoneId35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1096 + "'", int45 == 1096);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 23 + "'", int47 == 23);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(days64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) 10);
        org.joda.time.Period period13 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusWeeks((int) (byte) 1);
        int int19 = property15.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration28, 26160257);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.minusDays(12);
        org.joda.time.DateTime dateTime38 = dateTime36.minusYears(382);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.withField(dateTimeFieldType39, 21);
        org.joda.time.DateTime dateTime42 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Interval interval49 = interval47.toInterval();
        long long50 = interval47.getEndMillis();
        java.lang.String str51 = interval47.toString();
        org.joda.time.DateTime dateTime52 = interval47.getStart();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeUtils.getZone(dateTimeZone53);
        java.lang.String str56 = dateTimeZone54.getName((long) ' ');
        java.lang.String str58 = dateTimeZone54.getName((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime52.withZoneRetainFields(dateTimeZone54);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(1645514182943L, dateTimeZone54);
        int int61 = dateTime60.getYearOfCentury();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate67 = localDate65.plusDays((int) (byte) 10);
        org.joda.time.Interval interval68 = localDate67.toInterval();
        org.joda.time.MutableInterval mutableInterval69 = interval68.toMutableInterval();
        org.joda.time.Duration duration70 = mutableInterval69.toDuration();
        boolean boolean72 = mutableInterval69.equals((java.lang.Object) "DayTime");
        boolean boolean73 = mutableInterval62.isBefore((org.joda.time.ReadableInterval) mutableInterval69);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property75 = dateTime74.era();
        org.joda.time.DateTime.Property property76 = dateTime74.weekyear();
        org.joda.time.DateTime dateTime78 = property76.setCopy(453);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeUtils.getZone(dateTimeZone79);
        java.lang.String str82 = dateTimeZone80.getName((long) ' ');
        java.lang.String str84 = dateTimeZone80.getName((long) (short) -1);
        org.joda.time.DateTime dateTime85 = dateTime78.withZoneRetainFields(dateTimeZone80);
        org.joda.time.DateTime dateTime87 = dateTime85.withMinuteOfHour(22);
        org.joda.time.DateTime.Property property88 = dateTime87.dayOfYear();
        org.joda.time.LocalDate localDate89 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate91 = localDate89.withCenturyOfEra(382);
        org.joda.time.DateTime dateTime92 = localDate89.toDateTimeAtCurrentTime();
        mutableInterval62.setInterval((org.joda.time.ReadableInstant) dateTime87, (org.joda.time.ReadableInstant) dateTime92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = dateTime87.withYearOfCentury((-457087));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -457087 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514178829L + "'", long50 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str51, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+35:00" + "'", str56, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+35:00" + "'", str58, "+35:00");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+35:00" + "'", str82, "+35:00");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+35:00" + "'", str84, "+35:00");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        long long2 = calendar1.getTimeInMillis();
        long long3 = calendar1.getTimeInMillis();
        int int5 = calendar1.getMinimum(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.Period period12 = duration7.toPeriod(chronology9);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeUtils.getZone(dateTimeZone15);
        boolean boolean18 = dateTimeZone16.equals((java.lang.Object) 1645514161708L);
        org.joda.time.Chronology chronology19 = chronology9.withZone(dateTimeZone16);
        boolean boolean20 = calendar1.after((java.lang.Object) chronology9);
        calendar1.setLenient(false);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromCalendarFields(calendar1);
        boolean boolean24 = calendar1.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514428645,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=28,MILLISECOND=589,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514428645L + "'", long2 == 1645514428645L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514428645L + "'", long3 == 1645514428645L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusMonths(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minusWeeks(38270);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusHours(1097);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime0.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime0, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMonthOfYear(5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        int int12 = property11.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1096 + "'", int3 == 1096);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withFieldAdded(durationFieldType8, 1970);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Interval interval17 = interval15.toInterval();
        long long18 = interval15.getEndMillis();
        java.lang.String str19 = interval15.toString();
        org.joda.time.DateTime dateTime20 = interval15.getStart();
        org.joda.time.Chronology chronology21 = interval15.getChronology();
        org.joda.time.Period period22 = new org.joda.time.Period(0L, 1645514152681L, chronology21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime10.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime10.plusMonths(1970);
        int int26 = localDateTime25.getEra();
        boolean boolean27 = interval4.equals((java.lang.Object) localDateTime25);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514178829L + "'", long18 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str19, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(3);
        int int3 = localDateTime2.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.property(dateTimeFieldType4);
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.Interval interval7 = property5.toInterval();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        long long10 = calendar9.getTimeInMillis();
        int int12 = calendar9.getGreatestMinimum(6);
        java.util.Date date13 = calendar9.getTime();
        int int14 = date13.getHours();
        boolean boolean15 = property5.equals((java.lang.Object) date13);
        org.joda.time.LocalDateTime localDateTime16 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514428703,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2022-02-22T07:16:17.690Z/2022-02-22T07:16:17.690Z\",offset=52499944,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=55,SECOND=28,MILLISECOND=647,ZONE_OFFSET=52499944,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514428703L + "'", long10 == 1645514428703L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 21:55:28 GMT+14:34 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        int int5 = dateTime2.getMinuteOfDay();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateTime2.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((long) 10);
        org.joda.time.Period period13 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        org.joda.time.Period period19 = period15.plusWeeks(1969);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        int int24 = dateTime20.getYearOfCentury();
        int int25 = dateTime20.getDayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime20.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfDay();
        int int29 = dateTime27.getYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime32 = localTime30.minusMillis(3);
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.LocalTime localTime34 = localTime32.withFields(readablePartial33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology36);
        int int38 = localTime37.getSecondOfMinute();
        org.joda.time.Period period39 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime32, (org.joda.time.ReadablePartial) localTime37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Period period41 = period39.plus(readablePeriod40);
        org.joda.time.DateTime dateTime42 = dateTime27.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period19, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean44 = duration1.equals((java.lang.Object) period19);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = period19.normalizedStandard(periodType45);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1096 + "'", int5 == 1096);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1096 + "'", int23 == 1096);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((-292275054));
        boolean boolean6 = dateTimeFormatter2.isPrinter();
        java.io.Writer writer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer7, 1645514366041010L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = interval11.isAfter((long) 10);
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        boolean boolean18 = duration8.isEqual((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration20 = duration14.plus((long) 'x');
        org.joda.time.Minutes minutes21 = duration20.toStandardMinutes();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(minutes21);
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        boolean boolean6 = localTime0.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime.Property property7 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = property7.addCopy((long) (byte) 0);
        org.joda.time.LocalTime localTime14 = property7.addWrapFieldToCopy(54);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(10L, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = dateTime18.get(dateTimeFieldType19);
        boolean boolean21 = localTime15.isSupported(dateTimeFieldType19);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime14.get(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        int int6 = period4.getValue(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration10 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime8);
        int int12 = dateTime8.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = dateTime8.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withSecondOfMinute(187200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 187200000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks((int) (byte) 10);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = period14.toDurationFrom(readableInstant15);
        long long17 = duration16.getMillis();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plus((org.joda.time.ReadableDuration) duration16);
        mutableInterval9.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = mutableInterval9.toDuration();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks((int) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        long long28 = duration27.getMillis();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plus((org.joda.time.ReadableDuration) duration27);
        long long30 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration27);
        boolean boolean31 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration27);
        long long32 = duration27.getStandardDays();
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        int int38 = dateTime35.getMinuteOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime41 = dateTime35.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime35.toDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime35.minus((long) 10);
        org.joda.time.Period period46 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = dateTime49.plusWeeks((int) (byte) 1);
        int int52 = property48.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        boolean boolean57 = interval55.isAfter((long) 10);
        org.joda.time.Duration duration58 = interval55.toDuration();
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration64 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration61, 26160257);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = interval67.isAfter((long) 10);
        org.joda.time.Duration duration70 = interval67.toDuration();
        boolean boolean71 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration70);
        int int72 = duration27.compareTo((org.joda.time.ReadableDuration) duration64);
        int int73 = duration5.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period75 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Duration duration77 = period75.toDurationFrom(readableInstant76);
        org.joda.time.Seconds seconds78 = duration77.toStandardSeconds();
        long long79 = duration77.getStandardSeconds();
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Duration duration81 = duration77.minus(readableDuration80);
        org.joda.time.Duration duration82 = duration27.minus((org.joda.time.ReadableDuration) duration81);
        long long83 = duration27.getStandardSeconds();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 35L + "'", long28 == 35L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 35L + "'", long30 == 35L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration34);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1096 + "'", int38 == 1096);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(seconds78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval6 = mutableInterval5.toMutableInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        java.lang.String str10 = interval9.toString();
        org.joda.time.DateTime dateTime11 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.Interval interval16 = interval14.toInterval();
        long long17 = interval14.getEndMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean19 = interval14.equals((java.lang.Object) dateTimeFieldType18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        int int24 = localTime21.getMillisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        boolean boolean30 = localTime21.equals((java.lang.Object) dateTimeFieldType28);
        boolean boolean31 = interval14.equals((java.lang.Object) boolean30);
        boolean boolean32 = interval9.overlaps((org.joda.time.ReadableInterval) interval14);
        boolean boolean33 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) interval9);
        mutableInterval5.setDurationAfterStart(1645514172518L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(10L, chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime38.toYearMonthDay();
        org.joda.time.DateTime dateTime43 = dateTime38.plusMonths(26181277);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval5.setStart((org.joda.time.ReadableInstant) dateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str10, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514178829L + "'", long17 == 1645514178829L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 65778829 + "'", int24 == 65778829);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getChronology(chronology1);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = durationFieldType0.getField(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getChronology(chronology5);
        boolean boolean7 = durationFieldType0.isSupported(chronology6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = property9.setCopy("2022-02-22T07:18:18.604Z/2022-02-22T07:18:18.604Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:18:18.604Z/2022-02-22T07:18:18.604Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getChronology(chronology0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.hourOfHalfday();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-22T07:15:55.265Z/2022-02-22T07:15:55.265Z");
        java.lang.String str6 = dateTimeField2.getAsShortText(1645514151873L, locale5);
        java.lang.String str7 = dateTimeField2.getName();
        long long9 = dateTimeField2.roundCeiling((long) 'a');
        int int11 = dateTimeField2.getMaximumValue(1645514178981L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withFieldAdded(durationFieldType14, 1970);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Interval interval23 = interval21.toInterval();
        long long24 = interval21.getEndMillis();
        java.lang.String str25 = interval21.toString();
        org.joda.time.DateTime dateTime26 = interval21.getStart();
        org.joda.time.Chronology chronology27 = interval21.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period(0L, 1645514152681L, chronology27);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.minus((org.joda.time.ReadablePeriod) period28);
        java.util.Date date30 = localDateTime29.toDate();
        int int31 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDateTime29);
        long long33 = dateTimeField2.roundHalfFloor(1645514316688L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6" + "'", str6, "6");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hourOfHalfday" + "'", str7, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3600000L + "'", long9 == 3600000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514178829L + "'", long24 == 1645514178829L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00" + "'", str25, "2022-02-23T18:16:18.829+35:00/2022-02-23T18:16:18.829+35:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Dec 29 11:00:26 GMT+14:34 3939");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645513200000L + "'", long33 == 1645513200000L);
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withCenturyOfEra(2);
        int int4 = localDateTime1.getYear();
        int int5 = localDateTime1.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = localDateTime1.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.era();
        java.lang.String str9 = property8.getName();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        java.lang.String str11 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime12 = property8.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65778829 + "'", int7 == 65778829);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "era" + "'", str9, "era");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ap. J.-C." + "'", str11, "ap. J.-C.");
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) ' ', dateTimeZone1);
        int int3 = dateTime2.getYearOfCentury();
        org.joda.time.DateTime.Property property4 = dateTime2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks((int) (byte) 1);
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DurationField durationField16 = durationFieldType12.getField(chronology14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((java.lang.Object) instant10, chronology14);
        boolean boolean18 = interval6.isBefore((org.joda.time.ReadableInstant) instant10);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime20, periodType21);
        org.joda.time.Period period23 = period22.negated();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (-1), chronology25);
        org.joda.time.Period period27 = period26.toPeriod();
        org.joda.time.Period period28 = period23.withFields((org.joda.time.ReadablePeriod) period26);
        int int29 = period28.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadablePeriod) period28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale4);
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime19 = dateTime13.toDateTime(chronology17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 1, (long) ' ', periodType12, chronology17);
        org.joda.time.DurationField durationField21 = chronology17.millis();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1645514189812L, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.Chronology chronology24 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZoneUTC();
        int int26 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeFormatter2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = dateTimeFormatter2.parseLocalTime("18");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertNull(dateTimeZone27);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period4 = period3.negated();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (-1), chronology6);
        org.joda.time.Period period8 = period7.toPeriod();
        org.joda.time.Period period9 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        boolean boolean11 = period4.isSupported(durationFieldType10);
        org.joda.time.Period period13 = period4.withSeconds(26153473);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getChronology(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        org.joda.time.DurationField durationField6 = durationFieldType2.getField(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        org.joda.time.Chronology chronology9 = chronology4.withUTC();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 11, (long) 26167, chronology10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.withCenturyOfEra(382);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays((int) (byte) 10);
        int int17 = localDate14.getMonthOfYear();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.withCenturyOfEra(382);
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = localDate20.toString("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642", locale22);
        org.joda.time.LocalDate localDate25 = localDate20.withYear(21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeUtils.getZone(dateTimeZone26);
        java.lang.String str29 = dateTimeZone27.getName((long) ' ');
        long long31 = dateTimeZone27.previousTransition((long) (short) 1);
        org.joda.time.Interval interval32 = localDate20.toInterval(dateTimeZone27);
        long long34 = dateTimeZone27.previousTransition(35L);
        java.lang.String str36 = dateTimeZone27.getNameKey((long) 26178719);
        java.util.TimeZone timeZone37 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDate14.toDateTimeAtCurrentTime(dateTimeZone27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) chronology10, dateTimeZone27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str23, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+35:00" + "'", str29, "+35:00");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        int int8 = period6.getValue(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period6);
        org.joda.time.Instant instant14 = dateTime2.toInstant();
        int int15 = dateTime2.getMinuteOfHour();
        org.joda.time.DateTime.Property property16 = dateTime2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = interval11.isAfter((long) 10);
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (byte) 10, (int) (byte) 100);
        boolean boolean18 = duration8.isEqual((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusMillis(0);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) 32772, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration31, 70);
        int int34 = duration8.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Seconds seconds35 = duration31.toStandardSeconds();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(seconds35);
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime2 = dateTime0.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime4 = dateTime0.minusDays(12);
        org.joda.time.DateTime dateTime6 = dateTime4.minusYears(382);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        int int4 = dateTime1.getMinuteOfDay();
        int int5 = dateTime1.getYearOfCentury();
        int int6 = dateTime1.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = dateTime1.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        int int11 = dateTimeField10.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusWeeks((int) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plus((org.joda.time.ReadableDuration) duration18);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime14, (int) (short) 1, locale22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = locale22.getDisplayLanguage(locale24);
        java.lang.String str28 = nameProvider0.getShortName(locale22, "PT26160256.999S", "2022-02-22T07:15:53.208Z/2022-02-22T07:15:53.208Z");
        java.text.DateFormatSymbols dateFormatSymbols29 = java.text.DateFormatSymbols.getInstance(locale22);
        java.lang.String str30 = dateFormatSymbols29.getLocalPatternChars();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime34.getMinuteOfDay();
        int int38 = dateTime34.getYearOfCentury();
        int int39 = dateTime34.getDayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime34.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        int int44 = dateTimeField43.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusWeeks((int) (byte) 10);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        long long52 = duration51.getMillis();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plus((org.joda.time.ReadableDuration) duration51);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime47, (int) (short) 1, locale55);
        int int57 = dateTimeField33.getMaximumTextLength(locale55);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        int int61 = dateTime58.getMinuteOfDay();
        int int62 = dateTime58.getYearOfCentury();
        int int63 = dateTime58.getDayOfMonth();
        org.joda.time.DateTime dateTime65 = dateTime58.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        int int68 = dateTimeField67.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusWeeks((int) (byte) 10);
        org.joda.time.Period period73 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Duration duration75 = period73.toDurationFrom(readableInstant74);
        long long76 = duration75.getMillis();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plus((org.joda.time.ReadableDuration) duration75);
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str80 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) localDateTime71, (int) (short) 1, locale79);
        java.lang.String str81 = locale55.getDisplayLanguage(locale79);
        java.text.DateFormatSymbols dateFormatSymbols82 = new java.text.DateFormatSymbols(locale55);
        java.lang.String str83 = dateFormatSymbols82.getLocalPatternChars();
        java.lang.String[] strArray84 = dateFormatSymbols82.getWeekdays();
        dateFormatSymbols29.setShortWeekdays(strArray84);
        org.junit.Assert.assertNotNull(nameProvider0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1096 + "'", int4 == 1096);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1439 + "'", int11 == 1439);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35L + "'", long19 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "chinois" + "'", str25, "chinois");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dateFormatSymbols29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str30, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1096 + "'", int37 == 1096);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 23 + "'", int39 == 23);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1439 + "'", int44 == 1439);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1096 + "'", int61 == 1096);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1439 + "'", int68 == 1439);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 35L + "'", long76 == 35L);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u4e2d\u6587" + "'", str81, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str83, "GyMdkHmsSEDFwWahKzZ");
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        int int7 = period5.getValue(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration11 = period5.toDurationTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 7, chronology12);
        org.joda.time.DurationField durationField15 = chronology12.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        long long19 = dateTimeField16.add((long) 52665654, 27424862);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 80090516L + "'", long19 == 80090516L);
    }
}
